{
    "docs": [
        {
            "location": "/",
            "text": "Background\n\n\nDjango-based backend API  \n\n\n3rd Party Services\n\n\nProject relays on  \n\nTravis-CI  \n\n\nGetting Started\n\n\nSoftware Versions\n\n\nElasticsearch\n - 6.3.2\n\nPython\n - 3.4\n\n\nDevelopment environment preparation\n\n\ncd ~\nmkdir git\ncd git\ngit clone git@github.com:aml-development/aml-backend.git\ncd aml-backend\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt\n\n\n\n\nIf \nvirtualenv env\n does not work it might be \npython3 -m venv env\n if the environment\n\n\nBuilding and running the AML backend\n\n\ncd ~/git/aml-backend\nsource env/bin/activate\nmake dev\n\n\n\n\nMakeFile\n\n\nThere is a MakeFile in the project to run repetitive commands    \n\n\nFlags\n\n\nuse_psql\n-Use Postgres Database\n\nuse_es\n-Use elasticsearch Database\n\nuse_gunicorn\n-Use gunicorn\n\nclean\n-Clean Directory\n\ncreate_static\n-Collect static files\n\ntest\n-Run all tests\n\ntest_parallel\n-Run all test in parallel (increase speed of unit tests)\n\ntest_soft\n-Run all tests (without clean)\n\ninstall_git_hooks\n-Install Git Hooks\n\nrun\n-Run the server locally\n\nrun_all\n-Run server locally, celery_worker, Recommendations\n\ncelery_worker\n-Run the celery worker\n\nrun_gunicorn_secure\n-Run server using gunicorn on HTTPS (preq: clone dev-tools repo)\n\nrun_gunicorn_secure_ansible\n-Run server using gunicorn on HTTPS (preq: clone aml-ansible repo)\n\ncodecheck\n-Run pycodestyle python linter on the code\n\nautopep\n-Run tool to fix python code\n\nautopepdiff\n-Print out linter diff\n\nreindex_es\n-Reindex the data into Elasticsearch\n\nrecommend\n-Run Recommendations algorthims\n\ndb_migrate\n-Db migrate\n\ndev\n-Set up development server with sample data\n\nemail\n-Send Notifications using email server\n\nrun_debug_email_server\n-Run Debug Email Server\n\nshell\n-Launch python shell using sqlite\n\nshell_psql\n-Launch python shell using postgres\n\ncreate_virtualenv\n-Create Python Environment\n\npyenv\n-Create Python Environment and install dependencies\n\npyenv_wheel\n-Create Python Environment and install dependencies using wheelhouse\n\n\nRequirements\n\n\nupgrade_requirements\n-upgrade requirements\n\nfreeze_requirements\n-freeze requirements\n\n\nPostgres Setup\n\n\nCommand to install postgresql (on Debian-based OS)\n\n\nsudo apt-get install postgresql postgresql-contrib\n\n\n\n\nCommands to setup postgresql for aml-backend\n\n\nsudo -i -u postgres\ncreateuser aml_user\npsql -c 'ALTER USER aml_user CREATEDB;'\npsql -c \nALTER USER \naml_user\n WITH PASSWORD 'password';\n\ncreatedb aml\npsql -c 'GRANT ALL PRIVILEGES ON DATABASE aml TO aml_user;'\n\n\n\n\nLocal development method (minimal)\n\n\nTo serve the application on your host machine with minimal external dependencies,\ndo the following:\n\n\n\n\nRemove psycopg2 from requirements.txt (so that Postgres won't be required)\n\n\nEnable HTTP Basic Auth and disable PKI authentication. In settings.py,\n\nREST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES\n should be set to\n\n'rest_framework.authentication.BasicAuthentication'\n\n\nDisable the authorization service. In settings.py, set \nAML.USE_AUTH_SERVER\n\nto \nFalse\n\n\nIn settings.py, set \nAML.DEMO_APP_ROOT\n to \nlocalhost:8000\n (or wherever\nthe django app will be served at)\n\n\n\n\nThen, do the following:\n\n\n\n\nInstall Python 3.4.3. Python can be installed by downloading the appropriate\n    files \nhere\n. Note\n    that Python 3.4 includes both \npip\n and \nvenv\n, a built-in replacement\n    for the \nvirtualenv\n package\n\n\nCreate a new python environment using python 3.4.x. First, create a new\n    directory where this environment will live, for example, in\n    \n~/python_envs/aml\n. Now create a new environment there:\n    \npython3.4 -m venv ENV\n (where \nENV\n is the path you used above)\n\n\nActive the new environment: \nsource ENV/bin/activate\n\n\nInstall the necessary dependencies into this python environment:\n    \npip install -r requirements.txt\n\n\nRun the server: \nmake dev\n\n\n\n\nSwagger documentation for the api is available at \nhttp://localhost:8000/docs/\n\nUse username \nwsmith\n password \npassword\n when prompted for authentication info\n\n\nThere's also the admin interface at \nhttp://localhost:8000/admin\n\n(username: \nwsmith\n, password: \npassword\n)\n\n\naml-ansible method\n\n\nFor those who just want to get AML up and running, see the\n\nquickstart\n of the \naml-ansible\n project.\n\n\nThe recommended approach is to use the vagrant box referenced at the beginning\nof this README, which will create a production-esque deployment of AML:\n\n\n\n\nPostgres (vs. SQLite)\n\n\nPKI (vs. HTTP Basic Auth)\n\n\nUse of external authorization service\n\n\nEnable HTTPS (via nginx reverse proxy)\n\n\nServed via Gunicorn (vs. Django development server)\n\n\n\n\nRuning Elasticsearch for Search\n\n\naml/Settings.py file variable needs to be updated to \nES_ENABLED = True\n  \n\nAfter installing Elasticsearch run \nmake reindex_es\n and run \nmake run_es\n in the aml-backend folder while inside of your $env     \n\n\nInstalling and Running Elasticsearch\n\n\naml-backend requires Elasticsearch 2.4.1  \n\n\nInstallation Guide for 2.4.1\n\n\nThe requirement for installing Elasticsearch is Java 7.  \n\nPreferably, you should install the latest version of the official Java from www.java.com.    \n\n\nYou can get the Elasticsearch 2.4.1 from https://www.elastic.co/blog/elasticsearch-2-4-1-released.  \n\nTo install Elasticsearch, download and extract the archive file for your platform.  \n\nOnce you\u2019ve extracted the archive file, Elasticsearch is ready to run.   \n\n\nBelow are the commands:\n\n\nwget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.1/elasticsearch-2.4.1.tar.gz\ntar xvf elasticsearch-2.4.1.tar.gz\ncd elasticsearch-2.4.1\n./bin/elasticsearch\n\n\n\n\nTip\n  \n\nWhen installing Elasticsearch in production, you can choose to use the Debian or RPM packages provided on the downloads page.  \n\nYou can also use the officially supported Puppet module, Chef cookbook, or Ansible.    \n\n\nReleasing\n\n\nRun \npython release.py\n to generate a tarball with Wheels for the application\nand all of its dependencies. See \nrelease.py\n for details\n\n\nSample Users for BasicAuth\n\n\nBy default, HTTP Basic Authentication is used for login.  \n\nThis can be changed to PKI (client certificates) by changing \nREST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES\n in \nsettings.py\n\n\nBelow are usernames that are part of our sample data (defined in\n\naml-backend/amlcenter/scripts/sample_data_generator.py\n) (password for all users is \npassword\n):\n\n\nAdmins:\n    \n\n\n\n\nbigbrother (minipax)\n\n\nbigbrother2 (minitrue)\n\n\nkhaleesi (miniplen)\n\n\n\n\nOrg Stewards:\n    \n\n\n\n\nwsmith (minitrue, stewarded_orgs: minitrue)    \n\n\njulia (minitrue, stewarded_orgs: minitrue, miniluv)    \n\n\nobrien (minipax, stewarded_orgs: minipax, miniplenty)     \n\n\n\n\nUsers:\n    \n\n\n\n\naaronson (miniluv)\n\n\nhodor (miniluv - PKI)\n\n\njones (minitrue)\n\n\ntammy (minitrue - PKI)\n\n\nrutherford (miniplenty)\n\n\nnoah (miniplenty - PKI)\n\n\nsyme (minipax)\n\n\nabe (minipax - PKI)\n\n\ntparsons (minipax, miniluv)\n\n\njsnow (minipax, miniluv - PKI)\n\n\ncharrington (minipax, miniluv, minitrue)\n\n\njohnson (minipax, miniluv, minitrue - PKI)",
            "title": "Home"
        },
        {
            "location": "/#background",
            "text": "Django-based backend API",
            "title": "Background"
        },
        {
            "location": "/#3rd-party-services",
            "text": "Project relays on   \nTravis-CI",
            "title": "3rd Party Services"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/#software-versions",
            "text": "Elasticsearch  - 6.3.2 Python  - 3.4",
            "title": "Software Versions"
        },
        {
            "location": "/#development-environment-preparation",
            "text": "cd ~\nmkdir git\ncd git\ngit clone git@github.com:aml-development/aml-backend.git\ncd aml-backend\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt  If  virtualenv env  does not work it might be  python3 -m venv env  if the environment",
            "title": "Development environment preparation"
        },
        {
            "location": "/#building-and-running-the-aml-backend",
            "text": "cd ~/git/aml-backend\nsource env/bin/activate\nmake dev",
            "title": "Building and running the AML backend"
        },
        {
            "location": "/#makefile",
            "text": "There is a MakeFile in the project to run repetitive commands      Flags  use_psql -Use Postgres Database use_es -Use elasticsearch Database use_gunicorn -Use gunicorn clean -Clean Directory create_static -Collect static files test -Run all tests test_parallel -Run all test in parallel (increase speed of unit tests) test_soft -Run all tests (without clean) install_git_hooks -Install Git Hooks run -Run the server locally run_all -Run server locally, celery_worker, Recommendations celery_worker -Run the celery worker run_gunicorn_secure -Run server using gunicorn on HTTPS (preq: clone dev-tools repo) run_gunicorn_secure_ansible -Run server using gunicorn on HTTPS (preq: clone aml-ansible repo) codecheck -Run pycodestyle python linter on the code autopep -Run tool to fix python code autopepdiff -Print out linter diff reindex_es -Reindex the data into Elasticsearch recommend -Run Recommendations algorthims db_migrate -Db migrate dev -Set up development server with sample data email -Send Notifications using email server run_debug_email_server -Run Debug Email Server shell -Launch python shell using sqlite shell_psql -Launch python shell using postgres create_virtualenv -Create Python Environment pyenv -Create Python Environment and install dependencies pyenv_wheel -Create Python Environment and install dependencies using wheelhouse  Requirements  upgrade_requirements -upgrade requirements freeze_requirements -freeze requirements",
            "title": "MakeFile"
        },
        {
            "location": "/#postgres-setup",
            "text": "Command to install postgresql (on Debian-based OS)  sudo apt-get install postgresql postgresql-contrib  Commands to setup postgresql for aml-backend  sudo -i -u postgres\ncreateuser aml_user\npsql -c 'ALTER USER aml_user CREATEDB;'\npsql -c  ALTER USER  aml_user  WITH PASSWORD 'password'; \ncreatedb aml\npsql -c 'GRANT ALL PRIVILEGES ON DATABASE aml TO aml_user;'",
            "title": "Postgres Setup"
        },
        {
            "location": "/#local-development-method-minimal",
            "text": "To serve the application on your host machine with minimal external dependencies,\ndo the following:   Remove psycopg2 from requirements.txt (so that Postgres won't be required)  Enable HTTP Basic Auth and disable PKI authentication. In settings.py, REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES  should be set to 'rest_framework.authentication.BasicAuthentication'  Disable the authorization service. In settings.py, set  AML.USE_AUTH_SERVER \nto  False  In settings.py, set  AML.DEMO_APP_ROOT  to  localhost:8000  (or wherever\nthe django app will be served at)   Then, do the following:   Install Python 3.4.3. Python can be installed by downloading the appropriate\n    files  here . Note\n    that Python 3.4 includes both  pip  and  venv , a built-in replacement\n    for the  virtualenv  package  Create a new python environment using python 3.4.x. First, create a new\n    directory where this environment will live, for example, in\n     ~/python_envs/aml . Now create a new environment there:\n     python3.4 -m venv ENV  (where  ENV  is the path you used above)  Active the new environment:  source ENV/bin/activate  Install the necessary dependencies into this python environment:\n     pip install -r requirements.txt  Run the server:  make dev   Swagger documentation for the api is available at  http://localhost:8000/docs/ \nUse username  wsmith  password  password  when prompted for authentication info  There's also the admin interface at  http://localhost:8000/admin \n(username:  wsmith , password:  password )",
            "title": "Local development method (minimal)"
        },
        {
            "location": "/#aml-ansible-method",
            "text": "For those who just want to get AML up and running, see the quickstart  of the  aml-ansible  project.  The recommended approach is to use the vagrant box referenced at the beginning\nof this README, which will create a production-esque deployment of AML:   Postgres (vs. SQLite)  PKI (vs. HTTP Basic Auth)  Use of external authorization service  Enable HTTPS (via nginx reverse proxy)  Served via Gunicorn (vs. Django development server)",
            "title": "aml-ansible method"
        },
        {
            "location": "/#runing-elasticsearch-for-search",
            "text": "aml/Settings.py file variable needs to be updated to  ES_ENABLED = True    \nAfter installing Elasticsearch run  make reindex_es  and run  make run_es  in the aml-backend folder while inside of your $env",
            "title": "Runing Elasticsearch for Search"
        },
        {
            "location": "/#installing-and-running-elasticsearch",
            "text": "aml-backend requires Elasticsearch 2.4.1    Installation Guide for 2.4.1  The requirement for installing Elasticsearch is Java 7.   \nPreferably, you should install the latest version of the official Java from www.java.com.      You can get the Elasticsearch 2.4.1 from https://www.elastic.co/blog/elasticsearch-2-4-1-released.   \nTo install Elasticsearch, download and extract the archive file for your platform.   \nOnce you\u2019ve extracted the archive file, Elasticsearch is ready to run.     Below are the commands:  wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.1/elasticsearch-2.4.1.tar.gz\ntar xvf elasticsearch-2.4.1.tar.gz\ncd elasticsearch-2.4.1\n./bin/elasticsearch  Tip    \nWhen installing Elasticsearch in production, you can choose to use the Debian or RPM packages provided on the downloads page.   \nYou can also use the officially supported Puppet module, Chef cookbook, or Ansible.",
            "title": "Installing and Running Elasticsearch"
        },
        {
            "location": "/#releasing",
            "text": "Run  python release.py  to generate a tarball with Wheels for the application\nand all of its dependencies. See  release.py  for details",
            "title": "Releasing"
        },
        {
            "location": "/#sample-users-for-basicauth",
            "text": "By default, HTTP Basic Authentication is used for login.   \nThis can be changed to PKI (client certificates) by changing  REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES  in  settings.py  Below are usernames that are part of our sample data (defined in aml-backend/amlcenter/scripts/sample_data_generator.py ) (password for all users is  password ):  Admins:        bigbrother (minipax)  bigbrother2 (minitrue)  khaleesi (miniplen)   Org Stewards:        wsmith (minitrue, stewarded_orgs: minitrue)      julia (minitrue, stewarded_orgs: minitrue, miniluv)      obrien (minipax, stewarded_orgs: minipax, miniplenty)        Users:        aaronson (miniluv)  hodor (miniluv - PKI)  jones (minitrue)  tammy (minitrue - PKI)  rutherford (miniplenty)  noah (miniplenty - PKI)  syme (minipax)  abe (minipax - PKI)  tparsons (minipax, miniluv)  jsnow (minipax, miniluv - PKI)  charrington (minipax, miniluv, minitrue)  johnson (minipax, miniluv, minitrue - PKI)",
            "title": "Sample Users for BasicAuth"
        },
        {
            "location": "/access_control/",
            "text": "Controlling Access\n\n\nAnonymous users have no access - all must have a valid username/password (dev)\nor valid certificate (production) to be granted any access\n\n\nA few endpoints only provide READ access:\n\n\n\n\nstorefront\n\n\nmetadata\n\n\n\n\nSeveral resources allow global READ access with WRITE access restricted to\nApps Mall Stewards:\n\n\n\n\naccess_control\n\n\nagency\n\n\ncategory\n\n\ncontact_type\n\n\nlisting_type\n\n\n\n\nimage\n\n\n\n\nglobal READ of metadata, but access_control enforcement on the images\nthemselves\n\n\nWRITE access allowed for all users, but the associated access_control level\n    cannot exceed that of the current user\n\n\n\n\nintent\n\n\n\n\nglobal READ and WRITE allowed, but associated intent.icon.access_control\n    cannot exceed that of the current user\n\n\n\n\nlibrary\n\n\n\n\nREAD access for ORG stewards and above\n\n\nno WRITE access\n\n\nREAD and WRITE access to /self/library for the current user\n\n\n\n\nnotification\n\n\n\n\nglobal READ access\n\n\nWRITE access restricted to Org Stewards and above, unless the notification\n    is associated with a Listing owned by this user\n\n\nREAD and WRITE access to /self/notification for the current user\n\n\n\n\nprofile\n\n\n\n\nREAD access restrictpython manage.py runscript sample_dated to Org Stewards and above\n\n\nWRITE access restricted to the associated user (users cannot create, modify,\n    or delete users other than themselves)\n\n\nREAD and WRITE access to /self/profile for the current user\n\n\n\n\nlisting\n\n\n\n\nREAD access restricted by agency (if listing is private) and by access_control\n    level\n\n\nWRITE access:\n\n\nglobal WRITE access to create/modify/delete a listing in the draft or\n    pending state ONLY\n\n\nOrg Stewards and above can change the state to published/approved or\n    rejected, and change state to enabled/disabled, but must respect\n    Organization (an Org Steward cannot modify\n    a listing for which they are not the owner and/or not a member of\n    the listing's agency)\n\n\nglobal WRITE access to create/modify/delete reviews (item_comment) for\n    any listing (must respect organization (if private) and access_control)\n\n\n\n\n\n\nREAD access to /self/listing to return listings that current user owns (?)\n\n\n\n\nPermission Types\n\n\n\n\n\n\n\n\nPermission Types\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nread\n\n\nThe Read permission refers to a user's capability to read the contents of the endpoint.\n\n\n\n\n\n\nwrite\n\n\nThe Write permission refers to a user's capability to write contents to the endpoint.\n\n\n\n\n\n\naccess_control enforcement flag\n\n\naccess_control level cannot exceed that of the current user\n\n\n\n\n\n\n\n\nAccess Control Matrix\n\n\n\n    \n\n        \naml-center\n\n        \nAccess Control\n\n    \n\n\ntr\n\n    \nth\nEndpoint\n/th\n\n    \nth\nAnonymous Users\n/th\n\n    \nth\nSelf\n/th\n\n    \nth\nOther\n/th\n\n    \nth\nOrg Steward\n/th\n\n    \nth\nApps Mall Steward \n/th\n\n    \nth\nNotes\n/th\n\n\n/tr\n\n\n\ntr\n\n    \ntd\naccess_control (?)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nagency\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\ncategory\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\ncontact_type\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nimage (metadata)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nRead: access_control enforcement on the images themselves, Write: associated access_control level cannot exceed that of the current user\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nintent\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nrwa\n/td\n\n    \ntd\nassociated intent.icon.access_control cannot exceed that of the current user\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlibrary\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlibrary (self)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlisting\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr-a\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlisting (self)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nlisting_type (?)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nnotification\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nr--\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nprofile\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\nusers cannot create, modify, or delete users other than themselves\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nprofile (self route)\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nrw-\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nSelf\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nstorefront\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nR--\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nGet Storefront for current user\n/td\n\n\n/tr\n\n\n\ntr\n\n    \ntd\nmetadata\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nR--\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\n---\n/td\n\n    \ntd\nGet metadata for current user\n/td\n\n\n/tr",
            "title": "Access control"
        },
        {
            "location": "/access_control/#controlling-access",
            "text": "Anonymous users have no access - all must have a valid username/password (dev)\nor valid certificate (production) to be granted any access  A few endpoints only provide READ access:   storefront  metadata   Several resources allow global READ access with WRITE access restricted to\nApps Mall Stewards:   access_control  agency  category  contact_type  listing_type   image   global READ of metadata, but access_control enforcement on the images\nthemselves  WRITE access allowed for all users, but the associated access_control level\n    cannot exceed that of the current user   intent   global READ and WRITE allowed, but associated intent.icon.access_control\n    cannot exceed that of the current user   library   READ access for ORG stewards and above  no WRITE access  READ and WRITE access to /self/library for the current user   notification   global READ access  WRITE access restricted to Org Stewards and above, unless the notification\n    is associated with a Listing owned by this user  READ and WRITE access to /self/notification for the current user   profile   READ access restrictpython manage.py runscript sample_dated to Org Stewards and above  WRITE access restricted to the associated user (users cannot create, modify,\n    or delete users other than themselves)  READ and WRITE access to /self/profile for the current user   listing   READ access restricted by agency (if listing is private) and by access_control\n    level  WRITE access:  global WRITE access to create/modify/delete a listing in the draft or\n    pending state ONLY  Org Stewards and above can change the state to published/approved or\n    rejected, and change state to enabled/disabled, but must respect\n    Organization (an Org Steward cannot modify\n    a listing for which they are not the owner and/or not a member of\n    the listing's agency)  global WRITE access to create/modify/delete reviews (item_comment) for\n    any listing (must respect organization (if private) and access_control)    READ access to /self/listing to return listings that current user owns (?)   Permission Types     Permission Types  Description      read  The Read permission refers to a user's capability to read the contents of the endpoint.    write  The Write permission refers to a user's capability to write contents to the endpoint.    access_control enforcement flag  access_control level cannot exceed that of the current user     Access Control Matrix  \n     \n         aml-center \n         Access Control \n      tr \n     th Endpoint /th \n     th Anonymous Users /th \n     th Self /th \n     th Other /th \n     th Org Steward /th \n     th Apps Mall Steward  /th \n     th Notes /th  /tr  tr \n     td access_control (?) /td \n     td --- /td \n     td r-- /td \n     td /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td agency /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td category /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td contact_type /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td image (metadata) /td \n     td --- /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td Read: access_control enforcement on the images themselves, Write: associated access_control level cannot exceed that of the current user /td  /tr  tr \n     td intent /td \n     td --- /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td rwa /td \n     td associated intent.icon.access_control cannot exceed that of the current user /td  /tr  tr \n     td library /td \n     td --- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td r-- /td \n     td /td  /tr  tr \n     td library (self) /td \n     td --- /td \n     td rw- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td /td  /tr  tr \n     td listing /td \n     td --- /td \n     td r-a /td \n     td --- /td \n     td rw- /td \n     td rw- /td \n     td /td  /tr  tr \n     td listing (self) /td \n     td --- /td \n     td rw- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td /td  /tr  tr \n     td listing_type (?) /td \n     td --- /td \n     td r-- /td \n     td --- /td \n     td r-- /td \n     td rw- /td \n     td /td  /tr  tr \n     td notification /td \n     td --- /td \n     td rw- /td \n     td r-- /td \n     td rw- /td \n     td rw- /td \n     td /td  /tr  tr \n     td profile /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td rw- /td \n     td rw- /td \n     td users cannot create, modify, or delete users other than themselves /td  /tr  tr \n     td profile (self route) /td \n     td --- /td \n     td rw- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td Self /td  /tr  tr \n     td storefront /td \n     td --- /td \n     td R-- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td Get Storefront for current user /td  /tr  tr \n     td metadata /td \n     td --- /td \n     td R-- /td \n     td --- /td \n     td --- /td \n     td --- /td \n     td Get metadata for current user /td  /tr",
            "title": "Controlling Access"
        },
        {
            "location": "/ascii-entities/",
            "text": "+-----------+     +------------+   +-----+   +--------------------+\n                                                 |Category   |     |ListingType |   |Tag  |   |DocUrl              |\n                                                 +-----------+     +------------+   +-----+   +--------------------+\n                                                 |title      |     |title       |   |name |   |name                |\n           +---------------+                     |description|     |description |   +--+--+   |url                 |\n           |ImageType      |                     +----------++     +------+-----+      |      |listing (fk-Listing)|\n           +---------------+                                |             |            |      +------+-------------+\n           |name           |                                |             |            |             |\n           |max_size_bytes |                                |             |            |             |\n           |max_width      +- +-------------------------+   |       +-----+------------+-------------+------------+\n           |max_height     |  |Image                    |   +-------+Listing                                      |    +------------+\n           |min_width      |  +-------------------------+           +---------------------------------------------+    |ContactType |\n           +---------------+  |uuid                     |           |title                                        |    +------------+\n                              |security_marking         |           |approved_date                                |    |name        |\n                              |file_extension           |           |edited_date                                  |    |required    |\n                +-------------+image_type (fk-ImageType)|           |agency = (fk-Agency)                         |    +----------+-+\n                |             +--+------------+---------+           |listing_type (fk-ListingType)                |               |\n                |                |            |                     |description                                  |     +---------+--------------------+\n                |                |   +--------+------+              |launch_url                                   |     |Contact                       |\n                |                |   |Intent         |              | version_name                                |     +------------------------------+\n                |                |   +---------------+              |unique_name                                  |     |secure_phone                  |\n                |                |   |action         |              |small_icon = (fk-Image)                      |     |unsecure_phone                |\n                |                |   |media_type     |              |large_icon = (fk-Image)                      |     |email                         |\n                |                |   |label          +--------------+banner_icon = (fk-Image)                     +-----+name                          |\n                |                |   |icon (fk-Image)|              |large_banner_icon = (fk-Image)               |     |organization                  |\n                |                |   +---------------+              |what_is_new                                  |     |contact_type (fk-ContactType) |\n                |                |                                  |description_short                            |     +------------------------------+\n                |                |                                  |requirements                                 |\n                |             +--+-------------------+              |approval_status                              |       +-------------+\n                |             |Screenshot            |              | * IN_PROGRESS                               |       |ChangeDetail |\n                |             +----------------------+              | * PENDING                                   |       +-------------+\n    +-----------+---+         |small_image (fk|Image)+--------------+ * APPROVED_ORG                              |       |field_name   |\n    |Agency         |         |large_image (fk-Image)|              | * APPROVED                                  |       | old_value   |\n    +---------------+         |listing (fk-Listing)  |              | * REJECTED                                  |       |new_value    |\n    |title          |         +----------------------+              | * DELETED                                   |       |             |\n    |icon (fk-Image)|                                               |is_enabled                                   |       +-------+-----+\n+---+short_name     +-----------------------------------------------+is_featured                                  |               |\n|   +-----------+---+                                               |is_deleted                                   |               |\n|               |                                                   |avg_rate                                     |               |\n|               |                                                   |total_votes                                  |               |\n|       +-------+-------------------+                               |total_rate5                                  |               |\n|       |Notification               |                               |total_rate4                                  |               |\n|       +---------------------------+                               |total_rate3                                  |               |\n|       |created_date               |                               |total_rate2                                  |               |\n|       |message                    +-------------------------------+total_rate1                                  |               |\n|       |expires_date               |                               |total_reviews                                |         +-----+----------------------------+\n|       |author (fk-Profile)        |                               |iframe_compatible                            |         |ListingActivity                   |\n|       |dismissed_by (m2m-Profile) |                               |contacts (mtm-Contact)                       |         +----------------------------------+\n|       |listing (fk-Listing)       |     +--------------------+    |owners (mtm-Profile)                         |         |action                            |\n|       |agency (fk-Agency          |     |Review              |    |categories (mtm-Category)                    |         | * CREATED                        |\n|       |peer (json)                |     +--------------------+    |tags (mtm-Tag)                               |         | * MODIFIED                       |\n|       | fk-Profile                |     |text                |    |required_listings  (fk-Listing)              |         | * SUBMITTED                      |\n|       | folder_name               |     |rate                |    |last_activity  (1t1-ListingActivity          +---------+ * APPROVED_ORG                   |\n|       | bookmark_listing_ids      |     |listing (fk-Listing)|    |current_rejection  (1t1-ListingActivity)     |         | * APPROVED                       |\n|       +-----------------------+---+     |author (fk-Profile) |    |intents (mtm-Intent')                        |         | * REJECTED                       |\n|                               |         |edited_date         |    |security_marking                             |         | * ENABLED                        |\n|                               |         +-+------------------+    |is_private                                   |         | * DISABLED                       |\n|                               |           |                       |is_bookmarked (dy)                           |         | * DELETED                        |\n|                               |           |        +----------------------+-------------------------------------+         | * REVIEW_EDITED                  |\n|                               |           |        |                      |                                               | * REVIEW_DELETED                 |\n|  +------------------------+   |           |        |                      |                                               |activity_date                     |\n|  |ApplicationLibraryEntry |   |           |        |                      |                                               |description                       |\n|  +------------------------+   |           |        |           +----------+-------------------------------+               |author (fk-Profile)               |\n|  |folder (folder_name)    |   |           |        |           |Profile                                   +---------------+listing (fk-Listing)              |\n|  |owner (fk-Profile)      +------------------------+           +------------------------------------------+               |change_details (mtm-ChangeDetail) |\n|  |listing (fk-Listing)    |   |           |                    |display_name                              |               +----------------------------------+\n|  +---------------+--------+   |           |                    |bio                                       |\n|                  |            |           |                    |center_tour_flag                          |\n|                  |            +--------------------------------+hud_tour_flag                             |\n|                  |                        +--------------------+webtop_tour_flag                          |\n|                  |                                             |dn                                        |\n|                  |                                             |issuer_dn                                 |\n|                  +---------------------------------------------+auth_expires                              |\n|                                                                |organizations (mm-Agency)                 |\n|                                                                |stewarded_organizations (mm-Agency)       |\n|                                                                |access_control                            |\n+----------------------------------------------------------------+user (1t1-DjangoUser)                     |\n                                                                 +------------------------------------------+",
            "title": "Ascii entities"
        },
        {
            "location": "/debugging/",
            "text": "Tracing REST Call\n\n\nThis section describes the life of a REST call.  \n\nDeveloper should have knownledge of\n\n\n\n\nDjango's URL Dispatcher\n\n\nDjango Rest Framework's Viewsets\n\n\nDjango Rest Framework's Serializer\n\n\n\n\nExample trace for a GET Request for getting a user's profile for an authenticated user   \n\n\nGET /api/self/profile\n\n\n\n\nEntry Point for all REST Calls - aml/urls.py. All /api/* calls get re-routed to amlcenter/urls.py file    \n\n\namlcenter/urls.py add REST access points for all the views for the resources (agency, category, etc...)    \n\n\nThis line of code \nurl(r'', include('amlcenter.api.profile.urls'))\n adds endpoints related to profile REST Calls\n\n\n\n\n\n\namlcenter/api/profile/user.py - 'self/profile/' route points to current user's profile (Using CurrentUserViewSet in amlcenter/api/profile/views.py)\n\n\namlcenter/api/profile/views.py - For GET Request for this route it will call the 'retrieve' method\n\n\nBefore allowing user to access the endpoint it will make sure user is authenticated and has the correct role using 'permission_classes = (permissions.IsUser,)'\n\n\n\n\n\n\n\n\nPerformance Debugging\n\n\nWe check the performance of a Database model using shell_plus command for manage.py.\n\n\npython manage.py shell_plus --print-sql\n\n\n\n\n# Shell Plus Model Imports\nfrom corsheaders.models import CorsModel\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import Group, Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.sessions.models import Session\nfrom amlcenter.models import Agency, ApplicationLibraryEntry, Category, ChangeDetail, Contact, ContactType, DocUrl, Image, ImageType, Intent, Listing, ListingActivity, ListingType, Notification, Profile, Review, Screenshot, Tag\n# Shell Plus Django Imports\nfrom django.utils import timezone\nfrom django.conf import settings\nfrom django.core.cache import cache\nfrom django.core.urlresolvers import reverse\nfrom django.db.models import Avg, Count, F, Max, Min, Sum, Q, Prefetch\nfrom django.db import transaction\nPython 3.4.3 (default, Feb 25 2016, 10:08:19)\n[GCC 4.8.2] on linux\nType \nhelp\n, \ncopyright\n, \ncredits\n or \nlicense\n for more information.\n(InteractiveConsole)\n\n\n\n\n\n\nGetting all Profiles (without any optimizations)\n\n\n Profile.objects.all()\nQUERY = 'SELECT \namlcenter_profile\n.\nid\n, \namlcenter_profile\n.\ndisplay_name\n, \namlcenter_profile\n.\nbio\n, \namlcenter_profile\n.\ncenter_tour_flag\n, \namlcenter_profile\n.\nhud_tour_flag\n, \namlcenter_profile\n.\nwebtop_tour_flag\n, \namlcenter_profile\n.\ndn\n, \namlcenter_profile\n.\nissuer_dn\n, \namlcenter_profile\n.\nauth_expires\n, \namlcenter_profile\n.\naccess_control\n, \namlcenter_profile\n.\nuser_id\n FROM \namlcenter_profile\n LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000324s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (1,)\n\nExecution time: 0.000207s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (2,)\n\nExecution time: 0.000203s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (3,)\n\nExecution time: 0.000202s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (4,)\n\nExecution time: 0.000124s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (5,)\n\nExecution time: 0.000101s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (6,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (7,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (8,)\n\nExecution time: 0.000131s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (9,)\n\nExecution time: 0.000099s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (10,)\n\nExecution time: 0.000098s [Database: default]\n\nQUERY = 'SELECT \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \nauth_user\n WHERE \nauth_user\n.\nid\n = %s' - PARAMS = (11,)\n\nExecution time: 0.000096s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]\n\n\n\n\n\nResults:\n12 database calls ( 1 + num of user = Database calls)\n\n\nGetting all Profiles (with join)\n\n\n Profile.objects.all().select_related('user')\nQUERY = 'SELECT \namlcenter_profile\n.\nid\n, \namlcenter_profile\n.\ndisplay_name\n, \namlcenter_profile\n.\nbio\n, \namlcenter_profile\n.\ncenter_tour_flag\n, \namlcenter_profile\n.\nhud_tour_flag\n, \namlcenter_profile\n.\nwebtop_tour_flag\n, \namlcenter_profile\n.\ndn\n, \namlcenter_profile\n.\nissuer_dn\n, \namlcenter_profile\n.\nauth_expires\n, \namlcenter_profile\n.\naccess_control\n, \namlcenter_profile\n.\nuser_id\n, \nauth_user\n.\nid\n, \nauth_user\n.\npassword\n, \nauth_user\n.\nlast_login\n, \nauth_user\n.\nis_superuser\n, \nauth_user\n.\nusername\n, \nauth_user\n.\nfirst_name\n, \nauth_user\n.\nlast_name\n, \nauth_user\n.\nemail\n, \nauth_user\n.\nis_staff\n, \nauth_user\n.\nis_active\n, \nauth_user\n.\ndate_joined\n FROM \namlcenter_profile\n LEFT OUTER JOIN \nauth_user\n ON ( \namlcenter_profile\n.\nuser_id\n = \nauth_user\n.\nid\n ) LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000472s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]\n\n\n\n\nResults:\n1 database call\n\n\nDebugging Storefront Serializer\n\n\nfrom rest_framework.response import Response\nimport amlcenter.api.storefront.model_access as ma\nimport amlcenter.api.storefront.serializers as se\nimport timeit\nfrom django.test.client import RequestFactory\n\nrf = RequestFactory()\nget_request = rf.get('/hello/')\n\ndata = ma.get_storefront('bigbrother') # Database calls\nsea = se.StorefrontSerializer(data,context={'request':get_request})\nstart = timeit.timeit(); r= Response(sea.data) ; end = timeit.timeit() # Database calls\nprint('Time: %s' % end)\n\n\n\n\nImproving \nput_counts_in_listings_endpoint\n database example\n\n\nimport time\nfrom django.db import transaction\n\n\ndef show_db_calls():\n    db_connection = transaction.get_connection()\n    number_of_calls = len(db_connection.queries)\n    db_connection.queries_log.clear()\n    return number_of_calls\n\n\ndef group_by_sum(count_data_list, group_key, count_key='agency_count'):\n    \n\n    { \nagency__id\n: 1, \nagency_count\n: 39, \napproval_status\n: \nAPPROVED\n, \nis_enabled\n: true},\n\n    returns\n        dict\n    \n\n    count_dict = {}\n\n    for record_dict in count_data_list:\n        group_key_in_record = group_key in record_dict\n\n        if group_key_in_record:\n            group_key_value = record_dict[group_key]\n            group_key_count_value = record_dict[count_key]\n            group_key_value_in_count_dict = group_key_value in count_dict\n\n            if group_key_value_in_count_dict:\n                count_dict[group_key_value] = count_dict[group_key_value] + group_key_count_value\n            else:\n                count_dict[group_key_value] = group_key_count_value\n\n    total_count = 0\n\n    for key in count_dict:\n        value = count_dict[key]\n        total_count = total_count + value\n\n    count_dict['_total_count'] = total_count\n\n    return count_dict\n\n\ndef put_counts_in_listings_endpoint_new(queryset):\n    \n\n    Add counts to the listing/ endpoint\n\n    Args:\n        querset: models.Listing queryset\n\n    Returns:\n        {\n            total\n: \ntotal listings\n,\n            organizations: {\n                \norg_id\n: \nint\n,\n                ...\n            },\n            enabled: \nenabled listings\n,\n            IN_PROGRESS: \nint\n,\n            PENDING: \nint\n,\n            PENDING_DELETION: \nint\n\n            REJECTED: \nint\n,\n            APPROVED_ORG: \nint\n,\n            APPROVED: \nint\n,\n            DELETED: \nint\n\n        }\n    \n\n    show_db_calls()\n    start_time = int(round(time.time() * 1000))\n    data = {}\n\n    count_data = (models.Listing\n                        .objects.filter(pk__in=queryset)\n                        .values('agency__id','is_enabled', 'approval_status')\n                        .annotate(agency_count=Count('agency__id')))\n\n    enabled_count = group_by_sum(count_data, 'is_enabled')\n\n    data['total'] = enabled_count.get('_total_count', 0)\n    data['enabled'] = enabled_count.get(True, 0)\n\n    agency_count = group_by_sum(count_data, 'agency__id')\n\n    data['organizations'] = {}\n\n    agency_ids = list(models.Agency.objects.values_list('id', flat=True))\n    for agency_id in agency_ids:\n        agency_id_str = str(agency_id)\n        if agency_id in agency_count:\n            data['organizations'][agency_id_str] = agency_count[agency_id]\n        else:\n            data['organizations'][agency_id_str] = '0'\n\n    approval_status_count = group_by_sum(count_data, 'approval_status')\n    approval_status_list = [\n        models.Listing.IN_PROGRESS,\n        models.Listing.PENDING,\n        models.Listing.REJECTED,\n        models.Listing.APPROVED_ORG,\n        models.Listing.APPROVED,\n        models.Listing.DELETED,\n        models.Listing.PENDING_DELETION\n    ]\n\n    for current_approval_status in approval_status_list:\n        data[current_approval_status] = approval_status_count.get(current_approval_status, 0)\n\n    data['_time'] = int(round(time.time() * 1000)) - start_time\n    data['_db_calls'] = show_db_calls()\n    return data\n\n\ndef put_counts_in_listings_endpoint(queryset):\n    \n\n    Add counts to the listing/ endpoint\n\n    Args:\n        querset: models.Listing queryset\n\n    Returns:\n        {\n            total\n: \ntotal listings\n,\n            organizations: {\n                \norg_id\n: \nint\n,\n                ...\n            },\n            enabled: \nenabled listings\n,\n            IN_PROGRESS: \nint\n,\n            PENDING: \nint\n,\n            PENDING_DELETION: \nint\n\n            REJECTED: \nint\n,\n            APPROVED_ORG: \nint\n,\n            APPROVED: \nint\n,\n            DELETED: \nint\n\n        }\n    \n\n    show_db_calls()\n    start_time = int(round(time.time() * 1000))\n    # TODO: Take in account 2pki user (rivera-20160908)\n\n    data = {}\n\n    # Number of total listings\n    num_total = queryset.count()\n    # Number of listing that is Enabled\n    num_enabled = queryset.filter(is_enabled=True).count()\n\n    # Number of listing that is IN_PROGRESS\n    num_in_progress = queryset.filter(\n        approval_status=models.Listing.IN_PROGRESS).count()\n\n    # Number of listing that is PENDING\n    num_pending = queryset.filter(\n        approval_status=models.Listing.PENDING).count()\n\n    # Number of listing that is REJECTED\n    num_rejected = queryset.filter(\n        approval_status=models.Listing.REJECTED).count()\n\n    # Number of listing that is APPROVED_ORG\n    num_approved_org = queryset.filter(\n        approval_status=models.Listing.APPROVED_ORG).count()\n\n    # Number of listing that is APPROVED\n    num_approved = queryset.filter(\n        approval_status=models.Listing.APPROVED).count()\n\n    # Number of listing that is DELETED\n    num_deleted = queryset.filter(\n        approval_status=models.Listing.DELETED).count()\n\n    # Number of listing that is PENDING_DELETION\n    num_pending_deletion = queryset.filter(\n        approval_status=models.Listing.PENDING_DELETION).count()\n\n    data['total'] = num_total\n    data['enabled'] = num_enabled\n    data['organizations'] = {}\n    data[models.Listing.IN_PROGRESS] = num_in_progress\n    data[models.Listing.PENDING] = num_pending\n    data[models.Listing.REJECTED] = num_rejected\n    data[models.Listing.APPROVED_ORG] = num_approved_org\n    data[models.Listing.APPROVED] = num_approved\n    data[models.Listing.DELETED] = num_deleted\n    data[models.Listing.PENDING_DELETION] = num_pending_deletion\n\n    orgs = models.Agency.objects.all()\n    for i in orgs:\n        data['organizations'][str(i.id)] = queryset.filter(\n            agency__id=i.id).count()\n\n    data['_time'] = int(round(time.time() * 1000)) - start_time\n    data['_db_calls'] = show_db_calls()\n    return data\n\n\n\n\nput_counts_in_listings_endpoint\n function results\n  \n\nThis function took 97 milliseconds and took 19 database calls\n\n\n{\n    \nAPPROVED_ORG\n: 0,\n    \nIN_PROGRESS\n: 0,\n    \nDELETED\n: 0,\n    \nPENDING\n: 0,\n    \norganizations\n: {\n        \n1\n: 2,\n        \n2\n: 1,\n        \n3\n: 0,\n        \n4\n: 0,\n        \n5\n: 0,\n        \n6\n: 0,\n        \n7\n: 0,\n        \n8\n: 0,\n        \n9\n: 0\n    },\n    \ntotal\n: 3,\n    \n_time\n: 97,\n    \nenabled\n: 3,\n    \nPENDING_DELETION\n: 0,\n    \nREJECTED\n: 0,\n    \n_db_calls\n: 19,\n    \nAPPROVED\n: 3\n}\n\n\n\n\nput_counts_in_listings_endpoint_new\n function results\n  \n\nThis function took 7 milliseconds and took 2 database calls\n\n\n{\n   \nAPPROVED_ORG\n: 0,\n   \nIN_PROGRESS\n: 0,\n   \nDELETED\n: 0,\n   \nPENDING\n: 0,\n   \norganizations\n: {\n       \n1\n: 2,\n       \n2\n: 1,\n       \n3\n: 0,\n       \n4\n: 0,\n       \n5\n: 0,\n       \n6\n: 0,\n       \n7\n: 0,\n       \n8\n: 0,\n       \n9\n: 0\n   },\n   \ntotal\n: 3,\n   \n_time\n: 7,\n   \nenabled\n: 3,\n   \nPENDING_DELETION\n: 0,\n   \nREJECTED\n: 0,\n   \n_db_calls\n: 2,\n   \nAPPROVED\n: 3\n}\n\n\n\n\nImproving \nput_counts_in_listings_endpoint\n database example\n\n\n_update_rating\n original code\n   \n\n\ndef _update_rating(username, listing):\n    \n\n    Invoked each time a review is created, deleted, or updated\n    \n\n    reviews = models.Review.objects.filter(listing=listing, review_parent__isnull=True)\n    rate1 = reviews.filter(rate=1).count()\n    rate2 = reviews.filter(rate=2).count()\n    rate3 = reviews.filter(rate=3).count()\n    rate4 = reviews.filter(rate=4).count()\n    rate5 = reviews.filter(rate=5).count()\n    total_votes = reviews.count()\n    total_reviews = total_votes - reviews.filter(text=None).count()\n\n    review_responses = models.Review.objects.filter(listing=listing, review_parent__isnull=False)\n    total_review_responses = review_responses.count()\n\n    # calculate weighted average\n    if total_votes == 0:\n        avg_rate = 0\n    else:\n        avg_rate = (5 * rate5 + 4 * rate4 + 3 * rate3 + 2 * rate2 + rate1) / total_votes\n        avg_rate = float('{0:.1f}'.format(avg_rate))\n\n    # update listing\n    listing.total_rate1 = rate1\n    listing.total_rate2 = rate2\n    listing.total_rate3 = rate3\n    listing.total_rate4 = rate4\n    listing.total_rate5 = rate5\n    listing.total_votes = total_votes\n    listing.total_reviews = total_reviews\n    listing.total_review_responses = total_review_responses\n    listing.avg_rate = avg_rate\n    listing.edited_date = utils.get_now_utc()\n    listing.save()\n    return listing\n\n\n\n\nCode for benchmark (running user \nmake shell\n)    \n\n\nimport time\n\ndef show_db_calls():\n    db_connection = transaction.get_connection()\n    number_of_calls = len(db_connection.queries)\n    db_connection.queries_log.clear()\n    return number_of_calls\n\n\nshow_db_calls()\n\nstart_time = int(round(time.time() * 1000))\n\n\nfrom amlcenter.api.listing.model_access import _update_rating\nl = Listing.objects.all()\n[_update_rating('bigbrother', la) for la in l]\n\nprint(int(round(time.time() * 1000)) - start_time)\nprint(show_db_calls())  # Not working\nprint('')\n\n# 1434 Comment\n# 3492 with counts()\n\n\n\n\n\n_update_rating new code\n function results\n   \n\n\nfrom django.db.models.expressions import RawSQL\nl=Listing.objects.get(id=2);\nReview.objects.filter(listing=l).values('rate').annotate(review_parent_isnull=RawSQL('\nreview_parent_id\n is %s ', (None,)), rate_count=Count('rate'))\n\n\nSQLITE3:\n\nQuerySet [{'rate_count': 1, 'rate': 1, 'review_parent_isnull': 0},\n    {'rate_count': 1, 'rate': 1, 'review_parent_isnull': 1},\n    {'rate_count': 1, 'rate': 3, 'review_parent_isnull': 1},\n    {'rate_count': 1, 'rate': 4, 'review_parent_isnull': 1},\n    {'rate_count': 1, 'rate': 5, 'review_parent_isnull': 1}]\n\n\nPostgresql\n\nQuerySet [{'rate': 3, 'rate_count': 1, 'review_parent_isnull': True},\n           {'rate': 4, 'rate_count': 1, 'review_parent_isnull': True},\n           {'rate': 1, 'rate_count': 1, 'review_parent_isnull': False},\n           {'rate': 5, 'rate_count': 1, 'review_parent_isnull': True},\n           {'rate': 1, 'rate_count': 1, 'review_parent_isnull': True}]\n\n\n\n\n\n\nSELECT \"amlcenter_review\".\"rate\",\nCOUNT(\"amlcenter_review\".\"rate\") AS \"rate_count\",\n(\"review_parent_id\" is NULL ) AS \"review_parent_isnull\"\nFROM \"amlcenter_review\"\nWHERE \"amlcenter_review\".\"listing_id\" = 2\nGROUP BY \"amlcenter_review\".\"rate\", (\"review_parent_id\" is NULL )\n```",
            "title": "Debugging"
        },
        {
            "location": "/debugging/#tracing-rest-call",
            "text": "This section describes the life of a REST call.   \nDeveloper should have knownledge of   Django's URL Dispatcher  Django Rest Framework's Viewsets  Django Rest Framework's Serializer   Example trace for a GET Request for getting a user's profile for an authenticated user     GET /api/self/profile   Entry Point for all REST Calls - aml/urls.py. All /api/* calls get re-routed to amlcenter/urls.py file      amlcenter/urls.py add REST access points for all the views for the resources (agency, category, etc...)      This line of code  url(r'', include('amlcenter.api.profile.urls'))  adds endpoints related to profile REST Calls    amlcenter/api/profile/user.py - 'self/profile/' route points to current user's profile (Using CurrentUserViewSet in amlcenter/api/profile/views.py)  amlcenter/api/profile/views.py - For GET Request for this route it will call the 'retrieve' method  Before allowing user to access the endpoint it will make sure user is authenticated and has the correct role using 'permission_classes = (permissions.IsUser,)'",
            "title": "Tracing REST Call"
        },
        {
            "location": "/debugging/#performance-debugging",
            "text": "We check the performance of a Database model using shell_plus command for manage.py.  python manage.py shell_plus --print-sql  # Shell Plus Model Imports\nfrom corsheaders.models import CorsModel\nfrom django.contrib.admin.models import LogEntry\nfrom django.contrib.auth.models import Group, Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.sessions.models import Session\nfrom amlcenter.models import Agency, ApplicationLibraryEntry, Category, ChangeDetail, Contact, ContactType, DocUrl, Image, ImageType, Intent, Listing, ListingActivity, ListingType, Notification, Profile, Review, Screenshot, Tag\n# Shell Plus Django Imports\nfrom django.utils import timezone\nfrom django.conf import settings\nfrom django.core.cache import cache\nfrom django.core.urlresolvers import reverse\nfrom django.db.models import Avg, Count, F, Max, Min, Sum, Q, Prefetch\nfrom django.db import transaction\nPython 3.4.3 (default, Feb 25 2016, 10:08:19)\n[GCC 4.8.2] on linux\nType  help ,  copyright ,  credits  or  license  for more information.\n(InteractiveConsole)",
            "title": "Performance Debugging"
        },
        {
            "location": "/debugging/#getting-all-profiles-without-any-optimizations",
            "text": "Profile.objects.all()\nQUERY = 'SELECT  amlcenter_profile . id ,  amlcenter_profile . display_name ,  amlcenter_profile . bio ,  amlcenter_profile . center_tour_flag ,  amlcenter_profile . hud_tour_flag ,  amlcenter_profile . webtop_tour_flag ,  amlcenter_profile . dn ,  amlcenter_profile . issuer_dn ,  amlcenter_profile . auth_expires ,  amlcenter_profile . access_control ,  amlcenter_profile . user_id  FROM  amlcenter_profile  LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000324s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (1,)\n\nExecution time: 0.000207s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (2,)\n\nExecution time: 0.000203s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (3,)\n\nExecution time: 0.000202s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (4,)\n\nExecution time: 0.000124s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (5,)\n\nExecution time: 0.000101s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (6,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (7,)\n\nExecution time: 0.000145s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (8,)\n\nExecution time: 0.000131s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (9,)\n\nExecution time: 0.000099s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (10,)\n\nExecution time: 0.000098s [Database: default]\n\nQUERY = 'SELECT  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  auth_user  WHERE  auth_user . id  = %s' - PARAMS = (11,)\n\nExecution time: 0.000096s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]  Results:\n12 database calls ( 1 + num of user = Database calls)",
            "title": "Getting all Profiles (without any optimizations)"
        },
        {
            "location": "/debugging/#getting-all-profiles-with-join",
            "text": "Profile.objects.all().select_related('user')\nQUERY = 'SELECT  amlcenter_profile . id ,  amlcenter_profile . display_name ,  amlcenter_profile . bio ,  amlcenter_profile . center_tour_flag ,  amlcenter_profile . hud_tour_flag ,  amlcenter_profile . webtop_tour_flag ,  amlcenter_profile . dn ,  amlcenter_profile . issuer_dn ,  amlcenter_profile . auth_expires ,  amlcenter_profile . access_control ,  amlcenter_profile . user_id ,  auth_user . id ,  auth_user . password ,  auth_user . last_login ,  auth_user . is_superuser ,  auth_user . username ,  auth_user . first_name ,  auth_user . last_name ,  auth_user . email ,  auth_user . is_staff ,  auth_user . is_active ,  auth_user . date_joined  FROM  amlcenter_profile  LEFT OUTER JOIN  auth_user  ON (  amlcenter_profile . user_id  =  auth_user . id  ) LIMIT 21' - PARAMS = ()\n\nExecution time: 0.000472s [Database: default]\n\n[Profile: wsmith, Profile: julia, Profile: obrien, Profile: bigbrother, Profile: bigbrother2, Profile: aaronson, Profile: jones, Profile: rutherford, Profile: syme, Profile: tparsons, Profile: charrington]  Results:\n1 database call",
            "title": "Getting all Profiles (with join)"
        },
        {
            "location": "/debugging/#debugging-storefront-serializer",
            "text": "from rest_framework.response import Response\nimport amlcenter.api.storefront.model_access as ma\nimport amlcenter.api.storefront.serializers as se\nimport timeit\nfrom django.test.client import RequestFactory\n\nrf = RequestFactory()\nget_request = rf.get('/hello/')\n\ndata = ma.get_storefront('bigbrother') # Database calls\nsea = se.StorefrontSerializer(data,context={'request':get_request})\nstart = timeit.timeit(); r= Response(sea.data) ; end = timeit.timeit() # Database calls\nprint('Time: %s' % end)",
            "title": "Debugging Storefront Serializer"
        },
        {
            "location": "/debugging/#improving-put_counts_in_listings_endpoint-database-example",
            "text": "import time\nfrom django.db import transaction\n\n\ndef show_db_calls():\n    db_connection = transaction.get_connection()\n    number_of_calls = len(db_connection.queries)\n    db_connection.queries_log.clear()\n    return number_of_calls\n\n\ndef group_by_sum(count_data_list, group_key, count_key='agency_count'):\n     \n    {  agency__id : 1,  agency_count : 39,  approval_status :  APPROVED ,  is_enabled : true},\n\n    returns\n        dict\n     \n    count_dict = {}\n\n    for record_dict in count_data_list:\n        group_key_in_record = group_key in record_dict\n\n        if group_key_in_record:\n            group_key_value = record_dict[group_key]\n            group_key_count_value = record_dict[count_key]\n            group_key_value_in_count_dict = group_key_value in count_dict\n\n            if group_key_value_in_count_dict:\n                count_dict[group_key_value] = count_dict[group_key_value] + group_key_count_value\n            else:\n                count_dict[group_key_value] = group_key_count_value\n\n    total_count = 0\n\n    for key in count_dict:\n        value = count_dict[key]\n        total_count = total_count + value\n\n    count_dict['_total_count'] = total_count\n\n    return count_dict\n\n\ndef put_counts_in_listings_endpoint_new(queryset):\n     \n    Add counts to the listing/ endpoint\n\n    Args:\n        querset: models.Listing queryset\n\n    Returns:\n        {\n            total :  total listings ,\n            organizations: {\n                 org_id :  int ,\n                ...\n            },\n            enabled:  enabled listings ,\n            IN_PROGRESS:  int ,\n            PENDING:  int ,\n            PENDING_DELETION:  int \n            REJECTED:  int ,\n            APPROVED_ORG:  int ,\n            APPROVED:  int ,\n            DELETED:  int \n        }\n     \n    show_db_calls()\n    start_time = int(round(time.time() * 1000))\n    data = {}\n\n    count_data = (models.Listing\n                        .objects.filter(pk__in=queryset)\n                        .values('agency__id','is_enabled', 'approval_status')\n                        .annotate(agency_count=Count('agency__id')))\n\n    enabled_count = group_by_sum(count_data, 'is_enabled')\n\n    data['total'] = enabled_count.get('_total_count', 0)\n    data['enabled'] = enabled_count.get(True, 0)\n\n    agency_count = group_by_sum(count_data, 'agency__id')\n\n    data['organizations'] = {}\n\n    agency_ids = list(models.Agency.objects.values_list('id', flat=True))\n    for agency_id in agency_ids:\n        agency_id_str = str(agency_id)\n        if agency_id in agency_count:\n            data['organizations'][agency_id_str] = agency_count[agency_id]\n        else:\n            data['organizations'][agency_id_str] = '0'\n\n    approval_status_count = group_by_sum(count_data, 'approval_status')\n    approval_status_list = [\n        models.Listing.IN_PROGRESS,\n        models.Listing.PENDING,\n        models.Listing.REJECTED,\n        models.Listing.APPROVED_ORG,\n        models.Listing.APPROVED,\n        models.Listing.DELETED,\n        models.Listing.PENDING_DELETION\n    ]\n\n    for current_approval_status in approval_status_list:\n        data[current_approval_status] = approval_status_count.get(current_approval_status, 0)\n\n    data['_time'] = int(round(time.time() * 1000)) - start_time\n    data['_db_calls'] = show_db_calls()\n    return data\n\n\ndef put_counts_in_listings_endpoint(queryset):\n     \n    Add counts to the listing/ endpoint\n\n    Args:\n        querset: models.Listing queryset\n\n    Returns:\n        {\n            total :  total listings ,\n            organizations: {\n                 org_id :  int ,\n                ...\n            },\n            enabled:  enabled listings ,\n            IN_PROGRESS:  int ,\n            PENDING:  int ,\n            PENDING_DELETION:  int \n            REJECTED:  int ,\n            APPROVED_ORG:  int ,\n            APPROVED:  int ,\n            DELETED:  int \n        }\n     \n    show_db_calls()\n    start_time = int(round(time.time() * 1000))\n    # TODO: Take in account 2pki user (rivera-20160908)\n\n    data = {}\n\n    # Number of total listings\n    num_total = queryset.count()\n    # Number of listing that is Enabled\n    num_enabled = queryset.filter(is_enabled=True).count()\n\n    # Number of listing that is IN_PROGRESS\n    num_in_progress = queryset.filter(\n        approval_status=models.Listing.IN_PROGRESS).count()\n\n    # Number of listing that is PENDING\n    num_pending = queryset.filter(\n        approval_status=models.Listing.PENDING).count()\n\n    # Number of listing that is REJECTED\n    num_rejected = queryset.filter(\n        approval_status=models.Listing.REJECTED).count()\n\n    # Number of listing that is APPROVED_ORG\n    num_approved_org = queryset.filter(\n        approval_status=models.Listing.APPROVED_ORG).count()\n\n    # Number of listing that is APPROVED\n    num_approved = queryset.filter(\n        approval_status=models.Listing.APPROVED).count()\n\n    # Number of listing that is DELETED\n    num_deleted = queryset.filter(\n        approval_status=models.Listing.DELETED).count()\n\n    # Number of listing that is PENDING_DELETION\n    num_pending_deletion = queryset.filter(\n        approval_status=models.Listing.PENDING_DELETION).count()\n\n    data['total'] = num_total\n    data['enabled'] = num_enabled\n    data['organizations'] = {}\n    data[models.Listing.IN_PROGRESS] = num_in_progress\n    data[models.Listing.PENDING] = num_pending\n    data[models.Listing.REJECTED] = num_rejected\n    data[models.Listing.APPROVED_ORG] = num_approved_org\n    data[models.Listing.APPROVED] = num_approved\n    data[models.Listing.DELETED] = num_deleted\n    data[models.Listing.PENDING_DELETION] = num_pending_deletion\n\n    orgs = models.Agency.objects.all()\n    for i in orgs:\n        data['organizations'][str(i.id)] = queryset.filter(\n            agency__id=i.id).count()\n\n    data['_time'] = int(round(time.time() * 1000)) - start_time\n    data['_db_calls'] = show_db_calls()\n    return data  put_counts_in_listings_endpoint  function results    \nThis function took 97 milliseconds and took 19 database calls  {\n     APPROVED_ORG : 0,\n     IN_PROGRESS : 0,\n     DELETED : 0,\n     PENDING : 0,\n     organizations : {\n         1 : 2,\n         2 : 1,\n         3 : 0,\n         4 : 0,\n         5 : 0,\n         6 : 0,\n         7 : 0,\n         8 : 0,\n         9 : 0\n    },\n     total : 3,\n     _time : 97,\n     enabled : 3,\n     PENDING_DELETION : 0,\n     REJECTED : 0,\n     _db_calls : 19,\n     APPROVED : 3\n}  put_counts_in_listings_endpoint_new  function results    \nThis function took 7 milliseconds and took 2 database calls  {\n    APPROVED_ORG : 0,\n    IN_PROGRESS : 0,\n    DELETED : 0,\n    PENDING : 0,\n    organizations : {\n        1 : 2,\n        2 : 1,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0\n   },\n    total : 3,\n    _time : 7,\n    enabled : 3,\n    PENDING_DELETION : 0,\n    REJECTED : 0,\n    _db_calls : 2,\n    APPROVED : 3\n}",
            "title": "Improving put_counts_in_listings_endpoint database example"
        },
        {
            "location": "/debugging/#improving-put_counts_in_listings_endpoint-database-example_1",
            "text": "_update_rating  original code      def _update_rating(username, listing):\n     \n    Invoked each time a review is created, deleted, or updated\n     \n    reviews = models.Review.objects.filter(listing=listing, review_parent__isnull=True)\n    rate1 = reviews.filter(rate=1).count()\n    rate2 = reviews.filter(rate=2).count()\n    rate3 = reviews.filter(rate=3).count()\n    rate4 = reviews.filter(rate=4).count()\n    rate5 = reviews.filter(rate=5).count()\n    total_votes = reviews.count()\n    total_reviews = total_votes - reviews.filter(text=None).count()\n\n    review_responses = models.Review.objects.filter(listing=listing, review_parent__isnull=False)\n    total_review_responses = review_responses.count()\n\n    # calculate weighted average\n    if total_votes == 0:\n        avg_rate = 0\n    else:\n        avg_rate = (5 * rate5 + 4 * rate4 + 3 * rate3 + 2 * rate2 + rate1) / total_votes\n        avg_rate = float('{0:.1f}'.format(avg_rate))\n\n    # update listing\n    listing.total_rate1 = rate1\n    listing.total_rate2 = rate2\n    listing.total_rate3 = rate3\n    listing.total_rate4 = rate4\n    listing.total_rate5 = rate5\n    listing.total_votes = total_votes\n    listing.total_reviews = total_reviews\n    listing.total_review_responses = total_review_responses\n    listing.avg_rate = avg_rate\n    listing.edited_date = utils.get_now_utc()\n    listing.save()\n    return listing  Code for benchmark (running user  make shell )      import time\n\ndef show_db_calls():\n    db_connection = transaction.get_connection()\n    number_of_calls = len(db_connection.queries)\n    db_connection.queries_log.clear()\n    return number_of_calls\n\n\nshow_db_calls()\n\nstart_time = int(round(time.time() * 1000))\n\n\nfrom amlcenter.api.listing.model_access import _update_rating\nl = Listing.objects.all()\n[_update_rating('bigbrother', la) for la in l]\n\nprint(int(round(time.time() * 1000)) - start_time)\nprint(show_db_calls())  # Not working\nprint('')\n\n# 1434 Comment\n# 3492 with counts()  _update_rating new code  function results      from django.db.models.expressions import RawSQL\nl=Listing.objects.get(id=2);\nReview.objects.filter(listing=l).values('rate').annotate(review_parent_isnull=RawSQL(' review_parent_id  is %s ', (None,)), rate_count=Count('rate'))\n\n\nSQLITE3: QuerySet [{'rate_count': 1, 'rate': 1, 'review_parent_isnull': 0},\n    {'rate_count': 1, 'rate': 1, 'review_parent_isnull': 1},\n    {'rate_count': 1, 'rate': 3, 'review_parent_isnull': 1},\n    {'rate_count': 1, 'rate': 4, 'review_parent_isnull': 1},\n    {'rate_count': 1, 'rate': 5, 'review_parent_isnull': 1}] \n\nPostgresql QuerySet [{'rate': 3, 'rate_count': 1, 'review_parent_isnull': True},\n           {'rate': 4, 'rate_count': 1, 'review_parent_isnull': True},\n           {'rate': 1, 'rate_count': 1, 'review_parent_isnull': False},\n           {'rate': 5, 'rate_count': 1, 'review_parent_isnull': True},\n           {'rate': 1, 'rate_count': 1, 'review_parent_isnull': True}]   SELECT \"amlcenter_review\".\"rate\",\nCOUNT(\"amlcenter_review\".\"rate\") AS \"rate_count\",\n(\"review_parent_id\" is NULL ) AS \"review_parent_isnull\"\nFROM \"amlcenter_review\"\nWHERE \"amlcenter_review\".\"listing_id\" = 2\nGROUP BY \"amlcenter_review\".\"rate\", (\"review_parent_id\" is NULL )\n```",
            "title": "Improving put_counts_in_listings_endpoint database example"
        },
        {
            "location": "/developer/",
            "text": "For Developers\n\n\nUnderstanding this project requires knowing a moderate amount of Django and\na large amount of Django Rest Framework (DRF). From Django itself:\n\n\n\n\nObject-relational mapper (ORM)\n\n\nAuthentication\n\n\nmanage.py\n utility (testing, database migration)\n\n\nLogging\n\n\nSettings\n\n\n\n\nMost of the URLs and Views are done with DRF, and very little is done with\ntemplating, forms, and the admin site\n\n\nPlugins\n\n\nTODO Add documentation\n\n\n\n\nHow does it work\n\n\nHow do make a new plugin\n\n\n\n\nPep8\n\n\nPep8 is the Style Guide for Python Code\n\n\npep8 aml amlcenter plugins tests --ignore=E501,E123,E128,E121,E124,E711,E402 --exclude=amlcenter/scripts/* --show-source\nautopep8 . -r --diff --ignore errors=E501,E123,E128,E121,E124  --max-line-length=5000\n\n\n\n\nSerializers\n\n\nSerialization = Python obj -\n JSON\n\n\nDeserialization = JSON -\n Python obj\n\n\nDRF does not have a built-in, defacto way of specifying different serializers\nfor handling input on a request vs output on a Response. Sometimes this is\nacceptable, but often times the two structures are not the same. For instance,\nsome fields may be auto-generated on the server when a \nPOST\n is made (so they\nshouldn't be part of the \nPOST\n Request data that will be deserialized), but a\n\nGET\n request should return a Response that includes this information. For\nsimple cases like this, Serializer fields can be marked as \nread_only\n or\n\nwrite_only\n (\nread_only\n fields will not become part of the serializer's\n\nvalidated_data\n). If more control than this is needed (e.g. very different input\nand output formats), the \nget_serializer_class()\n method can be overridden\nin the View and selected dynamically based on request.method (\nPOST\n, \nGET\n,\netc).\n\n\nFor details regarding input vs output serializers:\n\n https://github.com/tomchristie/django-rest-framework/issues/1563\n\n http://stackoverflow.com/questions/17551380/python-rest-framwork-different-serializers-for-input-and-output-of-service\n\n\nSometimes it might not be clear where the Serializer classes should live for\nnested objects. For example, the listing resource needs to serialize the nested\nAgency model - should that Agency serializer live in the listing resource\npackage or in the agency package? Generally speaking, if the serializer is\nvery generic, it should live in its respective resource package. If instead\nit's highly customized (and thus unlikely to be used by other resources), it\nshould live with its nested resource.\n\n\nOne annoyance with nested serializers is that, if doing a create/POST, DRF\nassumes that each nested resource should also be created. This causes validation\nerrors to be raised when doing things like creating a new listing with an\nexisting category, listing type, etc. The way around that problem is to\nexplicitly remove all validation on any nested serializer fields that have\nunique constraints. For example, for a serializer with a \ntitle\n field:\n\n\nextra_kwargs = {\n    'title': {'validators': []}\n}\n\n\n\n\nBecause we don't want to remove the validator for the base resource (only when\nit's used in a nested fashion), some of the more complicated resources (namely\nListing) have lots of nested serializers that are identical to their non-nested\ncounterparts save for the removal of the unique field validators\n\n\nModel Access and Caching\n\n\nmodel_access.py\n files should be used to encapsulate more complex database\nqueries and business logic (as opposed to placing it in Views and Serializers).\nThese methods are easier to use in sample data generators, easier to test,\nand allows the complexity of Django Rest Framework to stay largely separate\nfrom the core application logic\n\n\nMemcache is not currently used, but this is also the layer to implement\nobject/query caching, such as:\n\n\ndata = cache.get('stuff')\nif data is None:\n    data = list(Stuff.objects.all())\n    cache.set('stuff', data)\nreturn data\n\n\n\n\nNote that we also need logic to invalidate specific caches when resources are\nmodified. For example, if a Listing is updated, all cached items referring/using\nthat listing's data should be invalidated. By far and large, this logic is not\nyet in place, so enabling the cache will likely lead to unexpected results.\nIn addition, the requirement to support 'tailored views' reduces the value\nof caching, since most queries must be filtered against a user's particular\naccess controls\n\n\nModels\n\n\nRegarding \n__str__()\n:\nIt\u2019s important to add \n__str__()\n methods to your models, not only for your own\nconvenience when dealing with the interactive prompt, but also because objects\u2019\nrepresentations are used throughout Django\u2019s automatically-generated admin.\nNote that on Python 2, \n__unicode__()\n should be defined instead.\n\n\nBy default, fields cannot be null or blank\n\n\nSome of the access control logic necessary to support tailored views lives\nin \nmodels.py\n as custom \nmodels.Manager\n classes (Reviews, Listings,\nListingActivities, and Images)\n\n\nViews\n\n\nWe generally prefer to\nuse class-based views and \nViewSet\ns (\nModelViewSet\ns in particular) just\nbecause it's less code (assuming you don't require a significant amount of\ncustomization)\n\n\nThe use of the convenience method \nget_object_or_404\n breaks the encapsulation\nof database queries in the \nmodel_access\n files (and prevents caching). That\nmight be something to look at later on.\n\n\nURLs\n\n\nAll resource endpoints are defined in the resource's respective \nurls.py\n in\n\namlcenter/api/\n. \namlcenter.urls\n collects all of these endpoints, where they\nare given the \napi/\n prefix in the global \nurls.py\n\n\nDRF uses a browsable API, meaning that you can go to\n\nlocalhost:8000/api/metadata/\n (for instance) in your browser. In general, the\nSwagger documentation is the recommended way to view and interact with the API.\n\n\nAll URLs are currently set to use a trailing \n/\n\n\nAuthentication and Authorization\n\n\nOverview\n\n\nAuthentication and authorization is based on the default \ndjango.contrib.auth\n\nsystem built into Django, with numerous customizations.\n\n\nThe default User model is extended by giving the \nProfile\n model a one-to-one\nrelationship with the \ndjango.contrib.auth.models.User\n model, as described\n\nhere\n\n\nThe default \nUser\n\nmodel has the following fields:\n\n\n\n\nusername\n\n\nfirst_name\n\n\nlast_name\n\n\nemail\n\n\npassword\n\n\ngroups (many-to-many relationship to Group)\n\n\nuser_permissions (many-to-many relationship to Permission)\n\n\nis_staff (Boolean. Designates whether this user can access the admin site)\n\n\nis_active (Boolean. Designates whether this user account should be considered\n    active)\n\n\nis_superuser (Boolean. Designates that this user has all permissions without\n    explicitly assigning them)\n\n\nlast_login (a datetime of the user's last login)\n\n\ndate_joined (a datetime designating when the account was created)\n\n\n\n\nOf these fields:\n\n\n\n\nfirst_name and last_name are not used\n\n\nis_superuser is always set to False\n\n\nis_staff is set to True for Org Stewards and Apps Mall Stewards\n\n\npassword is only used in development. On production, client SSL certs are\n    used, and so password is set to XXXXXXXX\n\n\n\n\nGroups\n are\nused to categorize users as Users, Org Stewards, Apps Mall Stewards, etc. These\ngroups are used to partially control access to various resources (for example,\nUsers cannot make modifications to the Categories). That said, the majority\nof 'access control' cannot be accomplished by creating generic permissions\nand groups. For example, an Org Steward should be able to approve a Listing only\nfor organizations to which they belong. Furthermore, any resources (Listings,\nImages) that have a specific access_control associated with them must be\nhidden from users (regardless of role/group) without the appropriate level\nof access.\n\n\nDjango Permissions are used to control access to the Admin site. By default,\nadd, change, and delete permissions are added to each model in the application.\nThe notion of separate permissions for these three operations don't make much\nsense for this application - for now, the default permissions will be left\nalone, but the Permissions infrastructure won't be used much beyond that. As\npreviously stated, it is not possible to create generic permissions that can\nbe statically assigned to users, like 'can_approve_listing', since the\nallowance of such an action depends on the object (model instance), not just the\nmodel type. Therefore, custom object-level permissions will typically be used\nto control access to specific resource instances (for both read and write\noperations). For list queries where multiple resources are returned, these\nobject-level permission checks are not used. Instead, filters and custom\nquerysets are used to ensure only the appropriate data is returned.\n\n\nAuthentication\n\n\nThe app currently supports two forms of authentication - HTTP Basic Auth and\nPKI (client SSL authentication). HTTP Basic Auth is used for development\npurposes only. PKI authentication is implemented in \namlcenter/auth/pkiauth.py\n.\nThe method of authentication to use is controlled by\n\nREST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES\n in settings.py\n\n\nTests\n\n\nGenerally speaking, each resource (listing, agency, profile, etc) may have\ntwo types of tests: business logic tests and API tests. The former typically\ntests code in \nmodel_access.py\n files, which is pure Python code and independent\nof Django or any \"web stuff\". The latter API tests, on the other hand, actually\nmake HTTP requests using special testing clients and factories, and are more\nlike end-to-end or integration tests\n\n\nDatabase\n\n\nSystem uses Postgres in Production and Sqlite3 in Development\n\n\nAPI Documentation\n\n\nThere are a number of different documentation resources available, depending\non what you're looking for.\n\n\nDRF's Web Browsable API can be accessed by entering an endpoint in the browser,\nfor example, \nrootUrl\n/api/profile/\n.  Limitations:\n * the API Root doesn't have a list of all endpoints, so you need to know\n what you're looking for\n * although these pages include forms that could potentially support POST\n requests, they don't work very well, making the browsable API mostly useless\n for non-GET requests\n\n\nSwagger docs are created via Django REST Swagger and served at\n \nrootUrl\n/docs/\n. Swagger makes it easy to see all of the endpoints available.\n Unlike the Browsable API docs, Swagger supports POST, PUT, and DELETE for most\n of the endpoints as well. Limitations:\n  * POST api/image/ doesn't work from Swagger\n  * some of the more complicated endpoints (like POST api/listing/) might not\n  have forms that show all of the required and/or optional data that must or\n  could be included in the request\n\n\nPostman was used extensively during the API's development, and perhaps someday\n a Postman Collection of requests will be added to this repo\n\n\nLogging\n\n\nCurrently, a single logger (\naml-center\n) is used throughout the application.\nSee \nsettings.py\n for details\n\n\nStatic and Media Files\n\n\nStatic files: JS, CSS, fonts, etc. Media files: images uploaded during app\nusage. Good explanation \nhere\n\n\nStatic files include html/css/js for:\n * Django admin site\n * DRF Browsable API\n * Swagger docs\n\n\nMedia files (uploaded images) have associated access controls that require\nenforcement on a per-user basis. For that reason, media files are not served\nstatically as they typically are, but instead served by the wsgi app itself\n\n\nScripts\n\n\nThe \nrunscript\n command is installed via the django-extensions package and used\nto run scripts in the django context, just as you would get by running a set\nof commands in the shell using \npython manage.py shell\n.   \n\nThis can be used to run the script to populate the database with sample data: \n\n\npython manage.py runscript sample_data_generator\n.   \n\nSee the \ndocs\n for\ndetails\n\n\nAPI Input\n\n\nAll POST, PUT, and PATCH endpoints should use JSON encoded input as per\n\nthis\n\n\nDjango Admin Site\n\n\nThe admin site is currently enabled in development (but will likely be\ndisabled in production). It is accessible by both Apps Mall Stewards and\nOrg Stewards. It has a number of limitations, including the inability to upload\nimages (since images aren't stored in the database), and the fact that many\noperations (like editing reviews, approving listings, etc) should result in\nadditional operations (like creating ListingActivity entries), but using\nthe Admin interface directly bypasses that logic",
            "title": "Developer"
        },
        {
            "location": "/developer/#for-developers",
            "text": "Understanding this project requires knowing a moderate amount of Django and\na large amount of Django Rest Framework (DRF). From Django itself:   Object-relational mapper (ORM)  Authentication  manage.py  utility (testing, database migration)  Logging  Settings   Most of the URLs and Views are done with DRF, and very little is done with\ntemplating, forms, and the admin site",
            "title": "For Developers"
        },
        {
            "location": "/developer/#plugins",
            "text": "TODO Add documentation   How does it work  How do make a new plugin",
            "title": "Plugins"
        },
        {
            "location": "/developer/#pep8",
            "text": "Pep8 is the Style Guide for Python Code  pep8 aml amlcenter plugins tests --ignore=E501,E123,E128,E121,E124,E711,E402 --exclude=amlcenter/scripts/* --show-source\nautopep8 . -r --diff --ignore errors=E501,E123,E128,E121,E124  --max-line-length=5000",
            "title": "Pep8"
        },
        {
            "location": "/developer/#serializers",
            "text": "Serialization = Python obj -  JSON  Deserialization = JSON -  Python obj  DRF does not have a built-in, defacto way of specifying different serializers\nfor handling input on a request vs output on a Response. Sometimes this is\nacceptable, but often times the two structures are not the same. For instance,\nsome fields may be auto-generated on the server when a  POST  is made (so they\nshouldn't be part of the  POST  Request data that will be deserialized), but a GET  request should return a Response that includes this information. For\nsimple cases like this, Serializer fields can be marked as  read_only  or write_only  ( read_only  fields will not become part of the serializer's validated_data ). If more control than this is needed (e.g. very different input\nand output formats), the  get_serializer_class()  method can be overridden\nin the View and selected dynamically based on request.method ( POST ,  GET ,\netc).  For details regarding input vs output serializers:  https://github.com/tomchristie/django-rest-framework/issues/1563  http://stackoverflow.com/questions/17551380/python-rest-framwork-different-serializers-for-input-and-output-of-service  Sometimes it might not be clear where the Serializer classes should live for\nnested objects. For example, the listing resource needs to serialize the nested\nAgency model - should that Agency serializer live in the listing resource\npackage or in the agency package? Generally speaking, if the serializer is\nvery generic, it should live in its respective resource package. If instead\nit's highly customized (and thus unlikely to be used by other resources), it\nshould live with its nested resource.  One annoyance with nested serializers is that, if doing a create/POST, DRF\nassumes that each nested resource should also be created. This causes validation\nerrors to be raised when doing things like creating a new listing with an\nexisting category, listing type, etc. The way around that problem is to\nexplicitly remove all validation on any nested serializer fields that have\nunique constraints. For example, for a serializer with a  title  field:  extra_kwargs = {\n    'title': {'validators': []}\n}  Because we don't want to remove the validator for the base resource (only when\nit's used in a nested fashion), some of the more complicated resources (namely\nListing) have lots of nested serializers that are identical to their non-nested\ncounterparts save for the removal of the unique field validators",
            "title": "Serializers"
        },
        {
            "location": "/developer/#model-access-and-caching",
            "text": "model_access.py  files should be used to encapsulate more complex database\nqueries and business logic (as opposed to placing it in Views and Serializers).\nThese methods are easier to use in sample data generators, easier to test,\nand allows the complexity of Django Rest Framework to stay largely separate\nfrom the core application logic  Memcache is not currently used, but this is also the layer to implement\nobject/query caching, such as:  data = cache.get('stuff')\nif data is None:\n    data = list(Stuff.objects.all())\n    cache.set('stuff', data)\nreturn data  Note that we also need logic to invalidate specific caches when resources are\nmodified. For example, if a Listing is updated, all cached items referring/using\nthat listing's data should be invalidated. By far and large, this logic is not\nyet in place, so enabling the cache will likely lead to unexpected results.\nIn addition, the requirement to support 'tailored views' reduces the value\nof caching, since most queries must be filtered against a user's particular\naccess controls",
            "title": "Model Access and Caching"
        },
        {
            "location": "/developer/#models",
            "text": "Regarding  __str__() :\nIt\u2019s important to add  __str__()  methods to your models, not only for your own\nconvenience when dealing with the interactive prompt, but also because objects\u2019\nrepresentations are used throughout Django\u2019s automatically-generated admin.\nNote that on Python 2,  __unicode__()  should be defined instead.  By default, fields cannot be null or blank  Some of the access control logic necessary to support tailored views lives\nin  models.py  as custom  models.Manager  classes (Reviews, Listings,\nListingActivities, and Images)",
            "title": "Models"
        },
        {
            "location": "/developer/#views",
            "text": "We generally prefer to\nuse class-based views and  ViewSet s ( ModelViewSet s in particular) just\nbecause it's less code (assuming you don't require a significant amount of\ncustomization)  The use of the convenience method  get_object_or_404  breaks the encapsulation\nof database queries in the  model_access  files (and prevents caching). That\nmight be something to look at later on.",
            "title": "Views"
        },
        {
            "location": "/developer/#urls",
            "text": "All resource endpoints are defined in the resource's respective  urls.py  in amlcenter/api/ .  amlcenter.urls  collects all of these endpoints, where they\nare given the  api/  prefix in the global  urls.py  DRF uses a browsable API, meaning that you can go to localhost:8000/api/metadata/  (for instance) in your browser. In general, the\nSwagger documentation is the recommended way to view and interact with the API.  All URLs are currently set to use a trailing  /",
            "title": "URLs"
        },
        {
            "location": "/developer/#authentication-and-authorization",
            "text": "",
            "title": "Authentication and Authorization"
        },
        {
            "location": "/developer/#overview",
            "text": "Authentication and authorization is based on the default  django.contrib.auth \nsystem built into Django, with numerous customizations.  The default User model is extended by giving the  Profile  model a one-to-one\nrelationship with the  django.contrib.auth.models.User  model, as described here  The default  User \nmodel has the following fields:   username  first_name  last_name  email  password  groups (many-to-many relationship to Group)  user_permissions (many-to-many relationship to Permission)  is_staff (Boolean. Designates whether this user can access the admin site)  is_active (Boolean. Designates whether this user account should be considered\n    active)  is_superuser (Boolean. Designates that this user has all permissions without\n    explicitly assigning them)  last_login (a datetime of the user's last login)  date_joined (a datetime designating when the account was created)   Of these fields:   first_name and last_name are not used  is_superuser is always set to False  is_staff is set to True for Org Stewards and Apps Mall Stewards  password is only used in development. On production, client SSL certs are\n    used, and so password is set to XXXXXXXX   Groups  are\nused to categorize users as Users, Org Stewards, Apps Mall Stewards, etc. These\ngroups are used to partially control access to various resources (for example,\nUsers cannot make modifications to the Categories). That said, the majority\nof 'access control' cannot be accomplished by creating generic permissions\nand groups. For example, an Org Steward should be able to approve a Listing only\nfor organizations to which they belong. Furthermore, any resources (Listings,\nImages) that have a specific access_control associated with them must be\nhidden from users (regardless of role/group) without the appropriate level\nof access.  Django Permissions are used to control access to the Admin site. By default,\nadd, change, and delete permissions are added to each model in the application.\nThe notion of separate permissions for these three operations don't make much\nsense for this application - for now, the default permissions will be left\nalone, but the Permissions infrastructure won't be used much beyond that. As\npreviously stated, it is not possible to create generic permissions that can\nbe statically assigned to users, like 'can_approve_listing', since the\nallowance of such an action depends on the object (model instance), not just the\nmodel type. Therefore, custom object-level permissions will typically be used\nto control access to specific resource instances (for both read and write\noperations). For list queries where multiple resources are returned, these\nobject-level permission checks are not used. Instead, filters and custom\nquerysets are used to ensure only the appropriate data is returned.",
            "title": "Overview"
        },
        {
            "location": "/developer/#authentication",
            "text": "The app currently supports two forms of authentication - HTTP Basic Auth and\nPKI (client SSL authentication). HTTP Basic Auth is used for development\npurposes only. PKI authentication is implemented in  amlcenter/auth/pkiauth.py .\nThe method of authentication to use is controlled by REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES  in settings.py",
            "title": "Authentication"
        },
        {
            "location": "/developer/#tests",
            "text": "Generally speaking, each resource (listing, agency, profile, etc) may have\ntwo types of tests: business logic tests and API tests. The former typically\ntests code in  model_access.py  files, which is pure Python code and independent\nof Django or any \"web stuff\". The latter API tests, on the other hand, actually\nmake HTTP requests using special testing clients and factories, and are more\nlike end-to-end or integration tests",
            "title": "Tests"
        },
        {
            "location": "/developer/#database",
            "text": "System uses Postgres in Production and Sqlite3 in Development",
            "title": "Database"
        },
        {
            "location": "/developer/#api-documentation",
            "text": "There are a number of different documentation resources available, depending\non what you're looking for.  DRF's Web Browsable API can be accessed by entering an endpoint in the browser,\nfor example,  rootUrl /api/profile/ .  Limitations:\n * the API Root doesn't have a list of all endpoints, so you need to know\n what you're looking for\n * although these pages include forms that could potentially support POST\n requests, they don't work very well, making the browsable API mostly useless\n for non-GET requests  Swagger docs are created via Django REST Swagger and served at\n  rootUrl /docs/ . Swagger makes it easy to see all of the endpoints available.\n Unlike the Browsable API docs, Swagger supports POST, PUT, and DELETE for most\n of the endpoints as well. Limitations:\n  * POST api/image/ doesn't work from Swagger\n  * some of the more complicated endpoints (like POST api/listing/) might not\n  have forms that show all of the required and/or optional data that must or\n  could be included in the request  Postman was used extensively during the API's development, and perhaps someday\n a Postman Collection of requests will be added to this repo",
            "title": "API Documentation"
        },
        {
            "location": "/developer/#logging",
            "text": "Currently, a single logger ( aml-center ) is used throughout the application.\nSee  settings.py  for details",
            "title": "Logging"
        },
        {
            "location": "/developer/#static-and-media-files",
            "text": "Static files: JS, CSS, fonts, etc. Media files: images uploaded during app\nusage. Good explanation  here  Static files include html/css/js for:\n * Django admin site\n * DRF Browsable API\n * Swagger docs  Media files (uploaded images) have associated access controls that require\nenforcement on a per-user basis. For that reason, media files are not served\nstatically as they typically are, but instead served by the wsgi app itself",
            "title": "Static and Media Files"
        },
        {
            "location": "/developer/#scripts",
            "text": "The  runscript  command is installed via the django-extensions package and used\nto run scripts in the django context, just as you would get by running a set\nof commands in the shell using  python manage.py shell .    \nThis can be used to run the script to populate the database with sample data:   python manage.py runscript sample_data_generator .    \nSee the  docs  for\ndetails",
            "title": "Scripts"
        },
        {
            "location": "/developer/#api-input",
            "text": "All POST, PUT, and PATCH endpoints should use JSON encoded input as per this",
            "title": "API Input"
        },
        {
            "location": "/developer/#django-admin-site",
            "text": "The admin site is currently enabled in development (but will likely be\ndisabled in production). It is accessible by both Apps Mall Stewards and\nOrg Stewards. It has a number of limitations, including the inability to upload\nimages (since images aren't stored in the database), and the fact that many\noperations (like editing reviews, approving listings, etc) should result in\nadditional operations (like creating ListingActivity entries), but using\nthe Admin interface directly bypasses that logic",
            "title": "Django Admin Site"
        },
        {
            "location": "/domain_knowledge/",
            "text": "The life of a submitted listing\n\n\nDescription on how listings get submitted.  \n\nAPI endpoint: \n/api/listing\n\n\n\n\nUser: A User submits a listing    \n\n\nState    \n\n\nUser: Submitted Listing    \n\n\nOrg Steward: Needs Action (Approve Listing or return listing to user)    \n\n\nAdmin: Pending    \n\n\n\n\n\n\n\n\n\n\nOrg Steward: An Org Steward will approve user's listing or return back to the user with a comment)    \n\n\nState: If Approved    \n\n\nUser: Pending    \n\n\nOrg Steward: Org Approved    \n\n\nAdmin: Needs Action    \n\n\n\n\n\n\nState: If Returned to the user    \n\n\nUser: Needs Action    \n\n\nOrg Steward: Returned    \n\n\nAdmin: Returned    \n\n\n\n\n\n\n\n\n\n\nAdmin: An admin will approve or reject listing for a org    \n\n\nState: If approved the listing will be published   \n\n\nUser: Done    \n\n\nOrg Steward: Org Approved    \n\n\nAdmin: Admin Approved (Listing Published)    \n\n\n\n\n\n\nState: If rejected    \n\n\nUser: Needs Action    \n\n\nOrg Steward: Returned   \n\n\nAdmin: Returned    \n\n\n\n\n\n\n\n\n\n\n\n\n                           Submitted\n +--------+                Listing     +---------------------+\n |  USER  +-------------------------\n  |  ORG STEWARD/ADMIN  |\n +---+----+                            +---+----+------------+\n     ^           Rejected Listing          |    |\n     +---------------------+---------------+    |\n                           ^                    |\n                           |          Approved  |\n                Approved   |          Listing   |\n+-----------+   Listing   ++-------+            |\n|Published  | \n-----------+  ADMIN | \n----------+\n+-----------+             +--------+",
            "title": "Domain knowledge"
        },
        {
            "location": "/domain_knowledge/#the-life-of-a-submitted-listing",
            "text": "Description on how listings get submitted.   \nAPI endpoint:  /api/listing   User: A User submits a listing      State      User: Submitted Listing      Org Steward: Needs Action (Approve Listing or return listing to user)      Admin: Pending          Org Steward: An Org Steward will approve user's listing or return back to the user with a comment)      State: If Approved      User: Pending      Org Steward: Org Approved      Admin: Needs Action        State: If Returned to the user      User: Needs Action      Org Steward: Returned      Admin: Returned          Admin: An admin will approve or reject listing for a org      State: If approved the listing will be published     User: Done      Org Steward: Org Approved      Admin: Admin Approved (Listing Published)        State: If rejected      User: Needs Action      Org Steward: Returned     Admin: Returned                                      Submitted\n +--------+                Listing     +---------------------+\n |  USER  +-------------------------   |  ORG STEWARD/ADMIN  |\n +---+----+                            +---+----+------------+\n     ^           Rejected Listing          |    |\n     +---------------------+---------------+    |\n                           ^                    |\n                           |          Approved  |\n                Approved   |          Listing   |\n+-----------+   Listing   ++-------+            |\n|Published  |  -----------+  ADMIN |  ----------+\n+-----------+             +--------+",
            "title": "The life of a submitted listing"
        },
        {
            "location": "/jenkins/",
            "text": "Jenkins\n\n\nJenkins is a Continuous Integration Software tool\n\n\nDownload and running Jenkins\n\n\nwget http://mirrors.jenkins.io/war-stable/latest/jenkins.war\njava -jar jenkins.war --httpPort=8082\n\n\n\n\n\n\nBrowse to http://localhost:8080\n\n\nFollow instructions to install\n\n\n\n\nMaster and Slave Jenkins\n\n\n(Jenkins Distributed Builds)[https://wiki.jenkins.io/display/JENKINS/Distributed+builds]\n(What-is-the-use-of-master-and-slave-in-Jenkins)[https://www.quora.com/What-is-the-use-of-master-and-slave-in-Jenkins]\n\n\n+----------------+\n| Github Push    |\n+-------+--------+\n        |\n        v\n   +---------+\n   | Jenkins |     +--------------+\n   | Master  |     | ci-release   |\n   |         |     | Deployment   |\n   +----+----+     |  Machine     |\n        |          |              |\n        |          +-+------------+\n        v            ^\n+----------+-------+ |\n| Jenkins          | |   +--------------+\n| Slave            | |   | ci-lastest   |\n| Label:           | |   | Deployment   |\n|  ci-jenkins.proj | |   |  Machine     |\n|                  | |   |              |\n+-------------+----+ |   +-----+--------+\n           |         |       ^\n           +---------+-------+\n\n\n\n\nThere are 4 boxes in the above CI Configuration.  \n\nNote:  Jenkins slave is not necessary    \n\n\nBoxes\n\n\n\n\nJenkins Master - Is the main Jenkins Instance\n\n\nDNS: jenkins.domain.com\n\n\n\n\n\n\nJenkins Slave - It is the machine used to run all the build to deploy it to deployment machines\n\n\nIt will build any jobs with the label \nproj\n\n\nWill be responsible of creating release archive(tar) file then use ssh publisher to deployment machine\n\n\nDNS: ci-jenkins.proj.domain.com\n\n\n\n\n\n\nci-latest - deployment of master branch\n\n\nWill be responsible of using release archive(tar) with ansible to install software locally (will have sub build per repo)\n\n\nDNS: ci-latest.proj.domain.com\n\n\n\n\n\n\nci-release - deployment of latest release tag\n\n\nDNS: ci-release.proj.domain.com\n\n\n\n\n\n\n\n\nJenkins Jobs\n\n\nThere will be 4 jobs per git repo (release and latest)\n\n\nGit Repos and Jobs names\n\n\n\n\naml-center\n\n\ncenter-latest-test\n\n\ncenter-latest-build\n\n\ncenter-release-test\n\n\ncenter-release-build\n\n\n\n\n\n\naml-backend\n\n\nbackend-latest-test\n\n\nbackend-latest-build\n\n\nbackend-release-test\n\n\nbackend-release-build\n\n\n\n\n\n\n\n\netc....\n\n\nSetting up aml folder on Jenkins CI\n\n\n\n\nCreate a new folder called \naml\n\n\n\n\nDefaults for all jobs\n\n\n\n\nUnder the General tab\n\n\nSelect \nDiscard Old Builds\n with \nLog Rotation\n Strategy\n\n\nMax # of builds to keep \n2\n\n\n\n\n\n\nSelect \nThrottle Concurrent Builds\n\n\nSet \nMaximum Total Concurrent Builds\n to \n1\n\n\nSet \nMaximum Concurrent Builds Per Node\n to \n1\n\n\nMulti-Project Throttle Category [x] aml-build , [ ] aml-deploy\n\n\n\n\n\n\nSelect \nRestrict where this project can be run\n\n\nLabel Expression: \nci-jenkins.proj.domain.com\n\n\n\n\n\n\nSelect \nGithub project\n,\n\n\nmake \nproject_url\n to \nhttps://github.com/aml-development/{RepositoryName}/\n\n\n\n\n\n\n\n\n\n\nUnder \nSource Code Management\n, Select Git\n\n\nRepository URL: \nhttps://github.com/aml-development/{RepositoryName}.git\n\n\nBranches to build: \n*/master\n , for release \n*/tags/release/*\n\n\n\n\n\n\nUnder \nBuild Triggers\n (Only for test jobs)\n\n\nSelect \nGitHub hook trigger for GITScm polling\n\n\n\n\n\n\nUnder \nBuild Environment\n\n\nSelect \nDelete workspace before build starts\n\n\nSelect \nAbort the build if it's stuck\n, Time-out strategy: \nAbsolute\n, Timeout minutes: \n15\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n\n\nFile to archive: \n???\n\n\n\n\n\n\nSend build artifacts over ssh\n\n\nSSH Server Name: \nci-latest.proj.domain.com\n\n\nExec command: \nsudo /home/jenkins/aml_deploy.sh ${JOB_NAME} ${BUILD_NUMBER}\n\n\n\n\n\n\nDelete workspace when build is done\n\n\n\n\n\n\n\n\nSetting up aml-center on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \nbuild-center-latest\n and \nbuild-center-release\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\n# use the develop branch of aml-react-commons\n# sed -i -e \ns/aml-react-commons#master/aml-react-commons#develop/g\n package.json\n# sed -i -e \ns/\\/icons/\\/icons#1fc7aee3a2812042c421baaab67abb2bd9606b0d/g\n package.json\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\necho \nnode version: \n\nnode -v\nnpm install\nnpm run build\nnpm run test\nnpm run tarDistDate\n\n\n\n\n\n\nUnder \nBuild\n\n\nConditional Step (single), run \nText Finder\n\n\nSelect \nAlso search the console output\n, Regular expression: \nCannot resolve module\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\necho \ndetected build error. Failing build\n\nexit 1\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \ncenter-*.tar.gz\n\n\n\n\n\n\n\n\nSetting up aml-hud on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \nbuild-hud-latest\n and \nbuild-hud-release\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\nnpm install\nnpm run install\nnpm run build\nnpm run tarDistVersion\n\n\n\n\n\n\nUnder \nBuild\n\n\nConditional Step (single), run \nText Finder\n\n\nSelect \nAlso search the console output\n, Regular expression: \nCannot resolve module\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\necho \ndetected build error. Failing build\n\nexit 1\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \nhud-*.tar.gz\n\n\n\n\n\n\n\n\nSetting up aml-webtop on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \nbuild-webtop-latest\n and \nbuild-webtop-release\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n# sed -i -e \ns/\\/icons/\\/icons#1fc7aee3a2812042c421baaab67abb2bd9606b0d/g\n bower.json\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\nnpm install\nnpm run bower\nnpm run build\nnpm run compile\nnpm run tarDevDate\nnpm run tarProdDate\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \nwebtop-*.tar.gz\n\n\n\n\n\n\n\n\nSetting up aml-demo on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \nbuild-demo-latest\n and \nbuild-demo-release\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 0.12.7\nnpm install\nbower install\nbower update\nnpm run tarDate\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \ndemo-apps-*.tar.gz\n\n\n\n\n\n\n\n\nSetting up aml-iwc on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \niwc-latest-build\n and \niwc-release-build\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 0.12.7\nnpm install\nnpm run bower\nnpm run build\nnpm run tarDate\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \niwc-*.tar.gz\n\n\n\n\n\n\n\n\nSetting up aml-react-commons on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \ndetect-aml-react-commons-latest\n and \ndetect-aml-react-commons-release\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n#!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\necho \nnode version: \n\nnode -v\nnpm install\nnpm run test\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nBuild other projects\n\n\nProjects to build: \nbuild-center-release,build-hud-release\n\n\nTrigger only if build is stable\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up aml-security on Jenkins CI\n\n\n\n\nCreate a new \nfreestyle project\n called \nAML-Security-Plugin\n\n\nUnder \nBuild\n\n\nMaven Version \nMaven 3.0.5\n\n\nRoot Pom \nRoot Pom\n\n\nGoals and options \npackage\n\n\n\n\n\n\n\n\nPost Steps: Run regardless of build results\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\n\n\nArchive the archive\n,  File to archive: \ntarget\\*.jar\n\n\n\n\n\n\n\n\nSetting up aml-backend on Jenkins CI\n\n\nBuild jobs\n\n\n\n\nCreate a new \nfreestyle project\n called \nbackend-latest-build\n and \nbackend-release-build\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\nsh jenkins/build.sh\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \nbackend*.tar.gz\n\n\nSend build artifacts over ssh\n\n\nSSH Server Name: \nci-latest.proj.domain.com\n\n\nExec command: \nsudo /home/jenkins/aml_deploy.sh ${JOB_NAME} ${BUILD_NUMBER} --es_enabled=True\n\n\n\n\n\n\n\n\n\n\n\n\nTest jobs\n\n\n\n\nCreate a new \nfreestyle project\n called \nbackend-latest-test\n and \nbackend-release-test\n\n\nUnder \nBuild\n\n\nExecute Shell\n\n\n\n\n\n\n\n\nsh jenkins/test.sh\n\n\n\n\n\n\nUnder \nPost-build Actions\n\n\nArchive the archive\n,  File to archive: \naml.log\n\n\nBuild Other Projects\n=\nbuild-backend-latest\n, Trigger only if build is stable\n\n\nPublish HTML Report\n\n\nHTML directory to archive\n: cover\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up \nbundle-front-end-master\n on jenkins ci\n\n\n\n\nProject Name \nbundle-front-end-master\n    \n\n\nDescription\n\n\n\n\nCreates a bundle with all the current Front End components:    \n* HUD\n* Center\n* IWC\n* WebTop\n\n\n\n\n\n\nSource Code Management: None\n\n\nBuild Triggers\n\n\nBuild after other projects are built:\n\n\nbuild-center-release,build-hud-release,build-iwc-release,build-webtop-release    \n\n\nTrigger only if build is stable\n\n\n\n\n\n\n\n\n\n\nBuild\n\n\nCopy Artifacts from another projects\n\n\nProject Name \nbuild-webtop-release\n\n\nWhich Build `Lastest Successful build (Stable build only)``\n\n\nArtifacts to copy \nwebtop*prod*.tar.gz\n\n\nTarget directory \n$WORKSPACE/staging\n\n\n[x] Fingerprint Artifacts\n\n\n\n\n\n\nCopy Artifacts from another projects\n\n\nProject Name \nbuild-center-release\n\n\nWhich Build `Lastest Successful build (Stable build only)``\n\n\nArtifacts to copy \ncenter*prod*.tar.gz\n\n\nTarget directory \n$WORKSPACE/staging\n\n\n[x] Fingerprint Artifacts\n\n\n\n\n\n\nCopy Artifacts from another projects\n\n\nProject Name \nbuild-hud-release\n\n\nWhich Build `Lastest Successful build (Stable build only)``\n\n\nArtifacts to copy \nhud*prod*.tar.gz\n\n\nTarget directory \n$WORKSPACE/staging\n\n\n[x] Fingerprint Artifacts\n\n\n\n\n\n\nCopy Artifacts from another projects\n\n\nProject Name \nbuild-iwc-release\n\n\nWhich Build `Lastest Successful build (Stable build only)``\n\n\nArtifacts to copy \niwc*prod*.tar.gz\n\n\nTarget directory \n$WORKSPACE/staging\n\n\n[x] Fingerprint Artifacts\n\n\n\n\n\n\nExecute Shell\n\n\n\n\n\n\n\n\n#!/bin/sh\nmkdir -p $WORKSPACE/target\ncd $WORKSPACE/staging \n tar -zcf $WORKSPACE/target/front-end-bundle-current.tar.gz *.tar.gz\n\n\n\n\n\n\nPost-build Actions\n\n\nArchive the Artifacts\n\n\nFiles to Archive \ntarget/*.tar.gz",
            "title": "Jenkins"
        },
        {
            "location": "/jenkins/#jenkins",
            "text": "Jenkins is a Continuous Integration Software tool",
            "title": "Jenkins"
        },
        {
            "location": "/jenkins/#download-and-running-jenkins",
            "text": "wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war\njava -jar jenkins.war --httpPort=8082   Browse to http://localhost:8080  Follow instructions to install",
            "title": "Download and running Jenkins"
        },
        {
            "location": "/jenkins/#master-and-slave-jenkins",
            "text": "(Jenkins Distributed Builds)[https://wiki.jenkins.io/display/JENKINS/Distributed+builds]\n(What-is-the-use-of-master-and-slave-in-Jenkins)[https://www.quora.com/What-is-the-use-of-master-and-slave-in-Jenkins]  +----------------+\n| Github Push    |\n+-------+--------+\n        |\n        v\n   +---------+\n   | Jenkins |     +--------------+\n   | Master  |     | ci-release   |\n   |         |     | Deployment   |\n   +----+----+     |  Machine     |\n        |          |              |\n        |          +-+------------+\n        v            ^\n+----------+-------+ |\n| Jenkins          | |   +--------------+\n| Slave            | |   | ci-lastest   |\n| Label:           | |   | Deployment   |\n|  ci-jenkins.proj | |   |  Machine     |\n|                  | |   |              |\n+-------------+----+ |   +-----+--------+\n           |         |       ^\n           +---------+-------+  There are 4 boxes in the above CI Configuration.   \nNote:  Jenkins slave is not necessary",
            "title": "Master and Slave Jenkins"
        },
        {
            "location": "/jenkins/#boxes",
            "text": "Jenkins Master - Is the main Jenkins Instance  DNS: jenkins.domain.com    Jenkins Slave - It is the machine used to run all the build to deploy it to deployment machines  It will build any jobs with the label  proj  Will be responsible of creating release archive(tar) file then use ssh publisher to deployment machine  DNS: ci-jenkins.proj.domain.com    ci-latest - deployment of master branch  Will be responsible of using release archive(tar) with ansible to install software locally (will have sub build per repo)  DNS: ci-latest.proj.domain.com    ci-release - deployment of latest release tag  DNS: ci-release.proj.domain.com",
            "title": "Boxes"
        },
        {
            "location": "/jenkins/#jenkins-jobs",
            "text": "There will be 4 jobs per git repo (release and latest)  Git Repos and Jobs names   aml-center  center-latest-test  center-latest-build  center-release-test  center-release-build    aml-backend  backend-latest-test  backend-latest-build  backend-release-test  backend-release-build     etc....",
            "title": "Jenkins Jobs"
        },
        {
            "location": "/jenkins/#setting-up-aml-folder-on-jenkins-ci",
            "text": "Create a new folder called  aml",
            "title": "Setting up aml folder on Jenkins CI"
        },
        {
            "location": "/jenkins/#defaults-for-all-jobs",
            "text": "Under the General tab  Select  Discard Old Builds  with  Log Rotation  Strategy  Max # of builds to keep  2    Select  Throttle Concurrent Builds  Set  Maximum Total Concurrent Builds  to  1  Set  Maximum Concurrent Builds Per Node  to  1  Multi-Project Throttle Category [x] aml-build , [ ] aml-deploy    Select  Restrict where this project can be run  Label Expression:  ci-jenkins.proj.domain.com    Select  Github project ,  make  project_url  to  https://github.com/aml-development/{RepositoryName}/      Under  Source Code Management , Select Git  Repository URL:  https://github.com/aml-development/{RepositoryName}.git  Branches to build:  */master  , for release  */tags/release/*    Under  Build Triggers  (Only for test jobs)  Select  GitHub hook trigger for GITScm polling    Under  Build Environment  Select  Delete workspace before build starts  Select  Abort the build if it's stuck , Time-out strategy:  Absolute , Timeout minutes:  15    Under  Post-build Actions  Archive the archive  File to archive:  ???    Send build artifacts over ssh  SSH Server Name:  ci-latest.proj.domain.com  Exec command:  sudo /home/jenkins/aml_deploy.sh ${JOB_NAME} ${BUILD_NUMBER}    Delete workspace when build is done",
            "title": "Defaults for all jobs"
        },
        {
            "location": "/jenkins/#setting-up-aml-center-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  build-center-latest  and  build-center-release  Under  Build  Execute Shell     #!/usr/bin/env bash\n# use the develop branch of aml-react-commons\n# sed -i -e  s/aml-react-commons#master/aml-react-commons#develop/g  package.json\n# sed -i -e  s/\\/icons/\\/icons#1fc7aee3a2812042c421baaab67abb2bd9606b0d/g  package.json\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\necho  node version:  \nnode -v\nnpm install\nnpm run build\nnpm run test\nnpm run tarDistDate   Under  Build  Conditional Step (single), run  Text Finder  Select  Also search the console output , Regular expression:  Cannot resolve module  Execute Shell       #!/usr/bin/env bash\necho  detected build error. Failing build \nexit 1   Under  Post-build Actions  Archive the archive ,  File to archive:  center-*.tar.gz",
            "title": "Setting up aml-center on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-hud-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  build-hud-latest  and  build-hud-release  Under  Build  Execute Shell     #!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\nnpm install\nnpm run install\nnpm run build\nnpm run tarDistVersion   Under  Build  Conditional Step (single), run  Text Finder  Select  Also search the console output , Regular expression:  Cannot resolve module  Execute Shell       #!/usr/bin/env bash\necho  detected build error. Failing build \nexit 1   Under  Post-build Actions  Archive the archive ,  File to archive:  hud-*.tar.gz",
            "title": "Setting up aml-hud on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-webtop-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  build-webtop-latest  and  build-webtop-release  Under  Build  Execute Shell     # sed -i -e  s/\\/icons/\\/icons#1fc7aee3a2812042c421baaab67abb2bd9606b0d/g  bower.json\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\nnpm install\nnpm run bower\nnpm run build\nnpm run compile\nnpm run tarDevDate\nnpm run tarProdDate   Under  Post-build Actions  Archive the archive ,  File to archive:  webtop-*.tar.gz",
            "title": "Setting up aml-webtop on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-demo-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  build-demo-latest  and  build-demo-release  Under  Build  Execute Shell     #!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 0.12.7\nnpm install\nbower install\nbower update\nnpm run tarDate   Under  Post-build Actions  Archive the archive ,  File to archive:  demo-apps-*.tar.gz",
            "title": "Setting up aml-demo on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-iwc-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  iwc-latest-build  and  iwc-release-build  Under  Build  Execute Shell     #!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 0.12.7\nnpm install\nnpm run bower\nnpm run build\nnpm run tarDate   Under  Post-build Actions  Archive the archive ,  File to archive:  iwc-*.tar.gz",
            "title": "Setting up aml-iwc on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-react-commons-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  detect-aml-react-commons-latest  and  detect-aml-react-commons-release  Under  Build  Execute Shell     #!/usr/bin/env bash\nsource /usr/local/node_versions/set_node_version.sh 5.3.0\necho  node version:  \nnode -v\nnpm install\nnpm run test   Under  Post-build Actions  Build other projects  Projects to build:  build-center-release,build-hud-release  Trigger only if build is stable",
            "title": "Setting up aml-react-commons on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-security-on-jenkins-ci",
            "text": "Create a new  freestyle project  called  AML-Security-Plugin  Under  Build  Maven Version  Maven 3.0.5  Root Pom  Root Pom  Goals and options  package     Post Steps: Run regardless of build results    Under  Post-build Actions   Archive the archive ,  File to archive:  target\\*.jar",
            "title": "Setting up aml-security on Jenkins CI"
        },
        {
            "location": "/jenkins/#setting-up-aml-backend-on-jenkins-ci",
            "text": "",
            "title": "Setting up aml-backend on Jenkins CI"
        },
        {
            "location": "/jenkins/#build-jobs",
            "text": "Create a new  freestyle project  called  backend-latest-build  and  backend-release-build  Under  Build  Execute Shell     sh jenkins/build.sh   Under  Post-build Actions  Archive the archive ,  File to archive:  backend*.tar.gz  Send build artifacts over ssh  SSH Server Name:  ci-latest.proj.domain.com  Exec command:  sudo /home/jenkins/aml_deploy.sh ${JOB_NAME} ${BUILD_NUMBER} --es_enabled=True",
            "title": "Build jobs"
        },
        {
            "location": "/jenkins/#test-jobs",
            "text": "Create a new  freestyle project  called  backend-latest-test  and  backend-release-test  Under  Build  Execute Shell     sh jenkins/test.sh   Under  Post-build Actions  Archive the archive ,  File to archive:  aml.log  Build Other Projects = build-backend-latest , Trigger only if build is stable  Publish HTML Report  HTML directory to archive : cover",
            "title": "Test jobs"
        },
        {
            "location": "/jenkins/#setting-up-bundle-front-end-master-on-jenkins-ci",
            "text": "Project Name  bundle-front-end-master       Description   Creates a bundle with all the current Front End components:    \n* HUD\n* Center\n* IWC\n* WebTop   Source Code Management: None  Build Triggers  Build after other projects are built:  build-center-release,build-hud-release,build-iwc-release,build-webtop-release      Trigger only if build is stable      Build  Copy Artifacts from another projects  Project Name  build-webtop-release  Which Build `Lastest Successful build (Stable build only)``  Artifacts to copy  webtop*prod*.tar.gz  Target directory  $WORKSPACE/staging  [x] Fingerprint Artifacts    Copy Artifacts from another projects  Project Name  build-center-release  Which Build `Lastest Successful build (Stable build only)``  Artifacts to copy  center*prod*.tar.gz  Target directory  $WORKSPACE/staging  [x] Fingerprint Artifacts    Copy Artifacts from another projects  Project Name  build-hud-release  Which Build `Lastest Successful build (Stable build only)``  Artifacts to copy  hud*prod*.tar.gz  Target directory  $WORKSPACE/staging  [x] Fingerprint Artifacts    Copy Artifacts from another projects  Project Name  build-iwc-release  Which Build `Lastest Successful build (Stable build only)``  Artifacts to copy  iwc*prod*.tar.gz  Target directory  $WORKSPACE/staging  [x] Fingerprint Artifacts    Execute Shell     #!/bin/sh\nmkdir -p $WORKSPACE/target\ncd $WORKSPACE/staging   tar -zcf $WORKSPACE/target/front-end-bundle-current.tar.gz *.tar.gz   Post-build Actions  Archive the Artifacts  Files to Archive  target/*.tar.gz",
            "title": "Setting up bundle-front-end-master on jenkins ci"
        },
        {
            "location": "/requirements/",
            "text": "Backend High-level requirements\n\n\n\n\nProvide REST Interface\n\n\nUnit Testing with Coverage Report\n\n\nRequest/Object Validation\n\n\nSwagger Like Docs\n\n\nAuthentication (PKI, Json Web Token)\n\n\nPlugins (Access Control 3rd Party, Authorization 3rd Party, anonymize_identifiable_data)\n\n\nDocumentation\n\n\nGood Logging, ouput to json\n\n\nMigration Scripts (to keep db consistent)\n\n\nFile Storage Central Library with support for local storage and S3\n\n\nRole-Based Permissions\n\n\nSupport for many types of notifications\n\n\nSupport for Elasticsearch 2.x (used in search)\n\n\nSupport for Emailing\n\n\nConsistent Errors\n\n\nProtect against well known vulnerabilities\n\n\nProduction Http Server (Gunicorn/nodemon)\n\n\nOffline Deployment\n\n\nRun Recommendation Algorithm\n\n\nAnsible Scripts\n\n\nWorks with Jenkins/TravisCI for builds/testing\n\n\n\n\nFuture Backend High-level requirements\n\n\n\n\nSupport for Task Manager/Message Queue (Celery)\n\n\nSupport Elasticsearch 6.x",
            "title": "Requirements"
        },
        {
            "location": "/features/elasticsearch_upgrade_2.x_6.x/",
            "text": "ElasticSearch Upgrade 2.4 to 6.3\n\n\nKnowledge Prerequisite\n\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/6.3/getting-started.html\nhttps://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping.htm\nhttps://www.elastic.co/guide/en/elasticsearch/reference/6.3/search-analyzer.html\n\n\n\n\nAffected areas of code\n\n\namlcenter/api/listing/elasticsearch_util.py\namlcenter/api/listing/model_access_es.py\namlcenter/recommend/recommend_es.py\n\n\n\n\nSteps\n\n\n\n\nUnderstand differences between 2.4 and 6.3\n\n\nFollow Getting Started Page on ElasticSearch website\n\n\nUpdate Python Elasticsearch dependency\n\n\nhttps://elasticsearch-py.readthedocs.io/en/master/\n\n\n\n\n\n\nUpdate \nAffected areas of code",
            "title": "Elasticsearch upgrade 2.x 6.x"
        },
        {
            "location": "/features/elasticsearch_upgrade_2.x_6.x/#elasticsearch-upgrade-24-to-63",
            "text": "",
            "title": "ElasticSearch Upgrade 2.4 to 6.3"
        },
        {
            "location": "/features/elasticsearch_upgrade_2.x_6.x/#knowledge-prerequisite",
            "text": "https://www.elastic.co/guide/en/elasticsearch/reference/6.3/getting-started.html\nhttps://www.elastic.co/guide/en/elasticsearch/reference/6.3/mapping.htm\nhttps://www.elastic.co/guide/en/elasticsearch/reference/6.3/search-analyzer.html",
            "title": "Knowledge Prerequisite"
        },
        {
            "location": "/features/elasticsearch_upgrade_2.x_6.x/#affected-areas-of-code",
            "text": "amlcenter/api/listing/elasticsearch_util.py\namlcenter/api/listing/model_access_es.py\namlcenter/recommend/recommend_es.py",
            "title": "Affected areas of code"
        },
        {
            "location": "/features/elasticsearch_upgrade_2.x_6.x/#steps",
            "text": "Understand differences between 2.4 and 6.3  Follow Getting Started Page on ElasticSearch website  Update Python Elasticsearch dependency  https://elasticsearch-py.readthedocs.io/en/master/    Update  Affected areas of code",
            "title": "Steps"
        },
        {
            "location": "/features/notification/",
            "text": "Purpose\n\n\nNotifications are system-provided messages that deploy to each relevant individual user. The intent is for Notifications to be available to be sent from the system, from any individual organization, or from an application.\n\n\nRequirements\n\n\nExisting Issues in github:  https://github.com/aml-development/aml-backend/issues?utf8=%E2%9C%93\nq=is%3Aissue%20notification\n\n\nNotification types\n\n\n\n\nUser Triggered  \n\n\nSystem-wide\n\n\nAgency-wide\n\n\nListing\n\n\nPeer-to-peer bookmark\n\n\nSystem Triggered\n\n\ndeletion management (Agency-wide Org Steward) \nProposed\n\n\ntags/categories subscription \nProposed\n  \n\n\n\n\nPermissions\n\n\nAPPS_MALL_STEWARD\n\n add_system_notification\n\n change_system_notification\n\n delete_system_notification\n\n add_agency_notification\n\n change_agency_notification\n\n delete_agency_notification\n\n add_listing_notification\n\n change_listing_notification\n\n delete_listing_notification\n\n add_peer_notification\n\n change_peer_notification\n\n delete_peer_notification\n\n add_peer_bookmark_notification\n\n change_peer_bookmark_notification\n* delete_peer_bookmark_notification\n\n\nORG_STEWARD\n\n add_system_notification\n\n change_system_notification\n\n delete_system_notification\n\n add_agency_notification\n\n change_agency_notification\n\n delete_agency_notification\n\n add_listing_notification\n\n change_listing_notification\n\n delete_listing_notification\n\n add_peer_notification\n\n change_peer_notification\n\n delete_peer_notification\n\n add_peer_bookmark_notification\n\n change_peer_bookmark_notification\n* delete_peer_bookmark_notification\n\n\nUSER\n\n add_listing_notification\n\n change_listing_notification\n\n delete_listing_notification\n\n add_peer_notification\n\n change_peer_notification\n\n delete_peer_notification\n\n add_peer_bookmark_notification\n\n change_peer_bookmark_notification\n* delete_peer_bookmark_notification\n\n\nRules:\n\n\n\n\nOnly APPS_MALL_STEWARD can create system-wide notifications\n\n\nPermissionDenied('Only app mall stewards can create system notifications')\n\n\nOnly ORG_STEWARD can create agency-wide notifications\n\n\nPermissionDenied('Only org stewards can create agency notifications')\n\n\nOnly Listing Owner can create Listing notifications\n\n\nPermissionDenied('Cannot create a notification for a listing you do not own')\n\n\n\n\nReceiving Notifications\n\n\n\n\nFor the system messages, every user should receive the notification.\n\n\nFor the organizations' messages (agency-wide), every user associated with the organization should receive the notification.\n\n\nFor the applications/listings, every user who has bookmarked the listing should receive the notification.\n\n\n\n\nSending Notifications\n\n\n\n\nOwners of listings will be able to send messages only from their listing. These messages will need to be approved by a Steward of the listing's associated organization and then by a Marketplace Steward.\n\n\nOrganization Stewards will be able to send messages from their organization or any listing associated with their organization.\n\n\nMarketplace Stewards will be able to send messages from the system, an organization, or any listing. These messages will not need to be approved by any other Steward.\n\n\n\n\nSystem-Wide Request\n\n\nPOST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n  \nexpires_date\n: \n2016-06-17T06:30:00.000Z\n,\n  \nmessage\n: \nTest\n\n}\n\n\n\n\nAgency-wide\n\n\nPOST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n  \nexpires_date\n: \n2016-06-17T06:30:00.000Z\n,\n  \nmessage\n: \nTest\n,\n  \nagency\n: {\n    \nid\n: 5\n }\n}\n\n\n\n\nListing-wide\n\n\nPOST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n  \nexpires_date\n: \n2016-06-17T06:30:00.000Z\n,\n  \nmessage\n: \nTest\n,\n  \nlisting\n: {\n    \nid\n: 5\n }\n}\n\n\n\n\nPeer to Peer Bookmark\n\n\nPOST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n  \nexpires_date\n: \n2016-06-17T06:30:00.000Z\n,\n  \nmessage\n: \nTest\n,\n  \npeer\n: {\n    \nuser\n: {\n      \nusername\n: \nbigbrother\n\n    },\n    \nfolder_name\n: \nfolder1\n\n  }\n}\n\n\n\n\nAuthorization\n\n\n\n\nAny User can view a System-wide notification from the system.\n\n\nOnly user authorized should be able to delete the notifications.\n\n\n\n\nRelated Issues:\n\nhttps://github.com/aml-development/aml-backend/issues/122\n\n\nProtocol\n\n\n\n\nShall be possible to have notifications in JSON Formats and over HTTP/HTTPS transports\n\n\n\n\nSorting Notification\n\n\nUsage:\n\nDefault response is Descending    \n\n\nGET /api/self/notification/?ordering=-created_date   # Descending\nor\nGET /api/self/notification/?ordering=created_date  # Ascending\n\n\n\n\nhttps://github.com/aml-development/aml-backend/issues/160\n\n\n2017 Redesign\n\n\nGoal\n\n\nPropose redesign of back-end architecture to inbox style (beneficial to use a task manager like celery)   \n\n\nBacklog\n\n\n\"As developer, propose redesign of back-end architecture to create a solution that provides capabilities to manage current, proposed and future notification requirements.\"    \n\n\nEmail\n  \n\nThe notification system shall integrate with email system\n\n\nProposed Solution\n\n\n\n\nMailbox style, Every user will have an inbox.   \n\n\nWhen a system wide notification occurs, it will make a list of all users in the system and put a message in the 'inbox'  of each user\n\n\nWhen a listing notification occurs, it will make a list of all users that has a listing bookmark and put a message in the 'inbox'  of each user\n\n\nWhen an agency-wide notification occurs, it will make a list of all user in that agency and put a message in the 'inbox' of each user\n\n\nWhen a peer-to-peer bookmark notification occurs\n\n\nhttps://github.com/aml-development/aml-backend/issues/129\n\n\nPub/Sub Events system for system actions events (Category Notification)\n\n\n\n\nResearch\n\n\n\n\nhttps://github.com/mcomp2010-forks/Stream-Framework    \n\n\nhttp://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html\n\n\nhttp://www.slideshare.net/rabbitmq/why-databases-suck-for-messaging\n\n\n\n\nSteps\n\n\n\n\nCreate new Model for redesigned Notification\n\n\nIterate thorough all the current Notifications and put in new Notification Model\n\n\nRefactor All the Notification methods to use new Notification Model\n\n\n\n\nUser-Stories\n\n\nreq-173\n\n\nDate Created:\n Dec 06, 2016  \n\n\nDescription\n  \n\nAs an admin I want notification if an owner has cancelled an app that was pending deletion   \n\n\nMessage Text:\n  {owner.username} cancelled {app.name} that was pending deletion\n\n\nreq-170\n\n\nDate Created:\n Dec 06, 2016  \n\n\nDescription\n  \n\nAs an Owner I want to receive notice of whether my deletion request has been approved or rejected  \n\n\nMessage Text:\n  {app.name} pending deletion was {approved||rejected}\n\n\nreq-376\n\n\nDate Created:\n March 16, 2017  \n\n\nDescription\n  \n\nAs a CS, I want to receive notification of Listings submitted for my organization\n\n\nMessage Text:\n  {owner.username} submitted a application listing for submission - {listing.title}\n\n\nreq-377\n\n\nDate Created:\n March 16, 2017  \n\n\nDescription\n  \n\nAs an owner and CS, I want to receive notification of user rating and reviews\n\n\nMessage Text:\n  {listing.title} had a review\n\n\nPseudocode Steps\n  \n\n\n When model_access.create_listing_review executes publish 'listing_reviewed' event with [listing, rate]. \n\n\n The observer of 'review_listing' event will create a Listing Notification targeted to Listings Owners and Listings Agency Org Stewards\n\n\nreq-379\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a user, I want to receive notification when Listings I've bookmarked are changed to private\n\n\nMessage Text:\n  {listing.title} was changed to be private\n\n\nPseudocode Steps\n  \n\n\n When ListingSerializer.update function execute and if listing.is_private changes publish 'listing_is_private_changed' event with [listing, is_private].\n\n The observer of 'listing_is_private_changed' event will create a Listing Notification targeted to users that bookmarked listing\n\n\nreq-383\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a owner, I want to be able to notify users when my Listing is changed from public to private and vice-versa\n\n\nMessage Text:\n  {listing.title} was changed to be {private||public}\n\n\nRelated to\n  req-379\n\n\nreq-378\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a user, I want to receive notification about changes on Listings I've bookmarked\n\n\nQuestion:\n  \n\nWhat does changes mean\n\n\nreq-380\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a user, I want to receive notification when a Listing is added to a subscribed category or tag  \n\n\nreq-381\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a user, I want to receive notification when someone shares a folder with me\n\n\nreq-382\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a user, owner or CS, I want the ability to configure notification settings/preferences\n\n\nreq-384\n\n\nDate Created:\n March 17, 2017  \n\n\nDescription\n  \n\nAs a owner, I want myself and CS to be notified when one of the Listing owner\u2019s certificate expires\n\n\nSoftware Code\n\n\nCurrent Endpoints/Views:\n\n\n\n\n/api/self/notification/\n\n\nUserNotificationViewSet\n\n\n/api/notifications/\n\n\nNotificationViewSet\n\n\n/api/notifications/pending/\n\n\nPendingNotificationView\n\n\n/api/notifications/expired/\n\n\nExpiredNotificationView\n\n\n\n\nMethods\n\n\n\n\nGet all notifications\n\n\nGet all pending notifications\n\n\nGet all expired notifications\n\n\nCreate a Notification\n\n\nDelete/Dismiss a notifications\n\n\nGet notifications for a user\n\n\nSort by date\n\n\nUpdate notifications Expired Date\n\n\nEmail Batch\n\n\nWhen email_batch command occurs, it will go to every users' 'mailbox' to check if email_status on the notification is false, do the count, make value true, and email user the new notification count and telling them to login.\n\n\n\n\nModel\n\n\nCurrent Model\n\n\nclass Notification(models.Model):\n    \n\n    Setter for peer variable\n    {\n        'user': {\n        'username': str\n        },\n        '_bookmark_listing_ids': list[int],\n        'folder_name': str\n    }\n    \n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    message = models.CharField(max_length=4096)\n    expires_date = models.DateTimeField()\n    author = models.ForeignKey(Profile, related_name='authored_notifications')\n    dismissed_by = models.ManyToManyField(\n        'Profile',\n        related_name='dismissed_notifications',\n        db_table='notification_profile'\n    )\n    listing = models.ForeignKey(Listing, related_name='notifications',\n                                null=True, blank=True)\n    agency = models.ForeignKey(Agency, related_name='agency_notifications',\n                               null=True, blank=True)\n    _peer = models.CharField(max_length=4096, null=True, blank=True, db_column='peer')\n\n    def notification_type(self):\n        \n\n        Dynamically figure out Notification Type\n\n        Types:\n            SYSTEM - System-wide Notifications\n            AGENCY - Agency-wide Notifications\n            AGENCY.BOOKMARK - Agency-wide Bookmark Notifications # Not requirement (erivera 20160621)\n            LISTING - Listing Notifications\n            PEER - Peer to Peer Notifications\n            PEER.BOOKMARK - Peer to Peer Bookmark Notifications\n        \n\n\n\n\n\nRedesign Model\n\n\n\nclass NotificationV2(models.Model):\n    # Mailbox Profile ID\n    profile_target_id = models.ForeignKey(Profile, related_name='mailbox_notifications')\n\n    # It is a unique id for notifications that allow to correlate between different 'mailboxes'\n    # Example) For deleting system-wide notifications,\n    #    for every 'mailbox' delete the notification with notification_id\n    notification_id = models.UUIDField(default=uuid.uuid4, editable=False, db_index=True)\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    expires_date = models.DateTimeField()\n\n    # Author of Notification\n    author = models.ForeignKey(Profile, related_name='authored_notificationsv2')\n    message = models.CharField(max_length=4096)\n\n    # Notification Type\n    SYSTEM = 'system'  # System-wide Notifications\n    AGENCY = 'agency'  #   Agency-wide Notifications\n    AGENCY_BOOKMARK = 'agency_bookmark'  #  Agency-wide Bookmark Notifications # Not requirement (erivera 20160621)\n    LISTING = 'listing'  # Listing Notifications\n    PEER = 'peer'  # Peer to Peer Notifications\n    PEER_BOOKMARK = 'peer_bookmark'  # PEER.BOOKMARK - Peer to Peer Bookmark Notifications\n\n    NOTIFICATION_TYPE_CHOICES = (\n        (SYSTEM, 'system'),\n        (AGENCY, 'agency'),\n        (AGENCY_BOOKMARK, 'agency_bookmark'),\n        (LISTING, 'listing'),\n        (PEER, 'peer'),\n        (PEER_BOOKMARK, 'peer_bookmark'),\n    )\n\n    notification_type = models.CharField(max_length=24, choices=NOTIFICATION_TYPE_CHOICES, db_index=True)\n\n    # Depending on notification_type, it could be listing_id/agency_id/profile_user_id/category_id/tag_id\n    entity_id  = models.IntegerField(default=0, null=True, blank=True)\n\n    # If it has been emailed. then make value true\n    email_status = models.BooleanField(default=False)\n\n    # Field use to store extra data.\n    # For PEER.BOOKMARK Notifications this field will be use to store FolderName and Listing Ids\n    _metadata = models.CharField(max_length=4096, null=True, blank=True, db_column='metadata')\n\n    # User Target\n    ALL = 'all'  # All users\n    STEWARDS = 'stewards'\n    APP_STEWARD = 'app_steward'\n    ORG_STEWARD = 'org_steward'\n    USER = 'user'\n\n    TARGET_USER_CHOICES = (\n        (ALL, 'all'),\n        (STEWARDS, 'stewards'),\n        (APP_STEWARD, 'app_steward'),\n        (ORG_STEWARD, 'org_steward'),\n        (USER, 'user'),\n    )\n    user_target = models.CharField(max_length=24, choices=TARGET_USER_CHOICES) # db_index=True)\n\n    @property\n    def metadata(self):\n        if self._metadata:\n            return json.loads(self._metadata)\n        else:\n            return None\n\n    @metadata.setter\n    def metadata(self, value):\n        \n\n        Setter for metadata variable\n        {\n            '_bookmark_listing_ids': list[int],\n            'folder_name': str\n        }\n\n        Args:\n            value (dict): dictionary\n        \n\n        if value:\n            assert isinstance(value, dict), 'Argument of wrong type is not a dict'\n            self._metadata = json.dumps(value)\n        else:\n            return None\n\n    def __repr__(self):\n        return '{0!s}: {1!s}'.format(self.author.user.username, self.message)\n\n    def __str__(self):\n        return '{0!s}: {1!s}'.format(self.author.user.username, self.message)\n\n\n\n\nCQL (cassandra)\n\n\nDROP KEYSPACE IF EXISTS notification;\n\nCREATE KEYSPACE IF NOT EXISTS notification\n    WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\n\n// Schema\nCREATE TABLE notification.messages (\n    // Mailbox Profile ID\n    profile_target_id int,\n\n    // It is a unique id for notifications that allow to correlate between different 'mailboxes'\n    notification_id  uuid,\n\n    // Author Profile username\n    author_username text,\n\n    // Type: SYSTEM, AGENCY, AGENCY_BOOKMARK, LISTING, PEER, PEER_BOOKMARK\n    notification_type text,\n\n    // Create Date\n    created_date  timestamp,\n\n    // Expires Date\n    expires_date timestamp,\n\n    // Message of Notification\n    message text,\n\n    // If it has been emailed. then make value true\n    email_status boolean,\n\n    // Field use to store extra data.\n    metadata map\ntext, text\n,\n\n    // Group Target, Used for debugging\n    // All, Stewards, App Stewards, Org Stewards, User\n    role_target text,\n\n    primary key (profile_target_id , expires_date, created_date)\n)\nWITH CLUSTERING ORDER BY (expires_date DESC, created_date DESC);\n\n\n// Inserts\n// System-Wide Notification\nINSERT INTO notification.messages(\n        profile_target_id,\n        notification_id,\n        email_status,\n        created_date,\n        expires_date,\n        role_target,\n        message,\n        notification_type,\n        author_username,\n        metadata\n        )\nVALUES (2,\n        now(),\n        False,\n        toTimestamp(now()),\n        toTimestamp(now()),\n        'all',\n        'Sample Message',\n        'system',\n        'bigbrother',\n        {'test':'test'}\n);\n\n\n// Get all Notifications for user 2\nSELECT * FROM notification.messages WHERE profile_target_id = 2;\n\nSELECT count(*) FROM notification.messages WHERE profile_target_id = 2;\n\n\n\n\n\n\nModel Access Signatures:\n\n\nGet All Notifications\n\n\ndef get_all_notifications():\n    \n\n    Get all notifications (expired and un-expired notifications)\n    \n\n\n\n\n\nCreate Notification\n\n\ndef create_notification(author_username, expires_date, message, listing=None, agency=None, peer=None):\n    \n\n    Args:\n        author_username (str): Username of author\n        expires_date (datetime.datetime): Expires Date (datetime.datetime(2016, 6, 24, 1, 0, tzinfo=\nUTC\n))\n        message (str): Message of notification\n        listing (models.Listing)-Optional: Listing\n        Agency (models.Agency)-Optional: Agency\n    \n\n\n\n\n\nDismiss Notification\n\n\ndef dismiss_notification(notification_instance, username):\n    \n\n    Args:\n        notification_instance (models.Notification): notification_instance\n        username (string)\n    \n\n\n\n\n\nUpdate Notification\n\n\ndef update_notification(author_username, notification_instance, expires_date):\n    \n\n    Args:\n        notification_instance (models.Notification): notification_instance\n        author_username (str): Username of author\n    \n\n    notification_instance.expires_date = expires_date\n\n\n\n\nget_all_pending_notifications\n\n\ndef get_all_pending_notifications(for_user=False):\n    \n\n    Gets all system-wide pending notifications\n    \n\n\n\n\n\nget_all_expired_notifications\n\n\ndef get_all_expired_notifications():\n    \n\n    Get all expired notifications\n    \n\n\n\n\n\ndef get_notification_by_id(username, id, reraise=False):\n    \n\n    Get Notification by id\n    \n\n\n\n\n\ndef get_self_notifications(username):\n    \n\n    Get notifications for current user\n\n    User's Notifications are\n        * Notifications that have not yet expired (A)\n        * Notifications have not been dismissed by this user (B)\n        * Notifications that are regarding a listing in this user's library\n          if the notification is listing-specific\n        * Notification that are System-wide are included\n\n    Args:\n        username (str): current username to get notifications\n    \n\n    notifications = (unexpired_system_notifications | unexpired_agency_notifications | unexpired_peer_notifications |\n                     unexpired_listing_notifications).exclude(pk__in=dismissed_notifications)\n\n\n\n\nQuestions (past)\n\n\n\n\nWill messages from organizations have to be approved by the Marketplace Steward?\n\n\nCan Org. Stewards cancel their notifications without approval from the Marketplace Steward?\n\n\n\n\n\n\nWill messages created by Org Stewards or MP Stewards for/from listings need to be approved in the typical fashion? (By Org Stewards and then by MP Stewards)\n\n\nWhat level of information about all the current notifications should Org Stewards have?\n\n\nShould the get to see all the other orgs' notifications but not interact?\n\n\nShould they only get to see notifications from their own org(s) and the listings associated with their org?\n\n\nShould they get to see aml Platform notifications?\n\n\n\n\n\n\nCan an owner cancel an approved notification?",
            "title": "Notification"
        },
        {
            "location": "/features/notification/#purpose",
            "text": "Notifications are system-provided messages that deploy to each relevant individual user. The intent is for Notifications to be available to be sent from the system, from any individual organization, or from an application.",
            "title": "Purpose"
        },
        {
            "location": "/features/notification/#requirements",
            "text": "Existing Issues in github:  https://github.com/aml-development/aml-backend/issues?utf8=%E2%9C%93 q=is%3Aissue%20notification",
            "title": "Requirements"
        },
        {
            "location": "/features/notification/#notification-types",
            "text": "User Triggered    System-wide  Agency-wide  Listing  Peer-to-peer bookmark  System Triggered  deletion management (Agency-wide Org Steward)  Proposed  tags/categories subscription  Proposed",
            "title": "Notification types"
        },
        {
            "location": "/features/notification/#permissions",
            "text": "APPS_MALL_STEWARD  add_system_notification  change_system_notification  delete_system_notification  add_agency_notification  change_agency_notification  delete_agency_notification  add_listing_notification  change_listing_notification  delete_listing_notification  add_peer_notification  change_peer_notification  delete_peer_notification  add_peer_bookmark_notification  change_peer_bookmark_notification\n* delete_peer_bookmark_notification  ORG_STEWARD  add_system_notification  change_system_notification  delete_system_notification  add_agency_notification  change_agency_notification  delete_agency_notification  add_listing_notification  change_listing_notification  delete_listing_notification  add_peer_notification  change_peer_notification  delete_peer_notification  add_peer_bookmark_notification  change_peer_bookmark_notification\n* delete_peer_bookmark_notification  USER  add_listing_notification  change_listing_notification  delete_listing_notification  add_peer_notification  change_peer_notification  delete_peer_notification  add_peer_bookmark_notification  change_peer_bookmark_notification\n* delete_peer_bookmark_notification",
            "title": "Permissions"
        },
        {
            "location": "/features/notification/#rules",
            "text": "Only APPS_MALL_STEWARD can create system-wide notifications  PermissionDenied('Only app mall stewards can create system notifications')  Only ORG_STEWARD can create agency-wide notifications  PermissionDenied('Only org stewards can create agency notifications')  Only Listing Owner can create Listing notifications  PermissionDenied('Cannot create a notification for a listing you do not own')",
            "title": "Rules:"
        },
        {
            "location": "/features/notification/#receiving-notifications",
            "text": "For the system messages, every user should receive the notification.  For the organizations' messages (agency-wide), every user associated with the organization should receive the notification.  For the applications/listings, every user who has bookmarked the listing should receive the notification.",
            "title": "Receiving Notifications"
        },
        {
            "location": "/features/notification/#sending-notifications",
            "text": "Owners of listings will be able to send messages only from their listing. These messages will need to be approved by a Steward of the listing's associated organization and then by a Marketplace Steward.  Organization Stewards will be able to send messages from their organization or any listing associated with their organization.  Marketplace Stewards will be able to send messages from the system, an organization, or any listing. These messages will not need to be approved by any other Steward.",
            "title": "Sending Notifications"
        },
        {
            "location": "/features/notification/#system-wide-request",
            "text": "POST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n   expires_date :  2016-06-17T06:30:00.000Z ,\n   message :  Test \n}",
            "title": "System-Wide Request"
        },
        {
            "location": "/features/notification/#agency-wide",
            "text": "POST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n   expires_date :  2016-06-17T06:30:00.000Z ,\n   message :  Test ,\n   agency : {\n     id : 5\n }\n}",
            "title": "Agency-wide"
        },
        {
            "location": "/features/notification/#listing-wide",
            "text": "POST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n   expires_date :  2016-06-17T06:30:00.000Z ,\n   message :  Test ,\n   listing : {\n     id : 5\n }\n}",
            "title": "Listing-wide"
        },
        {
            "location": "/features/notification/#peer-to-peer-bookmark",
            "text": "POST /api/notification/ HTTP/1.1\nRequest Payload:\n{\n   expires_date :  2016-06-17T06:30:00.000Z ,\n   message :  Test ,\n   peer : {\n     user : {\n       username :  bigbrother \n    },\n     folder_name :  folder1 \n  }\n}",
            "title": "Peer to Peer Bookmark"
        },
        {
            "location": "/features/notification/#authorization",
            "text": "Any User can view a System-wide notification from the system.  Only user authorized should be able to delete the notifications.   Related Issues: \nhttps://github.com/aml-development/aml-backend/issues/122",
            "title": "Authorization"
        },
        {
            "location": "/features/notification/#protocol",
            "text": "Shall be possible to have notifications in JSON Formats and over HTTP/HTTPS transports",
            "title": "Protocol"
        },
        {
            "location": "/features/notification/#sorting-notification",
            "text": "Usage: \nDefault response is Descending      GET /api/self/notification/?ordering=-created_date   # Descending\nor\nGET /api/self/notification/?ordering=created_date  # Ascending  https://github.com/aml-development/aml-backend/issues/160",
            "title": "Sorting Notification"
        },
        {
            "location": "/features/notification/#2017-redesign",
            "text": "",
            "title": "2017 Redesign"
        },
        {
            "location": "/features/notification/#goal",
            "text": "Propose redesign of back-end architecture to inbox style (beneficial to use a task manager like celery)",
            "title": "Goal"
        },
        {
            "location": "/features/notification/#backlog",
            "text": "\"As developer, propose redesign of back-end architecture to create a solution that provides capabilities to manage current, proposed and future notification requirements.\"      Email    \nThe notification system shall integrate with email system",
            "title": "Backlog"
        },
        {
            "location": "/features/notification/#proposed-solution",
            "text": "Mailbox style, Every user will have an inbox.     When a system wide notification occurs, it will make a list of all users in the system and put a message in the 'inbox'  of each user  When a listing notification occurs, it will make a list of all users that has a listing bookmark and put a message in the 'inbox'  of each user  When an agency-wide notification occurs, it will make a list of all user in that agency and put a message in the 'inbox' of each user  When a peer-to-peer bookmark notification occurs  https://github.com/aml-development/aml-backend/issues/129  Pub/Sub Events system for system actions events (Category Notification)",
            "title": "Proposed Solution"
        },
        {
            "location": "/features/notification/#research",
            "text": "https://github.com/mcomp2010-forks/Stream-Framework      http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html  http://www.slideshare.net/rabbitmq/why-databases-suck-for-messaging",
            "title": "Research"
        },
        {
            "location": "/features/notification/#steps",
            "text": "Create new Model for redesigned Notification  Iterate thorough all the current Notifications and put in new Notification Model  Refactor All the Notification methods to use new Notification Model",
            "title": "Steps"
        },
        {
            "location": "/features/notification/#user-stories",
            "text": "",
            "title": "User-Stories"
        },
        {
            "location": "/features/notification/#req-173",
            "text": "Date Created:  Dec 06, 2016    Description    \nAs an admin I want notification if an owner has cancelled an app that was pending deletion     Message Text:   {owner.username} cancelled {app.name} that was pending deletion",
            "title": "req-173"
        },
        {
            "location": "/features/notification/#req-170",
            "text": "Date Created:  Dec 06, 2016    Description    \nAs an Owner I want to receive notice of whether my deletion request has been approved or rejected    Message Text:   {app.name} pending deletion was {approved||rejected}",
            "title": "req-170"
        },
        {
            "location": "/features/notification/#req-376",
            "text": "Date Created:  March 16, 2017    Description    \nAs a CS, I want to receive notification of Listings submitted for my organization  Message Text:   {owner.username} submitted a application listing for submission - {listing.title}",
            "title": "req-376"
        },
        {
            "location": "/features/notification/#req-377",
            "text": "Date Created:  March 16, 2017    Description    \nAs an owner and CS, I want to receive notification of user rating and reviews  Message Text:   {listing.title} had a review  Pseudocode Steps      When model_access.create_listing_review executes publish 'listing_reviewed' event with [listing, rate].    The observer of 'review_listing' event will create a Listing Notification targeted to Listings Owners and Listings Agency Org Stewards",
            "title": "req-377"
        },
        {
            "location": "/features/notification/#req-379",
            "text": "Date Created:  March 17, 2017    Description    \nAs a user, I want to receive notification when Listings I've bookmarked are changed to private  Message Text:   {listing.title} was changed to be private  Pseudocode Steps      When ListingSerializer.update function execute and if listing.is_private changes publish 'listing_is_private_changed' event with [listing, is_private].  The observer of 'listing_is_private_changed' event will create a Listing Notification targeted to users that bookmarked listing",
            "title": "req-379"
        },
        {
            "location": "/features/notification/#req-383",
            "text": "Date Created:  March 17, 2017    Description    \nAs a owner, I want to be able to notify users when my Listing is changed from public to private and vice-versa  Message Text:   {listing.title} was changed to be {private||public}  Related to   req-379",
            "title": "req-383"
        },
        {
            "location": "/features/notification/#req-378",
            "text": "Date Created:  March 17, 2017    Description    \nAs a user, I want to receive notification about changes on Listings I've bookmarked  Question:    \nWhat does changes mean",
            "title": "req-378"
        },
        {
            "location": "/features/notification/#req-380",
            "text": "Date Created:  March 17, 2017    Description    \nAs a user, I want to receive notification when a Listing is added to a subscribed category or tag",
            "title": "req-380"
        },
        {
            "location": "/features/notification/#req-381",
            "text": "Date Created:  March 17, 2017    Description    \nAs a user, I want to receive notification when someone shares a folder with me",
            "title": "req-381"
        },
        {
            "location": "/features/notification/#req-382",
            "text": "Date Created:  March 17, 2017    Description    \nAs a user, owner or CS, I want the ability to configure notification settings/preferences",
            "title": "req-382"
        },
        {
            "location": "/features/notification/#req-384",
            "text": "Date Created:  March 17, 2017    Description    \nAs a owner, I want myself and CS to be notified when one of the Listing owner\u2019s certificate expires",
            "title": "req-384"
        },
        {
            "location": "/features/notification/#software-code",
            "text": "",
            "title": "Software Code"
        },
        {
            "location": "/features/notification/#current-endpointsviews",
            "text": "/api/self/notification/  UserNotificationViewSet  /api/notifications/  NotificationViewSet  /api/notifications/pending/  PendingNotificationView  /api/notifications/expired/  ExpiredNotificationView",
            "title": "Current Endpoints/Views:"
        },
        {
            "location": "/features/notification/#methods",
            "text": "Get all notifications  Get all pending notifications  Get all expired notifications  Create a Notification  Delete/Dismiss a notifications  Get notifications for a user  Sort by date  Update notifications Expired Date  Email Batch  When email_batch command occurs, it will go to every users' 'mailbox' to check if email_status on the notification is false, do the count, make value true, and email user the new notification count and telling them to login.",
            "title": "Methods"
        },
        {
            "location": "/features/notification/#model",
            "text": "Current Model  class Notification(models.Model):\n     \n    Setter for peer variable\n    {\n        'user': {\n        'username': str\n        },\n        '_bookmark_listing_ids': list[int],\n        'folder_name': str\n    }\n     \n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    message = models.CharField(max_length=4096)\n    expires_date = models.DateTimeField()\n    author = models.ForeignKey(Profile, related_name='authored_notifications')\n    dismissed_by = models.ManyToManyField(\n        'Profile',\n        related_name='dismissed_notifications',\n        db_table='notification_profile'\n    )\n    listing = models.ForeignKey(Listing, related_name='notifications',\n                                null=True, blank=True)\n    agency = models.ForeignKey(Agency, related_name='agency_notifications',\n                               null=True, blank=True)\n    _peer = models.CharField(max_length=4096, null=True, blank=True, db_column='peer')\n\n    def notification_type(self):\n         \n        Dynamically figure out Notification Type\n\n        Types:\n            SYSTEM - System-wide Notifications\n            AGENCY - Agency-wide Notifications\n            AGENCY.BOOKMARK - Agency-wide Bookmark Notifications # Not requirement (erivera 20160621)\n            LISTING - Listing Notifications\n            PEER - Peer to Peer Notifications\n            PEER.BOOKMARK - Peer to Peer Bookmark Notifications\n           Redesign Model  \nclass NotificationV2(models.Model):\n    # Mailbox Profile ID\n    profile_target_id = models.ForeignKey(Profile, related_name='mailbox_notifications')\n\n    # It is a unique id for notifications that allow to correlate between different 'mailboxes'\n    # Example) For deleting system-wide notifications,\n    #    for every 'mailbox' delete the notification with notification_id\n    notification_id = models.UUIDField(default=uuid.uuid4, editable=False, db_index=True)\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    expires_date = models.DateTimeField()\n\n    # Author of Notification\n    author = models.ForeignKey(Profile, related_name='authored_notificationsv2')\n    message = models.CharField(max_length=4096)\n\n    # Notification Type\n    SYSTEM = 'system'  # System-wide Notifications\n    AGENCY = 'agency'  #   Agency-wide Notifications\n    AGENCY_BOOKMARK = 'agency_bookmark'  #  Agency-wide Bookmark Notifications # Not requirement (erivera 20160621)\n    LISTING = 'listing'  # Listing Notifications\n    PEER = 'peer'  # Peer to Peer Notifications\n    PEER_BOOKMARK = 'peer_bookmark'  # PEER.BOOKMARK - Peer to Peer Bookmark Notifications\n\n    NOTIFICATION_TYPE_CHOICES = (\n        (SYSTEM, 'system'),\n        (AGENCY, 'agency'),\n        (AGENCY_BOOKMARK, 'agency_bookmark'),\n        (LISTING, 'listing'),\n        (PEER, 'peer'),\n        (PEER_BOOKMARK, 'peer_bookmark'),\n    )\n\n    notification_type = models.CharField(max_length=24, choices=NOTIFICATION_TYPE_CHOICES, db_index=True)\n\n    # Depending on notification_type, it could be listing_id/agency_id/profile_user_id/category_id/tag_id\n    entity_id  = models.IntegerField(default=0, null=True, blank=True)\n\n    # If it has been emailed. then make value true\n    email_status = models.BooleanField(default=False)\n\n    # Field use to store extra data.\n    # For PEER.BOOKMARK Notifications this field will be use to store FolderName and Listing Ids\n    _metadata = models.CharField(max_length=4096, null=True, blank=True, db_column='metadata')\n\n    # User Target\n    ALL = 'all'  # All users\n    STEWARDS = 'stewards'\n    APP_STEWARD = 'app_steward'\n    ORG_STEWARD = 'org_steward'\n    USER = 'user'\n\n    TARGET_USER_CHOICES = (\n        (ALL, 'all'),\n        (STEWARDS, 'stewards'),\n        (APP_STEWARD, 'app_steward'),\n        (ORG_STEWARD, 'org_steward'),\n        (USER, 'user'),\n    )\n    user_target = models.CharField(max_length=24, choices=TARGET_USER_CHOICES) # db_index=True)\n\n    @property\n    def metadata(self):\n        if self._metadata:\n            return json.loads(self._metadata)\n        else:\n            return None\n\n    @metadata.setter\n    def metadata(self, value):\n         \n        Setter for metadata variable\n        {\n            '_bookmark_listing_ids': list[int],\n            'folder_name': str\n        }\n\n        Args:\n            value (dict): dictionary\n         \n        if value:\n            assert isinstance(value, dict), 'Argument of wrong type is not a dict'\n            self._metadata = json.dumps(value)\n        else:\n            return None\n\n    def __repr__(self):\n        return '{0!s}: {1!s}'.format(self.author.user.username, self.message)\n\n    def __str__(self):\n        return '{0!s}: {1!s}'.format(self.author.user.username, self.message)  CQL (cassandra)  DROP KEYSPACE IF EXISTS notification;\n\nCREATE KEYSPACE IF NOT EXISTS notification\n    WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\n\n// Schema\nCREATE TABLE notification.messages (\n    // Mailbox Profile ID\n    profile_target_id int,\n\n    // It is a unique id for notifications that allow to correlate between different 'mailboxes'\n    notification_id  uuid,\n\n    // Author Profile username\n    author_username text,\n\n    // Type: SYSTEM, AGENCY, AGENCY_BOOKMARK, LISTING, PEER, PEER_BOOKMARK\n    notification_type text,\n\n    // Create Date\n    created_date  timestamp,\n\n    // Expires Date\n    expires_date timestamp,\n\n    // Message of Notification\n    message text,\n\n    // If it has been emailed. then make value true\n    email_status boolean,\n\n    // Field use to store extra data.\n    metadata map text, text ,\n\n    // Group Target, Used for debugging\n    // All, Stewards, App Stewards, Org Stewards, User\n    role_target text,\n\n    primary key (profile_target_id , expires_date, created_date)\n)\nWITH CLUSTERING ORDER BY (expires_date DESC, created_date DESC);\n\n\n// Inserts\n// System-Wide Notification\nINSERT INTO notification.messages(\n        profile_target_id,\n        notification_id,\n        email_status,\n        created_date,\n        expires_date,\n        role_target,\n        message,\n        notification_type,\n        author_username,\n        metadata\n        )\nVALUES (2,\n        now(),\n        False,\n        toTimestamp(now()),\n        toTimestamp(now()),\n        'all',\n        'Sample Message',\n        'system',\n        'bigbrother',\n        {'test':'test'}\n);\n\n\n// Get all Notifications for user 2\nSELECT * FROM notification.messages WHERE profile_target_id = 2;\n\nSELECT count(*) FROM notification.messages WHERE profile_target_id = 2;",
            "title": "Model"
        },
        {
            "location": "/features/notification/#model-access-signatures",
            "text": "Get All Notifications  def get_all_notifications():\n     \n    Get all notifications (expired and un-expired notifications)\n       Create Notification  def create_notification(author_username, expires_date, message, listing=None, agency=None, peer=None):\n     \n    Args:\n        author_username (str): Username of author\n        expires_date (datetime.datetime): Expires Date (datetime.datetime(2016, 6, 24, 1, 0, tzinfo= UTC ))\n        message (str): Message of notification\n        listing (models.Listing)-Optional: Listing\n        Agency (models.Agency)-Optional: Agency\n       Dismiss Notification  def dismiss_notification(notification_instance, username):\n     \n    Args:\n        notification_instance (models.Notification): notification_instance\n        username (string)\n       Update Notification  def update_notification(author_username, notification_instance, expires_date):\n     \n    Args:\n        notification_instance (models.Notification): notification_instance\n        author_username (str): Username of author\n     \n    notification_instance.expires_date = expires_date  get_all_pending_notifications  def get_all_pending_notifications(for_user=False):\n     \n    Gets all system-wide pending notifications\n       get_all_expired_notifications  def get_all_expired_notifications():\n     \n    Get all expired notifications\n       def get_notification_by_id(username, id, reraise=False):\n     \n    Get Notification by id\n       def get_self_notifications(username):\n     \n    Get notifications for current user\n\n    User's Notifications are\n        * Notifications that have not yet expired (A)\n        * Notifications have not been dismissed by this user (B)\n        * Notifications that are regarding a listing in this user's library\n          if the notification is listing-specific\n        * Notification that are System-wide are included\n\n    Args:\n        username (str): current username to get notifications\n     \n    notifications = (unexpired_system_notifications | unexpired_agency_notifications | unexpired_peer_notifications |\n                     unexpired_listing_notifications).exclude(pk__in=dismissed_notifications)",
            "title": "Model Access Signatures:"
        },
        {
            "location": "/features/notification/#questions-past",
            "text": "Will messages from organizations have to be approved by the Marketplace Steward?  Can Org. Stewards cancel their notifications without approval from the Marketplace Steward?    Will messages created by Org Stewards or MP Stewards for/from listings need to be approved in the typical fashion? (By Org Stewards and then by MP Stewards)  What level of information about all the current notifications should Org Stewards have?  Should the get to see all the other orgs' notifications but not interact?  Should they only get to see notifications from their own org(s) and the listings associated with their org?  Should they get to see aml Platform notifications?    Can an owner cancel an approved notification?",
            "title": "Questions (past)"
        },
        {
            "location": "/features/recommender_2017/",
            "text": "Business Objective\n\n\nTo recommend applications to users that they might find useful in their everyday objectives    \n\n\nOriginal Ticket: https://github.com/aml-development/aml-backend/issues/193\n\n\nRequirements\n\n\n\n\nHardware and software requirements should not add cost or dependencies\n\n\nSolution shall work in development and production environments\n\n\nSolution shall be a hybrid solution composed of content and user based recommendation\n\n\nRecommendation Results shall be returned in less than three second\n\n\nRecomputing the results will make sure requirement will be meet\n\n\n\n\nResearched Solutions\n\n\nDSSTNE\n\n\nDesigned to create and run recommendation models using minimal input and output, but numerous connected layers in between.  Emphasizes on speed and scaling.\n\n\nPros\n  \n\n\n Faster than other deep learning libraries.\n\n Able to solve recommendations problems in a fast manner.\n\n\nCons\n  \n\n\n Multiple dependencies need to be installed.\n\n Team would need time to learn. (DEEP LEARNING CURVE)\n\n DSSTNE relies on multiple GPU's to perform optimally, though we do not have the ability to use multiple GPU's.\n\n Python support currently unavailable (but on the way).\n\n\nMXNET\n\n\nMXNet is a deep learning framework designed for both efficiency and flexibility, allows you to define, train, and deploy deep neural networks on a wide array of devices, from cloud infrastructure to mobile devices.\n\n\nPros\n  \n\n\n Portable (works on all major os, and programming language, julia, python, scala, r)\n\n Efficient (Takes less memory)\n* Scalable (Ability do work across many GPUs and Machines)\n\n\nCons\n  \n\n\n Learning Curve\n\n\n Need a lot of data (takes millions of records for learning\n* Requires a gpu\n\n\nPredictionIO\n\n\nAn open source machine learning framework for developers, and users.  Queries predictive results using RES API's.\n\n\nPros\n  \n\n\n Open Source\n\n Has multiple Recommender templates available for use\n* Python support\n\n\nCons\n  \n\n\n All of the Recommender templates are done in Scala, which is not currently used by the team\n\n Bundled with Elasticsearch\n\n\nElasticsearch\n\n\nCan be customize to use user inputs to determine recommendations based on previous searches.\nChoosing the wrong method can have disastrous consequences for the quality of recommendations.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-aggregations-bucket-significantterms-aggregation.html\n\n\nPros\n  \n\n\n Use statistics without personalization with Elasticsearch Aggregations to create profiles\n\n Collaborative Filtering \u2013 The theory of guessing interesting items from similar items or similar users\n\n Customizable based on implementation techniques\n\n There is a More Like This API which allows to get documents\n\n\nCons\n\n\n Need to build The system\n\n Higher possibility of error in implementation\n\n\nNeo4j\n\n\nUses real time results using a visual graph relation to create a recommendation.\n\n\nPros\n  \n\n\n Graph interface and can be visual and understandable\n\n Analysis on nodes and lines\n\n\nCons\n\n\n Needs to use a JVM Engine and is Java based.  So as Java versions change need to verify that it can work with the infrastructure.\n\n Each engine is created to perform a recommendation\n\n Data is represented in Graphs and how data is connected to each node to node.  They relationships are between the nodes not the data.\n\n Might need to use GraphAware add-on\n* Queries might take some time to develop\n\n\nCrab\n\n\nRecommender systems in Python, can construct a customized recommender system from a set of algorithms\n\n\nPros\n  \n\n\n Python\n\n Recommender Algorithms: User-Based Filtering and Item-Based Filtering\n* License: Open source, commercially usable\n\n\nCons\n\n\n Learning Curve\n\n Single Machine Processing\n\n\nMock up\n\n\nRequirement came from https://github.com/aml-development/aml-documentation/wiki/Iteration-53#uiux\n\n\nCenter Front page\n\n\n\n\nCenter Search page\n\n\n\n\nRecommendation Engine Principles\n\n\nhttp://people.cs.vt.edu/~ramakris/papers/receval.pdf  \n\n\"\"\"\n- Recommendation is an indirect way of bringing people together. As we will\n  discuss recommendation algorithms, especially collaborative filtering, exploit connections\n  between users and artifacts.\n- Recommendation, as a process, should emphasize modeling connections\n  from people to artifacts, besides predicting ratings for artifacts. In many situations,\n  users would like to request recommendations purely based on local and global\n  constraints on the nature of the specific connections explored.\n- Recommendations should be explainable and believable.\n- Recommendations are not delivered in isolation, but in the context of an\n  implicit/explicit social network.\n\"\"\"\n\n\nApproach\n\n\nScheduled Offline Batch\n\n\n\n\nAdd Recommendation Model to models.py file (This model is used to store the results of the script/program that computes recommendations).\n\n\n\n\nclass RecommendationsEntry(models.Model):\n    \n\n    A Listing that a user (Profile) has in their 'application library'/bookmarks\n    \n\n    target_profile = models.ForeignKey(\n        'Profile', related_name='recommendations_entries')\n    listing = models.ForeignKey(\n        'Listing', related_name='recommendations_entries')\n    score = models.CharField(max_length=255, blank=True, null=True)\n\n    def __str__(self):\n        return '{0!s}:{1!s}:{2!s}'.format(self.folder, self.owner.user.username,\n                             self.listing.title)\n\n    def __repr__(self):\n        return '{0!s}:{1!s}:{2!s}'.format(self.folder, self.owner.user.username,\n                             self.listing.title)\n\n    class Meta:\n        verbose_name_plural = \nrecommendations entries\n\n\n\n\n\n\n\nAdd recommended listing to storefront endpoint (This endpoint is used to show the users the results of the computation of the recommendation script/program)\n\n\n\n\ndiff --git a/amlcenter/api/storefront/model_access.py b/amlcenter/api/storefront/model_access.py\nindex 85418d1..277150b 100644\n--- a/amlcenter/api/storefront/model_access.py\n+++ b/amlcenter/api/storefront/model_access.py\n@@ -21,8 +21,16 @@ def get_storefront(username):\n\n     NOTE: think about adding Bookmark status to this later on\n     \n\n-    user = models.Profile.objects.get(user__username=username)  # flake8: noqa TODO: Is Necessary? - Variable not being\n+    profile = models.Profile.objects.get(user__username=username)  # flake8: noqa TODO: Is Necessary? - Variable not bei\n     try:\n+        # get recommended listing for owner\n+        recommended_listings = models.RecommendationsEntry.objects.filter(target_profile=profile,\n+                                                                         listing__is_enabled=True,\n+                                                                         approval_status=models.Listing.APPROVED\n+                                                                         is_deleted=False).order_by('-score').values(\n+                                                                             'listing')[:12]\n+        # Ensure that the Listing are viewable by the current user\n+\n         # get featured listings\n         featured_listings = models.Listing.objects.for_user(\n             username).filter(\n@@ -51,6 +59,7 @@ def get_storefront(username):\n         most_popular_listings = serializers.ListingSerializer.setup_eager_loading(most_popular_listings)\n\n         data = {\n+            'recommended': recommended_listings,\n             'featured': featured_listings,\n             'recent': recent_listings,\n             'most_popular': most_popular_listings\n\n\n\n\n\n\nHave a process compute the recommendations for each user and write the results in the \nRecommendationsEntry\n table (maybe have two tables - active , inactive)\n\n\nWrite the script that computes recommendations, at the point connect to database, get datasets, run recommendation algorithm, and save results\n\n\nAfter the recommendations have been saved to the table, the users will see recommendations when they hit the storefront endpoint, they could also refresh the page in aml-center\n\n\n\n\nContent based search information:\n\n\nPros\n:\n\n Need to find features to compare for all items\n\n Does not need to know information on users'\n\n Can apply various Similarity Algorithms\n\n Ability to make recommendations to users with unique tastes or requirements\n\n Can make recommendations as soon they become available\n\n Can use search history to create recommendations\n\n\nCons\n:\n\n Finding the correct features to recommend on are hard to find\n\n Can possibly never recommend an item outside of their interests\n\n Unable to exploit the quality of others users\n\n Cold-start problem for new users\n\n\nUser based search information:\n\n\n\n\nItem-Item vs. User-User filtering comparison *:\n\n\nBoth methods should perform the same\n\n\nIn practice, item-item performs better than user-user\n\n\nReason for item-item being better is because:\n\n\nItems are \"simpler\" than classifying Users\n\n\nItem Similarity is more meaningful than User Similarity which makes it more useful\n\n\n\n\n\n\n\n\nVisualization\n\n\n\n\nVideos:\n\n\n\n\nhttps://youtu.be/Eeg1DEeWUjA Content Based Recommendation and Collaborative Filtering Recommendation Systems Explained\n\n\n\n\nSites\n\n\n\n\nhttps://neo4j.com/developer/guide-build-a-recommendation-engine/\n\n\nhttp://datascience.stackexchange.com/questions/8705/collaborative-filtering-using-graph-and-machine-learning\n\n\nhttp://mikelam.azurewebsites.net/beer-recommendations-with-user-based-collaborative-filtering/\n\n\nhttp://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html\n\n\nWe could use celery for task scheduling and running the recommendation algorithm.\n\n\nhttps://realpython.com/blog/python/asynchronous-tasks-with-django-and-celery/  is a good starting guide\n\n\nhttp://opensourceconnections.com/blog/2016/06/06/recommender-systems-101-basket-analysis/ good general site for Basket Analysis technique\n\n\nhttp://opensourceconnections.com/blog/2016/09/09/better-recsys-elasticsearch/ How to build a good recommendation engine using Elasticsearch",
            "title": "Recommender 2017"
        },
        {
            "location": "/features/recommender_2017/#business-objective",
            "text": "To recommend applications to users that they might find useful in their everyday objectives      Original Ticket: https://github.com/aml-development/aml-backend/issues/193",
            "title": "Business Objective"
        },
        {
            "location": "/features/recommender_2017/#requirements",
            "text": "Hardware and software requirements should not add cost or dependencies  Solution shall work in development and production environments  Solution shall be a hybrid solution composed of content and user based recommendation  Recommendation Results shall be returned in less than three second  Recomputing the results will make sure requirement will be meet",
            "title": "Requirements"
        },
        {
            "location": "/features/recommender_2017/#researched-solutions",
            "text": "",
            "title": "Researched Solutions"
        },
        {
            "location": "/features/recommender_2017/#dsstne",
            "text": "Designed to create and run recommendation models using minimal input and output, but numerous connected layers in between.  Emphasizes on speed and scaling.  Pros      Faster than other deep learning libraries.  Able to solve recommendations problems in a fast manner.  Cons      Multiple dependencies need to be installed.  Team would need time to learn. (DEEP LEARNING CURVE)  DSSTNE relies on multiple GPU's to perform optimally, though we do not have the ability to use multiple GPU's.  Python support currently unavailable (but on the way).",
            "title": "DSSTNE"
        },
        {
            "location": "/features/recommender_2017/#mxnet",
            "text": "MXNet is a deep learning framework designed for both efficiency and flexibility, allows you to define, train, and deploy deep neural networks on a wide array of devices, from cloud infrastructure to mobile devices.  Pros      Portable (works on all major os, and programming language, julia, python, scala, r)  Efficient (Takes less memory)\n* Scalable (Ability do work across many GPUs and Machines)  Cons      Learning Curve   Need a lot of data (takes millions of records for learning\n* Requires a gpu",
            "title": "MXNET"
        },
        {
            "location": "/features/recommender_2017/#predictionio",
            "text": "An open source machine learning framework for developers, and users.  Queries predictive results using RES API's.  Pros      Open Source  Has multiple Recommender templates available for use\n* Python support  Cons      All of the Recommender templates are done in Scala, which is not currently used by the team  Bundled with Elasticsearch",
            "title": "PredictionIO"
        },
        {
            "location": "/features/recommender_2017/#elasticsearch",
            "text": "Can be customize to use user inputs to determine recommendations based on previous searches.\nChoosing the wrong method can have disastrous consequences for the quality of recommendations.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-aggregations-bucket-significantterms-aggregation.html  Pros      Use statistics without personalization with Elasticsearch Aggregations to create profiles  Collaborative Filtering \u2013 The theory of guessing interesting items from similar items or similar users  Customizable based on implementation techniques  There is a More Like This API which allows to get documents  Cons   Need to build The system  Higher possibility of error in implementation",
            "title": "Elasticsearch"
        },
        {
            "location": "/features/recommender_2017/#neo4j",
            "text": "Uses real time results using a visual graph relation to create a recommendation.  Pros      Graph interface and can be visual and understandable  Analysis on nodes and lines  Cons   Needs to use a JVM Engine and is Java based.  So as Java versions change need to verify that it can work with the infrastructure.  Each engine is created to perform a recommendation  Data is represented in Graphs and how data is connected to each node to node.  They relationships are between the nodes not the data.  Might need to use GraphAware add-on\n* Queries might take some time to develop",
            "title": "Neo4j"
        },
        {
            "location": "/features/recommender_2017/#crab",
            "text": "Recommender systems in Python, can construct a customized recommender system from a set of algorithms  Pros      Python  Recommender Algorithms: User-Based Filtering and Item-Based Filtering\n* License: Open source, commercially usable  Cons   Learning Curve  Single Machine Processing",
            "title": "Crab"
        },
        {
            "location": "/features/recommender_2017/#mock-up",
            "text": "Requirement came from https://github.com/aml-development/aml-documentation/wiki/Iteration-53#uiux",
            "title": "Mock up"
        },
        {
            "location": "/features/recommender_2017/#center-front-page",
            "text": "",
            "title": "Center Front page"
        },
        {
            "location": "/features/recommender_2017/#center-search-page",
            "text": "",
            "title": "Center Search page"
        },
        {
            "location": "/features/recommender_2017/#recommendation-engine-principles",
            "text": "http://people.cs.vt.edu/~ramakris/papers/receval.pdf   \n\"\"\"\n- Recommendation is an indirect way of bringing people together. As we will\n  discuss recommendation algorithms, especially collaborative filtering, exploit connections\n  between users and artifacts.\n- Recommendation, as a process, should emphasize modeling connections\n  from people to artifacts, besides predicting ratings for artifacts. In many situations,\n  users would like to request recommendations purely based on local and global\n  constraints on the nature of the specific connections explored.\n- Recommendations should be explainable and believable.\n- Recommendations are not delivered in isolation, but in the context of an\n  implicit/explicit social network.\n\"\"\"",
            "title": "Recommendation Engine Principles"
        },
        {
            "location": "/features/recommender_2017/#approach",
            "text": "",
            "title": "Approach"
        },
        {
            "location": "/features/recommender_2017/#scheduled-offline-batch",
            "text": "Add Recommendation Model to models.py file (This model is used to store the results of the script/program that computes recommendations).   class RecommendationsEntry(models.Model):\n     \n    A Listing that a user (Profile) has in their 'application library'/bookmarks\n     \n    target_profile = models.ForeignKey(\n        'Profile', related_name='recommendations_entries')\n    listing = models.ForeignKey(\n        'Listing', related_name='recommendations_entries')\n    score = models.CharField(max_length=255, blank=True, null=True)\n\n    def __str__(self):\n        return '{0!s}:{1!s}:{2!s}'.format(self.folder, self.owner.user.username,\n                             self.listing.title)\n\n    def __repr__(self):\n        return '{0!s}:{1!s}:{2!s}'.format(self.folder, self.owner.user.username,\n                             self.listing.title)\n\n    class Meta:\n        verbose_name_plural =  recommendations entries    Add recommended listing to storefront endpoint (This endpoint is used to show the users the results of the computation of the recommendation script/program)   diff --git a/amlcenter/api/storefront/model_access.py b/amlcenter/api/storefront/model_access.py\nindex 85418d1..277150b 100644\n--- a/amlcenter/api/storefront/model_access.py\n+++ b/amlcenter/api/storefront/model_access.py\n@@ -21,8 +21,16 @@ def get_storefront(username):\n\n     NOTE: think about adding Bookmark status to this later on\n      \n-    user = models.Profile.objects.get(user__username=username)  # flake8: noqa TODO: Is Necessary? - Variable not being\n+    profile = models.Profile.objects.get(user__username=username)  # flake8: noqa TODO: Is Necessary? - Variable not bei\n     try:\n+        # get recommended listing for owner\n+        recommended_listings = models.RecommendationsEntry.objects.filter(target_profile=profile,\n+                                                                         listing__is_enabled=True,\n+                                                                         approval_status=models.Listing.APPROVED\n+                                                                         is_deleted=False).order_by('-score').values(\n+                                                                             'listing')[:12]\n+        # Ensure that the Listing are viewable by the current user\n+\n         # get featured listings\n         featured_listings = models.Listing.objects.for_user(\n             username).filter(\n@@ -51,6 +59,7 @@ def get_storefront(username):\n         most_popular_listings = serializers.ListingSerializer.setup_eager_loading(most_popular_listings)\n\n         data = {\n+            'recommended': recommended_listings,\n             'featured': featured_listings,\n             'recent': recent_listings,\n             'most_popular': most_popular_listings   Have a process compute the recommendations for each user and write the results in the  RecommendationsEntry  table (maybe have two tables - active , inactive)  Write the script that computes recommendations, at the point connect to database, get datasets, run recommendation algorithm, and save results  After the recommendations have been saved to the table, the users will see recommendations when they hit the storefront endpoint, they could also refresh the page in aml-center",
            "title": "Scheduled Offline Batch"
        },
        {
            "location": "/features/recommender_2017/#content-based-search-information",
            "text": "Pros :  Need to find features to compare for all items  Does not need to know information on users'  Can apply various Similarity Algorithms  Ability to make recommendations to users with unique tastes or requirements  Can make recommendations as soon they become available  Can use search history to create recommendations  Cons :  Finding the correct features to recommend on are hard to find  Can possibly never recommend an item outside of their interests  Unable to exploit the quality of others users  Cold-start problem for new users",
            "title": "Content based search information:"
        },
        {
            "location": "/features/recommender_2017/#user-based-search-information",
            "text": "Item-Item vs. User-User filtering comparison *:  Both methods should perform the same  In practice, item-item performs better than user-user  Reason for item-item being better is because:  Items are \"simpler\" than classifying Users  Item Similarity is more meaningful than User Similarity which makes it more useful",
            "title": "User based search information:"
        },
        {
            "location": "/features/recommender_2017/#visualization",
            "text": "",
            "title": "Visualization"
        },
        {
            "location": "/features/recommender_2017/#videos",
            "text": "https://youtu.be/Eeg1DEeWUjA Content Based Recommendation and Collaborative Filtering Recommendation Systems Explained",
            "title": "Videos:"
        },
        {
            "location": "/features/recommender_2017/#sites",
            "text": "https://neo4j.com/developer/guide-build-a-recommendation-engine/  http://datascience.stackexchange.com/questions/8705/collaborative-filtering-using-graph-and-machine-learning  http://mikelam.azurewebsites.net/beer-recommendations-with-user-based-collaborative-filtering/  http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html  We could use celery for task scheduling and running the recommendation algorithm.  https://realpython.com/blog/python/asynchronous-tasks-with-django-and-celery/  is a good starting guide  http://opensourceconnections.com/blog/2016/06/06/recommender-systems-101-basket-analysis/ good general site for Basket Analysis technique  http://opensourceconnections.com/blog/2016/09/09/better-recsys-elasticsearch/ How to build a good recommendation engine using Elasticsearch",
            "title": "Sites"
        },
        {
            "location": "/features/shared_folders_2018/",
            "text": "Business Objective - Bookmarks (hud)\n\n\nTerms and Definitions\n\n\n\n\nbookmark - enabled quick access for listing\n\n\n\n\nconcept of shared folder was to make a\n\n\nImplementation of Legacy Bookmarks\n\n\n\n\nhttps://github.com/aml-development/aml-backend/issues/7\n\n\nhttps://github.com/aml-development/aml-backend/pull/252\n\n\n\n\nAPI\n\n\nGet User library\n\n\nGET /api/self/library HTTP/1.1\nHost: 127.0.0.1:8001\nAuthorization: Basic YmlnYnJvdGhlcjpwYXNzd29yZA==  # bigbrother\n\n[\n    {\n        \nlisting\n: {\n            \nid\n: 169,\n            \ntitle\n: \nTornado\n,\n            \nunique_name\n: \ntornado\n,\n            \nlaunch_url\n: \nhttps://en.wikipedia.org/wiki/Tornado\n,\n            \nsmall_icon\n: {\n                \nurl\n: \nhttp://127.0.0.1:8001/api/image/683/\n,\n                \nid\n: 683,\n                \nsecurity_marking\n: \nUNCLASSIFIED\n\n            },\n            \nlarge_icon\n: {\n                \nurl\n: \nhttp://127.0.0.1:8001/api/image/684/\n,\n                \nid\n: 684,\n                \nsecurity_marking\n: \nUNCLASSIFIED\n\n            },\n            \nbanner_icon\n: {\n                \nurl\n: \nhttp://127.0.0.1:8001/api/image/685/\n,\n                \nid\n: 685,\n                \nsecurity_marking\n: \nUNCLASSIFIED\n\n            },\n            \nowners\n: [\n                {\n                    \nid\n: 1,\n                    \nuser\n: {\n                        \nusername\n: \nbigbrother\n\n                    },\n                    \ndisplay_name\n: \nBig Brother\n\n                }\n            ]\n        },\n        \nfolder\n: \nWeather\n,\n        \nid\n: 50,\n        \nposition\n: 0\n    }, ...\n]\n\n\n\n\n\nBusiness Objective - Shared Bookmarks (aml3.0 draft - 05/03/2018)\n\n\nAdd support for share-able folders\n\n\nTerms and Definitions\n\n\n\n\nbookmark - can represent a folder or listing\n\n\nfolder bookmark - group of listing bookmarks\n\n\nshared folder owners - users who own shared folder\n\n\nlisting owners - users who own listing\n\n\n\n\nUI Interactions\n\n\n\n\nShould show all bookmarks\n\n\nUser management component\n\n\nGet all users permission for a folder (username, role) ordered by role, username?\n\n\nChange Role for a person for a folder\n\n\n\n\n\n\nGet share-able link\n\n\n\n\nRequirements\n\n\nGeneral\n\n\n\n\nWhen the folder is updated by any owner, the folder updates are visible to all users after calling api again (refresh)\n\n\n\n\nPermissions\n\n\n\n\nShould allow users to share a folder that is maintained by one or more users (owner).\n\n\nwhat type of users?\n\n\n\n\n\n\nShared Folder Viewer Should be able to\n\n\nget a list of bookmarks\n\n\n\n\n\n\nShared Folder Owner should be able to\n\n\nmodify the folder\n\n\nadd other owners\n\n\ndelete delete owners\n\n\nchange permissions\n\n\nEverything a Shared Folder Viewer can do\n\n\n\n\n\n\nShared Folder Owner should be able to see user management component\n\n\nShared Folder Viewer should \nnot\n be able to see user management component\n\n\n\n\nNotifications\n\n\n\n\nSend notification for updates to all owners/viewers of shared folder\n\n\nupdates\n\n\n[ ] Adding user to shared folder\n\n\n[ ] Removing user from shared folder\n\n\n[x] Adding listing to shared folder\n\n\n[x] Removing listing from shared folder\n\n\n[ ] Changing permissions of a user for shared folder\n\n\n[x] Removing shared folder\n\n\n\n\n\n\n\n\n\n\n\n\nUn-categorized\n\n\nOwners and Viewers are two different user type\n\n\nThe folder should have 'viewers' that can only view, but not edit, the folder, should not see user management component\n\n\nThe UI component, when available, would let the folder creator select users to share to, and set their permissions (similar in the way google sheets/docs sharing works).\n\n\nWe will also maintain the concept of a copied folder, but will also add a true 'shared' folder.\n\n\nRegular Folder, Duplicate Folder, Shared Folder  are the different types of folder\n\n\nif user send a shareable link to someone without access to folder,\nshould we send a notification to the owners saying\n\"User requesting access to folder,  allow - denied access\",\nthe user side it would be \"Access Denied - request for access button\"\nor will it be public anyone can view folder?\n\n\nAcceptance Criteria\n\n\nA new type of bookmark folder is available in the backend, that has permissions associated with it (view/edit)\n\n\nAPI\n\n\nhttp://www.django-rest-framework.org/api-guide/filtering/#filtering-and-object-lookups\n\n\nOperations\n\n\n\n\nbookmark\n\n\ncreate - POST: /api/bookmark - create bookmark listing\n\n\nlist - GET: /api/bookmark/?type=LISTING - list all bookmarks (listing)\n\n\nbulk update\n\n\n\n\n\n\nfolder\n\n\ncreate - POST /api/bookmark/ - create bookmark folder\n\n\nlists  - GET: /api/bookmark/?type=FOLDER - list all bookmarks (folders/shared folders)\n\n\n\n\n\n\nchildren\n\n\nadd - PUT : /bookmark/{parentId}/children/{childId} -Adds child to a Folder\n\n\nmove - POST: /bookmark/{toparentId}/children  Move a child from one node to another\n\n\ndelete - DELETE : /bookmark/{parentId}/children/{childId} - Removes the child\n\n\nlist - GET : /bookmark/{id}/children - Lists all children\n\n\n\n\n\n\n\n\n[\n  {\n    \nid\n : {string} \nunique identifier of a bookmark\n, # integer\n    \nname\n : {string} \nuser friendly name of a FOLDER\n, # string, max 256 characters\n    \nkind\n : \nLISTING\n, # literal string, \nLISTING\n,  can also be \nFOLDER\n\n    \nmodifiedDate\n :  {datetime} Last modified date (ISO8601 date with timezone offset),\n    \ncreatedDate\n : {datetime} First uploaded date (ISO8601 date with timezone offset),\n    \nparent\n: {\n      \nid\n : {string} \nunique identifier of a bookmark\n, # integer\n      \nname\n : {string} \nuser friendly name of a FOLDER\n, # string, max 256 characters\n      \nkind\n : \nFOLDER\n, # literal string \nFOLDER\n\n    },\n    \nlisting\n: {  # If the kind is a listing then fill else null\n        \nid\n: 169,\n        \ntitle\n: \nTornado\n,\n        \nunique_name\n: \ntornado\n,\n        \nlaunch_url\n: \nhttps://en.wikipedia.org/wiki/Tornado\n,\n        \nsmall_icon\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/683/\n,\n            \nid\n: 683,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n        },\n        \nlarge_icon\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/684/\n,\n            \nid\n: 684,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n        },\n        \nbanner_icon\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/685/\n,\n            \nid\n: 685,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n        },\n        \nowners\n: [\n            {\n                \nid\n: 1,\n                \nuser\n: {\n                    \nusername\n: \nbigbrother\n\n                },\n                \ndisplay_name\n: \nBig Brother\n\n            }\n        ]\n    }\n  },...\n]\n\n\n\n\nOR\n\n\n[\n  {\n    \nid\n : {string} \nunique identifier of a bookmark\n, # integer\n    \nname\n : {string} \nuser friendly name of a FOLDER\n, # string, max 256 characters\n    \nkind\n : \nLISTING\n, # literal string, \nLISTING\n,  can also be \nFOLDER\n\n    \nmodifiedDate\n :  {datetime} Last modified date (ISO8601 date with timezone offset),\n    \ncreatedDate\n : {datetime} First uploaded date (ISO8601 date with timezone offset),\n    \nlisting\n: {  # If the kind is a listing then fill else null\n        \nid\n: 169,\n        \ntitle\n: \nTornado\n,\n        \nunique_name\n: \ntornado\n,\n        \nlaunch_url\n: \nhttps://en.wikipedia.org/wiki/Tornado\n,\n        \nsmall_icon\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/683/\n,\n            \nid\n: 683,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n        },\n        \nlarge_icon\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/684/\n,\n            \nid\n: 684,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n        },\n        \nbanner_icon\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/685/\n,\n            \nid\n: 685,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n        },\n        \nowners\n: [\n            {\n                \nid\n: 1,\n                \nuser\n: {\n                    \nusername\n: \nbigbrother\n\n                },\n                \ndisplay_name\n: \nBig Brother\n\n            }\n        ]\n    },\n    children:[\n      {\n        \nid\n : {string} \nunique identifier of a bookmark\n, # integer\n        \nname\n : {string} \nuser friendly name of a FOLDER\n, # string, max 256 characters\n        \nkind\n : \nLISTING\n, # literal string, \nLISTING\n,  can also be \nFOLDER\n\n        \nmodifiedDate\n :  {datetime} Last modified date (ISO8601 date with timezone offset),\n        \ncreatedDate\n : {datetime} First uploaded date (ISO8601 date with timezone offset),\n        \nlisting\n: {  # If the kind is a listing then fill else null\n            \nid\n: 169,\n            \ntitle\n: \nTornado\n,\n            \nunique_name\n: \ntornado\n,\n            \nlaunch_url\n: \nhttps://en.wikipedia.org/wiki/Tornado\n,\n            \nsmall_icon\n: {\n                \nurl\n: \nhttp://127.0.0.1:8001/api/image/683/\n,\n                \nid\n: 683,\n                \nsecurity_marking\n: \nUNCLASSIFIED\n\n            },\n            \nlarge_icon\n: {\n                \nurl\n: \nhttp://127.0.0.1:8001/api/image/684/\n,\n                \nid\n: 684,\n                \nsecurity_marking\n: \nUNCLASSIFIED\n\n            },\n            \nbanner_icon\n: {\n                \nurl\n: \nhttp://127.0.0.1:8001/api/image/685/\n,\n                \nid\n: 685,\n                \nsecurity_marking\n: \nUNCLASSIFIED\n\n            },\n            \nowners\n: [\n                {\n                    \nid\n: 1,\n                    \nuser\n: {\n                        \nusername\n: \nbigbrother\n\n                    },\n                    \ndisplay_name\n: \nBig Brother\n\n                }\n            ]\n        },\n        children:[\n\n        ]\n      },......\n    ]\n  },......\n]\n\n\n\n\nDatabase Structure\n\n\nExisting Tables\n\n\n\n\nListing\n\n\nProfile\n\n\nUser\n\n\n\n\nMethods without using custom order\n\n\nMethod 1 - Relational self-reference (child-parent not using root folder)\n\n\nModels\n\n\nclass BookmarkEntry(models.Model):\n    bookmark_parent = models.ForeignKey('BookmarkEntry', null=True, blank=True)\n    title = models.CharField(max_length=255)\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    listing = models.ForeignKey('Listing', related_name='listing_entries', null=True, blank=True)\n\n    FOLDER = 'FOLDER'\n    LISTING = 'LISTING'\n\n    TYPE_CHOICES = (\n        (FOLDER, 'FOLDER'),\n        (LISTING, 'LISTING'),\n    )\n    type = models.CharField(max_length=255, choices=TYPE_CHOICES, default=FOLDER)\n\n    creator = models.ForeignKey('Profile')\n\nclass BookmarkPermission(models.Model):\n    bookmark = models.ForeignKey('BookmarkEntry', related_name='bookmark_permission')\n    profile = models.ForeignKey('Profile')\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    OWNER = 'OWNER'\n    VIEWER = 'VIEWER'\n\n    USER_TYPE_CHOICES = (\n        (OWNER, 'OWNER'),\n        (VIEWER, 'VIEWER'),\n    )\n    user_type = models.CharField(max_length=255, choices=USER_TYPE_CHOICES, default=VIEWER)\n\n\n\n\nMethods (pseudocode)\n\n\nGetting root folder for user\n\n\n\n\n\n\n\nGetting first level entries for user\n\n\n\n\n\n\n\nAdding a new listing under a folder\n\n\n\n\n\n\n\nAdding new user as a viewer to a shared folder\n\n\nRemoving a user from shared folder list\n\n\nMethod 2 - Relational self-reference (child-parent using root folder)\n\n\nModels\n\n\nclass BookmarkEntry(models.Model):\n    bookmark_parent = models.ForeignKey('BookmarkEntry', null=True, blank=True)\n    # bookmark_parents = models.ManyToManyField('BookmarkEntry', null=True, blank=True)\n    # bookmark_parents m2mField is needed becuause of bookmark_parent_relationships\n    title = models.CharField(max_length=255)\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    listing = models.ForeignKey('Listing', related_name='listing_entries', null=True, blank=True)\n\n    is_root = models.BooleanField(default=False)\n\n    FOLDER = 'FOLDER'\n    LISTING = 'LISTING'\n\n    TYPE_CHOICES = (\n        (FOLDER, 'FOLDER'),\n        (LISTING, 'LISTING'),\n    )\n    type = models.CharField(max_length=255, choices=TYPE_CHOICES, default=FOLDER)\n\n\nclass BookmarkPermission(models.Model):\n    bookmark = models.ForeignKey('BookmarkEntry', related_name='bookmark_permission')\n    profile = models.ForeignKey('Profile')\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    OWNER = 'OWNER'\n    VIEWER = 'VIEWER'\n\n    USER_TYPE_CHOICES = (\n        (OWNER, 'OWNER'),\n        (VIEWER, 'VIEWER'),\n    )\n    user_type = models.CharField(max_length=255, choices=USER_TYPE_CHOICES, default=VIEWER)\n\n\n\n\n\n\nbookmark_parent_relationships (m2m table - storage of child-parent relationships)\n\n\nid (integer)\n\n\nbookmark (foreign_key to bookmarks id)\n\n\nparent_bookmark (foreign_key to bookmarks id, 1 bookmark can have many parents)\n\n\n\n\n\n\n\n\nwhen would \nbookmark_parent_relationships\n table be good to use?\n\n\nr1 = root folder for user 1\nr2 = root folder for user 2\nS1 = Shared Folder for user 1 and user 2\n+-----------------+  +-----------------+\n|                 |  |                 |\n|         +----+  |  | +------+        |\n|         |r1  |  |  | |r2    |        |\n|         +----+  |  | +--+---+        |\n|    +------+     |  |    |            |\n|    v            |  |    v            |\n| +--+-+          |  | +--+---+        |\n| | S1 |          |  | |S1    |        |\n| +----+          |  | +------+        |\n|   Owner         |  |  Viewer         |\n|                 |  |                 |\n+-----------------+  +-----------------+\n\n\n\n\nRules\n* Each user has only one bookmark root folder, the user is the owner of root folder\n    * bookmarks.objects.filter(root=true, )\n\n\nMethods (pseudocode)\n\n\nGetting root folder for user\n\n\ndef create_get_user_root_bookmark_folder(profile):\n    \n\n    Create or Get user's root folder\n    profile = Profile.objects.first()\n    \n\n    bookmark_entry_query = models.BookmarkEntry.objects.filter(\n                            bookmark_permission__profile=profile,\n                            bookmark_permission__user_type='OWNER',\n                            is_root=True)\n\n\n    if bookmark_entry_query:\n        if len(bookmark_entry_query) \n= 2:\n            print('A USER SHOULD NOT HAVE MORE THAN ONE ROOT FOLDER')\n\n        return bookmark_entry_query[0]\n    else:\n        bookmark_entry = models.BookmarkEntry()\n        bookmark_entry.type = bookmark_entry.FOLDER\n        bookmark_entry.is_root = True\n        bookmark_entry.title = 'ROOT'\n        bookmark_entry.save()\n\n        bookmark_permission = models.BookmarkPermission()\n        bookmark_permission.bookmark=bookmark_entry\n        bookmark_permission.profile=profile\n        bookmark_permission.user_type=models.BookmarkPermission.OWNER\n        bookmark_permission.save()\n\n        return bookmark_entry\n\n\n\n\nGetting first level entries for user\n\n\n\n\n\n\n\nMethods with custom order (integer position field)\n\n\n[Listing,...] = List\n(Type-Title[Listing,...]) = Folder\n\nbigbrother\n[\n  (\n    Shard-F1\n      [1, 2]\n  )\n  (\n      Folder-F2\n      [1]\n  )\n  1\n  2\n]\n\njones\n  [\n    1\n    (\n      Shared-F1\n        [1,2]\n    )\n    3\n  ]\n\n\n\n\n\nTable View for entries\n\n\nusername   | folder_name | listing | position\n---------------------------------------------\nbigbrother (1) | s1          | 1       | 1 (nested order = 7)\nbigbrother (1) | s1          | 2       | 1 (nested order = 8)\n\nbigbrother (1) | f1          | 1       | 2 (nested order?)\nbigbrother (1) | f1          | 4       | 2 (nested order?)\n\nbigbrother (1) | null        | 1       | 3\nbigbrother (1) | null        | 2       | 4\n\njones      (2) | null        | 1       | 1\njones      (2) | s1          | 1       | 1 (nested order = 7)\njones      (2) | s1          | 2       | 1 (nested order = 8)\njones      (2) | null        | 3       | 6\n\n\n\n\n\nMethod 2 - Relational self-reference\n\n\nTable \nentry_profile\n\n\nTable \nentry\n\n\nMethod 3 - Relational fully normalized\n\n\nTables\n\n\nTable `profile`                 |   Table `Listing`\n                                |\nid | username                   |   id | ...\n1  | bigbrother                 |   1  |\n2  | jones                      |   2  |\n                                |   3  |\n                                |\nTable `folder_entry `           |  Table `entry_permission`\n                                |\nid | name | entry               |  id | entry | profile | permission\n1  | S1   | 1                   |  1  | 1     | 1       | owner\n2  | F1   | 2                   |  2  | 1     | 2       | viewer\n                                |\n                                |\nTable `folder_listing_entry`    |    Table `listing_entry`\n                                |    id  | listing | entry\nid | listing | folder | entry   |    1   | 1       | 3\n1  | 1       | 1      | 7       |    2   | 2       | 4\n2  | 2       | 1      | 8       |    3   | 1       | 5\n3  | 1       | 2      | 9       |    4   | 3       | 6\n\n\nTable `entry`\n\nid  | creator (profile)\n1   |  1\n2   |  1\n3   |  1\n4   |  1\n5   |  2\n6   |  2\n7   |  1\n8   |  1\n9   |  2\n\nTable `entry_position`\n\nid | entry | profile | position\n1  | 1     | 1       | 1\n2  | 2     | 1       | 2\n3  | 3     | 1       | 3\n4  | 4     | 1       | 4\n5  | 7     | 1       | 1\n6  | 8     | 1       | 2\n7  | 9     | 1       | 1\n8  | 5     | 2       | 1\n9  | 1     | 2       | 2\n10 | 7     | 2       | 1\n11 | 8     | 2       | 2\n12 | 6     | 2       | 3\n\n\n\n\nMethods to maintain backward compatability\n\n\nMethod 4 - Create V2 API for 3.0 use\n\n\n\n\nlook at method 1\n\n\n\n\nMethod 5 - Create a secondary API for shared folders\n\n\n\n\nThis will leave the current bookmark folder structure intact\n\n\nWill require frontend to call 2 API methods to receive personal and shared folders\n\n\nWill not require a full re-structure of bookmarks and folders from 2.0\n\n\n\n\nReference\n\n\nLinks\n\n\n\n\nhttps://stackoverflow.com/questions/9736548/database-schema-how-the-relationship-can-be-designed-between-user-file-and-fol\n\n\nhttps://doc.owncloud.org/server/latest/developer_manual/core/ocs-share-api.html#ocs-share-api-create-share-response-attributes\n\n\nhttps://docs.datastax.com/en/playlist/doc/java/playlistArchitecture.html\n\n\nhttps://developers.google.com/drive/api/v3/about-files",
            "title": "Shared folders 2018"
        },
        {
            "location": "/features/shared_folders_2018/#business-objective-bookmarks-hud",
            "text": "",
            "title": "Business Objective - Bookmarks (hud)"
        },
        {
            "location": "/features/shared_folders_2018/#terms-and-definitions",
            "text": "bookmark - enabled quick access for listing   concept of shared folder was to make a",
            "title": "Terms and Definitions"
        },
        {
            "location": "/features/shared_folders_2018/#implementation-of-legacy-bookmarks",
            "text": "https://github.com/aml-development/aml-backend/issues/7  https://github.com/aml-development/aml-backend/pull/252",
            "title": "Implementation of Legacy Bookmarks"
        },
        {
            "location": "/features/shared_folders_2018/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/features/shared_folders_2018/#get-user-library",
            "text": "GET /api/self/library HTTP/1.1\nHost: 127.0.0.1:8001\nAuthorization: Basic YmlnYnJvdGhlcjpwYXNzd29yZA==  # bigbrother\n\n[\n    {\n         listing : {\n             id : 169,\n             title :  Tornado ,\n             unique_name :  tornado ,\n             launch_url :  https://en.wikipedia.org/wiki/Tornado ,\n             small_icon : {\n                 url :  http://127.0.0.1:8001/api/image/683/ ,\n                 id : 683,\n                 security_marking :  UNCLASSIFIED \n            },\n             large_icon : {\n                 url :  http://127.0.0.1:8001/api/image/684/ ,\n                 id : 684,\n                 security_marking :  UNCLASSIFIED \n            },\n             banner_icon : {\n                 url :  http://127.0.0.1:8001/api/image/685/ ,\n                 id : 685,\n                 security_marking :  UNCLASSIFIED \n            },\n             owners : [\n                {\n                     id : 1,\n                     user : {\n                         username :  bigbrother \n                    },\n                     display_name :  Big Brother \n                }\n            ]\n        },\n         folder :  Weather ,\n         id : 50,\n         position : 0\n    }, ...\n]",
            "title": "Get User library"
        },
        {
            "location": "/features/shared_folders_2018/#business-objective-shared-bookmarks-aml30-draft-05032018",
            "text": "Add support for share-able folders",
            "title": "Business Objective - Shared Bookmarks (aml3.0 draft - 05/03/2018)"
        },
        {
            "location": "/features/shared_folders_2018/#terms-and-definitions_1",
            "text": "bookmark - can represent a folder or listing  folder bookmark - group of listing bookmarks  shared folder owners - users who own shared folder  listing owners - users who own listing",
            "title": "Terms and Definitions"
        },
        {
            "location": "/features/shared_folders_2018/#ui-interactions",
            "text": "Should show all bookmarks  User management component  Get all users permission for a folder (username, role) ordered by role, username?  Change Role for a person for a folder    Get share-able link",
            "title": "UI Interactions"
        },
        {
            "location": "/features/shared_folders_2018/#requirements",
            "text": "",
            "title": "Requirements"
        },
        {
            "location": "/features/shared_folders_2018/#general",
            "text": "When the folder is updated by any owner, the folder updates are visible to all users after calling api again (refresh)",
            "title": "General"
        },
        {
            "location": "/features/shared_folders_2018/#permissions",
            "text": "Should allow users to share a folder that is maintained by one or more users (owner).  what type of users?    Shared Folder Viewer Should be able to  get a list of bookmarks    Shared Folder Owner should be able to  modify the folder  add other owners  delete delete owners  change permissions  Everything a Shared Folder Viewer can do    Shared Folder Owner should be able to see user management component  Shared Folder Viewer should  not  be able to see user management component",
            "title": "Permissions"
        },
        {
            "location": "/features/shared_folders_2018/#notifications",
            "text": "Send notification for updates to all owners/viewers of shared folder  updates  [ ] Adding user to shared folder  [ ] Removing user from shared folder  [x] Adding listing to shared folder  [x] Removing listing from shared folder  [ ] Changing permissions of a user for shared folder  [x] Removing shared folder",
            "title": "Notifications"
        },
        {
            "location": "/features/shared_folders_2018/#un-categorized",
            "text": "Owners and Viewers are two different user type  The folder should have 'viewers' that can only view, but not edit, the folder, should not see user management component  The UI component, when available, would let the folder creator select users to share to, and set their permissions (similar in the way google sheets/docs sharing works).  We will also maintain the concept of a copied folder, but will also add a true 'shared' folder.  Regular Folder, Duplicate Folder, Shared Folder  are the different types of folder  if user send a shareable link to someone without access to folder,\nshould we send a notification to the owners saying\n\"User requesting access to folder,  allow - denied access\",\nthe user side it would be \"Access Denied - request for access button\"\nor will it be public anyone can view folder?",
            "title": "Un-categorized"
        },
        {
            "location": "/features/shared_folders_2018/#acceptance-criteria",
            "text": "A new type of bookmark folder is available in the backend, that has permissions associated with it (view/edit)",
            "title": "Acceptance Criteria"
        },
        {
            "location": "/features/shared_folders_2018/#api_1",
            "text": "http://www.django-rest-framework.org/api-guide/filtering/#filtering-and-object-lookups",
            "title": "API"
        },
        {
            "location": "/features/shared_folders_2018/#operations",
            "text": "bookmark  create - POST: /api/bookmark - create bookmark listing  list - GET: /api/bookmark/?type=LISTING - list all bookmarks (listing)  bulk update    folder  create - POST /api/bookmark/ - create bookmark folder  lists  - GET: /api/bookmark/?type=FOLDER - list all bookmarks (folders/shared folders)    children  add - PUT : /bookmark/{parentId}/children/{childId} -Adds child to a Folder  move - POST: /bookmark/{toparentId}/children  Move a child from one node to another  delete - DELETE : /bookmark/{parentId}/children/{childId} - Removes the child  list - GET : /bookmark/{id}/children - Lists all children     [\n  {\n     id  : {string}  unique identifier of a bookmark , # integer\n     name  : {string}  user friendly name of a FOLDER , # string, max 256 characters\n     kind  :  LISTING , # literal string,  LISTING ,  can also be  FOLDER \n     modifiedDate  :  {datetime} Last modified date (ISO8601 date with timezone offset),\n     createdDate  : {datetime} First uploaded date (ISO8601 date with timezone offset),\n     parent : {\n       id  : {string}  unique identifier of a bookmark , # integer\n       name  : {string}  user friendly name of a FOLDER , # string, max 256 characters\n       kind  :  FOLDER , # literal string  FOLDER \n    },\n     listing : {  # If the kind is a listing then fill else null\n         id : 169,\n         title :  Tornado ,\n         unique_name :  tornado ,\n         launch_url :  https://en.wikipedia.org/wiki/Tornado ,\n         small_icon : {\n             url :  http://127.0.0.1:8001/api/image/683/ ,\n             id : 683,\n             security_marking :  UNCLASSIFIED \n        },\n         large_icon : {\n             url :  http://127.0.0.1:8001/api/image/684/ ,\n             id : 684,\n             security_marking :  UNCLASSIFIED \n        },\n         banner_icon : {\n             url :  http://127.0.0.1:8001/api/image/685/ ,\n             id : 685,\n             security_marking :  UNCLASSIFIED \n        },\n         owners : [\n            {\n                 id : 1,\n                 user : {\n                     username :  bigbrother \n                },\n                 display_name :  Big Brother \n            }\n        ]\n    }\n  },...\n]  OR  [\n  {\n     id  : {string}  unique identifier of a bookmark , # integer\n     name  : {string}  user friendly name of a FOLDER , # string, max 256 characters\n     kind  :  LISTING , # literal string,  LISTING ,  can also be  FOLDER \n     modifiedDate  :  {datetime} Last modified date (ISO8601 date with timezone offset),\n     createdDate  : {datetime} First uploaded date (ISO8601 date with timezone offset),\n     listing : {  # If the kind is a listing then fill else null\n         id : 169,\n         title :  Tornado ,\n         unique_name :  tornado ,\n         launch_url :  https://en.wikipedia.org/wiki/Tornado ,\n         small_icon : {\n             url :  http://127.0.0.1:8001/api/image/683/ ,\n             id : 683,\n             security_marking :  UNCLASSIFIED \n        },\n         large_icon : {\n             url :  http://127.0.0.1:8001/api/image/684/ ,\n             id : 684,\n             security_marking :  UNCLASSIFIED \n        },\n         banner_icon : {\n             url :  http://127.0.0.1:8001/api/image/685/ ,\n             id : 685,\n             security_marking :  UNCLASSIFIED \n        },\n         owners : [\n            {\n                 id : 1,\n                 user : {\n                     username :  bigbrother \n                },\n                 display_name :  Big Brother \n            }\n        ]\n    },\n    children:[\n      {\n         id  : {string}  unique identifier of a bookmark , # integer\n         name  : {string}  user friendly name of a FOLDER , # string, max 256 characters\n         kind  :  LISTING , # literal string,  LISTING ,  can also be  FOLDER \n         modifiedDate  :  {datetime} Last modified date (ISO8601 date with timezone offset),\n         createdDate  : {datetime} First uploaded date (ISO8601 date with timezone offset),\n         listing : {  # If the kind is a listing then fill else null\n             id : 169,\n             title :  Tornado ,\n             unique_name :  tornado ,\n             launch_url :  https://en.wikipedia.org/wiki/Tornado ,\n             small_icon : {\n                 url :  http://127.0.0.1:8001/api/image/683/ ,\n                 id : 683,\n                 security_marking :  UNCLASSIFIED \n            },\n             large_icon : {\n                 url :  http://127.0.0.1:8001/api/image/684/ ,\n                 id : 684,\n                 security_marking :  UNCLASSIFIED \n            },\n             banner_icon : {\n                 url :  http://127.0.0.1:8001/api/image/685/ ,\n                 id : 685,\n                 security_marking :  UNCLASSIFIED \n            },\n             owners : [\n                {\n                     id : 1,\n                     user : {\n                         username :  bigbrother \n                    },\n                     display_name :  Big Brother \n                }\n            ]\n        },\n        children:[\n\n        ]\n      },......\n    ]\n  },......\n]",
            "title": "Operations"
        },
        {
            "location": "/features/shared_folders_2018/#database-structure",
            "text": "",
            "title": "Database Structure"
        },
        {
            "location": "/features/shared_folders_2018/#existing-tables",
            "text": "Listing  Profile  User",
            "title": "Existing Tables"
        },
        {
            "location": "/features/shared_folders_2018/#methods-without-using-custom-order",
            "text": "",
            "title": "Methods without using custom order"
        },
        {
            "location": "/features/shared_folders_2018/#method-1-relational-self-reference-child-parent-not-using-root-folder",
            "text": "",
            "title": "Method 1 - Relational self-reference (child-parent not using root folder)"
        },
        {
            "location": "/features/shared_folders_2018/#models",
            "text": "class BookmarkEntry(models.Model):\n    bookmark_parent = models.ForeignKey('BookmarkEntry', null=True, blank=True)\n    title = models.CharField(max_length=255)\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    listing = models.ForeignKey('Listing', related_name='listing_entries', null=True, blank=True)\n\n    FOLDER = 'FOLDER'\n    LISTING = 'LISTING'\n\n    TYPE_CHOICES = (\n        (FOLDER, 'FOLDER'),\n        (LISTING, 'LISTING'),\n    )\n    type = models.CharField(max_length=255, choices=TYPE_CHOICES, default=FOLDER)\n\n    creator = models.ForeignKey('Profile')\n\nclass BookmarkPermission(models.Model):\n    bookmark = models.ForeignKey('BookmarkEntry', related_name='bookmark_permission')\n    profile = models.ForeignKey('Profile')\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    OWNER = 'OWNER'\n    VIEWER = 'VIEWER'\n\n    USER_TYPE_CHOICES = (\n        (OWNER, 'OWNER'),\n        (VIEWER, 'VIEWER'),\n    )\n    user_type = models.CharField(max_length=255, choices=USER_TYPE_CHOICES, default=VIEWER)",
            "title": "Models"
        },
        {
            "location": "/features/shared_folders_2018/#methods-pseudocode",
            "text": "",
            "title": "Methods (pseudocode)"
        },
        {
            "location": "/features/shared_folders_2018/#getting-root-folder-for-user",
            "text": "",
            "title": "Getting root folder for user"
        },
        {
            "location": "/features/shared_folders_2018/#getting-first-level-entries-for-user",
            "text": "",
            "title": "Getting first level entries for user"
        },
        {
            "location": "/features/shared_folders_2018/#adding-a-new-listing-under-a-folder",
            "text": "",
            "title": "Adding a new listing under a folder"
        },
        {
            "location": "/features/shared_folders_2018/#adding-new-user-as-a-viewer-to-a-shared-folder",
            "text": "",
            "title": "Adding new user as a viewer to a shared folder"
        },
        {
            "location": "/features/shared_folders_2018/#removing-a-user-from-shared-folder-list",
            "text": "",
            "title": "Removing a user from shared folder list"
        },
        {
            "location": "/features/shared_folders_2018/#method-2-relational-self-reference-child-parent-using-root-folder",
            "text": "",
            "title": "Method 2 - Relational self-reference (child-parent using root folder)"
        },
        {
            "location": "/features/shared_folders_2018/#models_1",
            "text": "class BookmarkEntry(models.Model):\n    bookmark_parent = models.ForeignKey('BookmarkEntry', null=True, blank=True)\n    # bookmark_parents = models.ManyToManyField('BookmarkEntry', null=True, blank=True)\n    # bookmark_parents m2mField is needed becuause of bookmark_parent_relationships\n    title = models.CharField(max_length=255)\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    listing = models.ForeignKey('Listing', related_name='listing_entries', null=True, blank=True)\n\n    is_root = models.BooleanField(default=False)\n\n    FOLDER = 'FOLDER'\n    LISTING = 'LISTING'\n\n    TYPE_CHOICES = (\n        (FOLDER, 'FOLDER'),\n        (LISTING, 'LISTING'),\n    )\n    type = models.CharField(max_length=255, choices=TYPE_CHOICES, default=FOLDER)\n\n\nclass BookmarkPermission(models.Model):\n    bookmark = models.ForeignKey('BookmarkEntry', related_name='bookmark_permission')\n    profile = models.ForeignKey('Profile')\n\n    created_date = models.DateTimeField(default=utils.get_now_utc)\n    modified_date = models.DateTimeField(default=utils.get_now_utc)\n\n    OWNER = 'OWNER'\n    VIEWER = 'VIEWER'\n\n    USER_TYPE_CHOICES = (\n        (OWNER, 'OWNER'),\n        (VIEWER, 'VIEWER'),\n    )\n    user_type = models.CharField(max_length=255, choices=USER_TYPE_CHOICES, default=VIEWER)   bookmark_parent_relationships (m2m table - storage of child-parent relationships)  id (integer)  bookmark (foreign_key to bookmarks id)  parent_bookmark (foreign_key to bookmarks id, 1 bookmark can have many parents)     when would  bookmark_parent_relationships  table be good to use?  r1 = root folder for user 1\nr2 = root folder for user 2\nS1 = Shared Folder for user 1 and user 2\n+-----------------+  +-----------------+\n|                 |  |                 |\n|         +----+  |  | +------+        |\n|         |r1  |  |  | |r2    |        |\n|         +----+  |  | +--+---+        |\n|    +------+     |  |    |            |\n|    v            |  |    v            |\n| +--+-+          |  | +--+---+        |\n| | S1 |          |  | |S1    |        |\n| +----+          |  | +------+        |\n|   Owner         |  |  Viewer         |\n|                 |  |                 |\n+-----------------+  +-----------------+  Rules\n* Each user has only one bookmark root folder, the user is the owner of root folder\n    * bookmarks.objects.filter(root=true, )",
            "title": "Models"
        },
        {
            "location": "/features/shared_folders_2018/#methods-pseudocode_1",
            "text": "",
            "title": "Methods (pseudocode)"
        },
        {
            "location": "/features/shared_folders_2018/#getting-root-folder-for-user_1",
            "text": "def create_get_user_root_bookmark_folder(profile):\n     \n    Create or Get user's root folder\n    profile = Profile.objects.first()\n     \n    bookmark_entry_query = models.BookmarkEntry.objects.filter(\n                            bookmark_permission__profile=profile,\n                            bookmark_permission__user_type='OWNER',\n                            is_root=True)\n\n\n    if bookmark_entry_query:\n        if len(bookmark_entry_query)  = 2:\n            print('A USER SHOULD NOT HAVE MORE THAN ONE ROOT FOLDER')\n\n        return bookmark_entry_query[0]\n    else:\n        bookmark_entry = models.BookmarkEntry()\n        bookmark_entry.type = bookmark_entry.FOLDER\n        bookmark_entry.is_root = True\n        bookmark_entry.title = 'ROOT'\n        bookmark_entry.save()\n\n        bookmark_permission = models.BookmarkPermission()\n        bookmark_permission.bookmark=bookmark_entry\n        bookmark_permission.profile=profile\n        bookmark_permission.user_type=models.BookmarkPermission.OWNER\n        bookmark_permission.save()\n\n        return bookmark_entry",
            "title": "Getting root folder for user"
        },
        {
            "location": "/features/shared_folders_2018/#getting-first-level-entries-for-user_1",
            "text": "",
            "title": "Getting first level entries for user"
        },
        {
            "location": "/features/shared_folders_2018/#methods-with-custom-order-integer-position-field",
            "text": "[Listing,...] = List\n(Type-Title[Listing,...]) = Folder\n\nbigbrother\n[\n  (\n    Shard-F1\n      [1, 2]\n  )\n  (\n      Folder-F2\n      [1]\n  )\n  1\n  2\n]\n\njones\n  [\n    1\n    (\n      Shared-F1\n        [1,2]\n    )\n    3\n  ]  Table View for entries  username   | folder_name | listing | position\n---------------------------------------------\nbigbrother (1) | s1          | 1       | 1 (nested order = 7)\nbigbrother (1) | s1          | 2       | 1 (nested order = 8)\n\nbigbrother (1) | f1          | 1       | 2 (nested order?)\nbigbrother (1) | f1          | 4       | 2 (nested order?)\n\nbigbrother (1) | null        | 1       | 3\nbigbrother (1) | null        | 2       | 4\n\njones      (2) | null        | 1       | 1\njones      (2) | s1          | 1       | 1 (nested order = 7)\njones      (2) | s1          | 2       | 1 (nested order = 8)\njones      (2) | null        | 3       | 6",
            "title": "Methods with custom order (integer position field)"
        },
        {
            "location": "/features/shared_folders_2018/#method-2-relational-self-reference",
            "text": "Table  entry_profile  Table  entry",
            "title": "Method 2 - Relational self-reference"
        },
        {
            "location": "/features/shared_folders_2018/#method-3-relational-fully-normalized",
            "text": "Tables  Table `profile`                 |   Table `Listing`\n                                |\nid | username                   |   id | ...\n1  | bigbrother                 |   1  |\n2  | jones                      |   2  |\n                                |   3  |\n                                |\nTable `folder_entry `           |  Table `entry_permission`\n                                |\nid | name | entry               |  id | entry | profile | permission\n1  | S1   | 1                   |  1  | 1     | 1       | owner\n2  | F1   | 2                   |  2  | 1     | 2       | viewer\n                                |\n                                |\nTable `folder_listing_entry`    |    Table `listing_entry`\n                                |    id  | listing | entry\nid | listing | folder | entry   |    1   | 1       | 3\n1  | 1       | 1      | 7       |    2   | 2       | 4\n2  | 2       | 1      | 8       |    3   | 1       | 5\n3  | 1       | 2      | 9       |    4   | 3       | 6\n\n\nTable `entry`\n\nid  | creator (profile)\n1   |  1\n2   |  1\n3   |  1\n4   |  1\n5   |  2\n6   |  2\n7   |  1\n8   |  1\n9   |  2\n\nTable `entry_position`\n\nid | entry | profile | position\n1  | 1     | 1       | 1\n2  | 2     | 1       | 2\n3  | 3     | 1       | 3\n4  | 4     | 1       | 4\n5  | 7     | 1       | 1\n6  | 8     | 1       | 2\n7  | 9     | 1       | 1\n8  | 5     | 2       | 1\n9  | 1     | 2       | 2\n10 | 7     | 2       | 1\n11 | 8     | 2       | 2\n12 | 6     | 2       | 3",
            "title": "Method 3 - Relational fully normalized"
        },
        {
            "location": "/features/shared_folders_2018/#methods-to-maintain-backward-compatability",
            "text": "",
            "title": "Methods to maintain backward compatability"
        },
        {
            "location": "/features/shared_folders_2018/#method-4-create-v2-api-for-30-use",
            "text": "look at method 1",
            "title": "Method 4 - Create V2 API for 3.0 use"
        },
        {
            "location": "/features/shared_folders_2018/#method-5-create-a-secondary-api-for-shared-folders",
            "text": "This will leave the current bookmark folder structure intact  Will require frontend to call 2 API methods to receive personal and shared folders  Will not require a full re-structure of bookmarks and folders from 2.0",
            "title": "Method 5 - Create a secondary API for shared folders"
        },
        {
            "location": "/features/shared_folders_2018/#reference",
            "text": "",
            "title": "Reference"
        },
        {
            "location": "/features/shared_folders_2018/#links",
            "text": "https://stackoverflow.com/questions/9736548/database-schema-how-the-relationship-can-be-designed-between-user-file-and-fol  https://doc.owncloud.org/server/latest/developer_manual/core/ocs-share-api.html#ocs-share-api-create-share-response-attributes  https://docs.datastax.com/en/playlist/doc/java/playlistArchitecture.html  https://developers.google.com/drive/api/v3/about-files",
            "title": "Links"
        },
        {
            "location": "/features/smart_search/",
            "text": "Business Objective\n\n\n(From Ticket https://github.com/aml-development/aml-backend/issues/192)\n\n\nAbility to do better search\n\n\n\nRequirement came from https://github.com/aml-development/aml-documentation/wiki/Iteration-53#uiux\n\n\nResearched Solutions\n\n\nWe researched 3 possible solutions before deciding on Elasticsearch:    \n\n\nSolution 1: Using Postgres\n  \n\nhttp://www.postgresonline.com/journal/archives/169-Fuzzy-string-matching-with-Trigram-and-Trigraphs.html\nhttps://github.com/jleivaizq/djorm-ext-pgtrgm\n\n\nSolution 2: Using Elasticsearch\n  \n\n\nElasticsearch\n\nhttps://qbox.io/blog/how-to-elasticsearch-python-django-part1\n\n\nSteps:\n\n Add data to the elasticsearch index in bulk.\n\n Add some frontend and write some queries.\n* Make the index updatable when new data is added, updated or deleted.\n\n\nSolution 3: Using Whoosh (Python Indexing) Custom REST implementation\n  \n\n\nwhoosh\n\n\nCurrent Search\n\n\nCurrent Ablities:\n\n\n\n\nAuto complete\n\n\nUsing https://twitter.github.io/typeahead.js/ and in the metadata endpoint send a array of all the apps the user can see\n\n\nSQL LIKE\n\n\n\n\nCurrent Implementation:\n\n\n\n\nSearch_fields: title, description, description_short, tags__name\n\n\nFiltered by category, agency, listing_types\n\n\nSearch is currently using Postgres to get search results (list of listings) from database.\n\n\nFor every call, it loops through every listing to make sure the user has access to listing using the security marking, the results of the call to see if user has access is cached.\n\n\nsystem_has_access_control(username, i.security_marking):\n in aml/amlcenter/models.py/AccessControlListingManager/for_user\n\n\nIt currently takes 0.8-2.5 Seconds to get results with warm Redis cache using dummy data.\n\n\n\n\nExample Calls:\n\n\n/api/listings/search/?search=Air+Mail\noffset=0\nlimit=24\n/api/listings/search/?search=Air+Mai\noffset=0\nlimit=24\ntype=web+application\ntype=widget\nagency=Minitrue\n\n\n\n\nCode of Interest:\n\n\nrouter.register(r'listings/search', views.ListingSearchViewSet, base_name='listingssearch')\n\n\n\n\nNextGen Search\n\n\nNextGen Ablities:\n\n\n\n\nMultifield search\n\n\nhttps://www.elastic.co/guide/en/elasticsearch/guide/current/multi-field-search.html\n\n\nFuzzy matching\n\n\nAuto complete\n\n\nhttps://www.elastic.co/guide/en/elasticsearch/guide/current/_index_time_search_as_you_type.html\n\n\nRelevance search (accuracy of results)\n\n\nhttp://opensourceconnections.com/blog/2014/06/10/what-is-search-relevancy/\n\n\nhttps://www.elastic.co/guide/en/elasticsearch/guide/current/controlling-relevance.html\n\n\nPerformance\n\n\n\n\nNextGen Requirements:\n\n\n\n\nUsers shall be able to search for listings' title, description, description_short, and tags and filter by category, agency, and listing types for the listings they are authorized to see\n\n\nUsers shall be able to search listings that they are authorized to see while user types in keyboard (autocomplete)\n\n\nUsers shall be able to search for misspelled similar listings that they are authorized to see (fuzzy matching)\n\n\nExample:  When user types 'Armail' the result coming back shall contain 'Airmail'\n\n\n\n\nRestrictions/Requirements\n\n\n\n\nAccess Results can only be cached 24 hours\n\n\nSearch Storage must have authentication security\n\n\nShall not include delete apps or disabled apps\n\n\n\n\nProposed Stories/Tasks\n\n\nStory:\n  \n\nAs a member of the Apps Mall Team, I want to understand the requirements for the new search feature so that I can contribute to the project    \n\n\nAcceptance Criteria:\n\nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed\n\n\nTasks:\n  \n\n\n Knowlege Task - Each Team Member shall have understanding on what Elasticsearch is used for, the purpose it serves, and the application that appmall will be using it for, and understand the following Elasticsearch concepts:\n * Mapping\n * Indexes\n * Search API\n * Query API\n * Document API\n * Document Format\n * Nested Objects vs Arrays\n     * https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-objects.html\n\n Knowledge Task - Each Team Member shall have understanding on how Elasticsearch API works with Python\n\n Knowlege Task - Each Team Member shall understand data modeling\n * https://www.elastic.co/guide/en/elasticsearch/guide/current/modeling-your-data.html\n\n Knowlege Task - Each Team Member shall read 4 parts of the 'elasticsearch-python-django-series' from qbox\n * https://qbox.io/blog/series/elasticsearch-python-django-series\n * https://qbox.io/blog/elasticsearch-and-django-bulk-index\n\n\nStory:\n  \n\nAs a user I want to be able to retrieve search results faster than the current bench marks.     \n\n\nAcceptance Criteria:\n\nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed\n\n\nTasks:\n  \n\n\n Coding Task - Team Member shall prepare code to increase the performance of checking listing authorization\n\n\n Coding Task - Team Member shall update the backend to not return the full listing information when searching (maybe)\n* Coding Task - Team member shall ensure that access results shall only be cached for 24 hours\n\n\nStory:\n  \n\nAs a user I want to see results ordered by relevance so that I can find the app I am looking for faster and easier.\n\n\nAcceptance Criteria:\n\nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed\n\n\nTasks:\n\n\n Devops Task - Team Member shall install elastic search library\n\n Coding task - Team member shall ensure that elastic search has authentication security\n\n Coding Task - Team member shall ensure that deleted apps and disabled apps are not included in results (possibly not included in elastic search?)\n\n Coding Task - Team member shall update backend to use elastic search library for type-ahead and regular search\n* Knowledge Task - Team member shall verify that the front-end does not need to be updated\n\n\nStory:\n  \n\nAs a user I want to be able to see listings that are similar to what I searched for so that if I misspell a word I will still be able to easily find the application I was looking for\n\n\nAcceptance Criteria:\n\nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed\n\n\nTasks:\n\n\n Coding Task - Team member shall update backend to provide fuzzy matching results\n\n Coding Task - Team member shall update the frontend to suggest alternate search terms (maybe)\n\n\nStrategies\n\n\n\n\nFigure out a way that it will not have to ' loops through every listing to make sure the user has access'\n\n\nDo a distinct for all listings' security markings, get a list of it, loop though list to check for user's access, save that in redis,  when searching do a inclusion of listings that have the security markings user's can access\n\n\n\n\nLearning Resources\n\n\n\n\nhttps://qbox.io/blog/series/elasticsearch-python-django-series\n\n\nhttps://qbox.io/blog/elasticsearch-and-django-bulk-index\n\n\nhttps://www.elastic.co/guide/en/elasticsearch/guide/current/complex-core-fields.html\n\n\n\n\nRelevant Code\n\n\n When a change/delete happens to a listing the hooks in models.py can be use to update the documents.\n\n Does Search response really need every field in the Serializer in the database\n\n\naml-center search relevant code\n\nhttps://github.com/aml-development/aml-center/blob/master/app/js/webapi/Listing.js\nhttps://github.com/aml-development/aml-center/blob/master/app/js/components/discovery/index.jsx\n\n\nmodels.py\n\n\n@receiver(post_save, sender=Listing)\ndef post_save_listing(sender, instance, created, **kwargs):\n    cache.delete_pattern(\nstorefront-*\n)\n    cache.delete_pattern(\nlibrary_self-*\n)\n\n@receiver(post_delete, sender=Listing)\ndef post_delete_listing(sender, instance, **kwargs):\n    cache.delete_pattern(\nstorefront-*\n)\n    cache.delete_pattern(\nlibrary_self-*\n)\n\n\n\n\nOR\n\noverriding the save and delete function of the model\n\n\nRequest/Response For Search Results\n\n\nGET /api/listings/search/?search=Air+Mail\namp;offset=0\namp;limit=24 HTTP/1.1\nAuthorization: Basic YmlnYnJvdGhlcjpwYXNzd29yZA==  \n BigBrother\nContent-Type: application/json\n\n\n\n\nResponse:\n\n\n{\n  \ncount\n: 30,\n  \nnext\n: \nhttp://127.0.0.1:8001/api/listings/search/?limit=24\noffset=24\nsearch=Air+Mail\n,\n  \nprevious\n: null,\n  \nresults\n: [\n    {\n      \nid\n: 1,\n      \nis_bookmarked\n: true,\n      \nscreenshots\n: [\n        {\n          \nsmall_image\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/10/\n,\n            \nid\n: 10,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n          },\n          \nlarge_image\n: {\n            \nurl\n: \nhttp://127.0.0.1:8001/api/image/11/\n,\n            \nid\n: 11,\n            \nsecurity_marking\n: \nUNCLASSIFIED\n\n          }\n        }\n      ],\n      \ndoc_urls\n: [\n        {\n          \nname\n: \nwiki\n,\n          \nurl\n: \nhttp://www.google.com/wiki\n\n        },\n        {\n          \nname\n: \nguide\n,\n          \nurl\n: \nhttp://www.google.com/guide\n\n        }\n      ],\n      \nowners\n: [\n        {\n          \nid\n: 4,\n          \nuser\n: {\n            \nusername\n: \nwsmith\n\n          },\n          \ndisplay_name\n: \nWinston Smith\n\n        }\n      ],\n      \ncategories\n: [\n        {\n          \ntitle\n: \nCommunication\n,\n          \ndescription\n: \nMoving info between people and things\n\n        },\n        {\n          \ntitle\n: \nProductivity\n,\n          \ndescription\n: \nDo more in less time\n\n        }\n      ],\n      \ntags\n: [\n        {\n          \nname\n: \ndemo\n\n        },\n        {\n          \nname\n: \nexample\n\n        },\n        {\n          \nname\n: \ntag_0\n\n        }\n      ],\n      \ncontacts\n: [\n        {\n          \nid\n: 1,\n          \ncontact_type\n: {\n            \nname\n: \nCivillian\n\n          },\n          \nsecure_phone\n: null,\n          \nunsecure_phone\n: \n321-123-7894\n,\n          \nemail\n: \nosha@stark.com\n,\n          \nname\n: \nOsha\n,\n          \norganization\n: \nHouse Stark\n\n        },\n        {\n          \nid\n: 3,\n          \ncontact_type\n: {\n            \nname\n: \nMilitary\n\n          },\n          \nsecure_phone\n: null,\n          \nunsecure_phone\n: \n222-324-3846\n,\n          \nemail\n: \nbrienne@stark.com\n,\n          \nname\n: \nBrienne Tarth\n,\n          \norganization\n: \nHouse Stark\n\n        }\n      ],\n      \nintents\n: [],\n      \nsmall_icon\n: {\n        \nurl\n: \nhttp://127.0.0.1:8001/api/image/6/\n,\n        \nid\n: 6,\n        \nsecurity_marking\n: \nUNCLASSIFIED\n\n      },\n      \nlarge_icon\n: {\n        \nurl\n: \nhttp://127.0.0.1:8001/api/image/7/\n,\n        \nid\n: 7,\n        \nsecurity_marking\n: \nUNCLASSIFIED\n\n      },\n      \nbanner_icon\n: {\n        \nurl\n: \nhttp://127.0.0.1:8001/api/image/8/\n,\n        \nid\n: 8,\n        \nsecurity_marking\n: \nUNCLASSIFIED\n\n      },\n      \nlarge_banner_icon\n: {\n        \nurl\n: \nhttp://127.0.0.1:8001/api/image/9/\n,\n        \nid\n: 9,\n        \nsecurity_marking\n: \nUNCLASSIFIED\n\n      },\n      \nagency\n: {\n        \ntitle\n: \nMinistry of Truth\n,\n        \nshort_name\n: \nMinitrue\n\n      },\n      \nlast_activity\n: {\n        \naction\n: \nAPPROVED\n,\n        \nactivity_date\n: \n2016-08-26T16:49:28.106798Z\n,\n        \ndescription\n: null,\n        \nauthor\n: {\n          \nid\n: 4,\n          \nuser\n: {\n            \nusername\n: \nwsmith\n,\n            \nemail\n: \nwsmith@oceania.gov\n\n          },\n          \ndisplay_name\n: \nWinston Smith\n,\n          \ndn\n: \nWinston Smith wsmith\n\n        },\n        \nlisting\n: {\n          \nunique_name\n: \naml.test.air_mail\n,\n          \ntitle\n: \nAir Mail\n,\n          \nid\n: 1,\n          \nagency\n: {\n            \ntitle\n: \nMinistry of Truth\n,\n            \nshort_name\n: \nMinitrue\n\n          },\n          \nsmall_icon\n: \nhttp://127.0.0.1:8001/api/image/6/\n,\n          \nis_deleted\n: false\n        },\n        \nchange_details\n: []\n      },\n      \ncurrent_rejection\n: null,\n      \nlisting_type\n: {\n        \ntitle\n: \nweb application\n\n      },\n      \ntitle\n: \nAir Mail\n,\n      \napproved_date\n: \n2016-08-26T16:49:28.414100Z\n,\n      \nedited_date\n: \n2016-08-26T16:49:28.414130Z\n,\n      \ndescription\n: \nSends mail via air\n,\n      \nlaunch_url\n: \nhttps://localhost:8443/demo_apps/centerSampleListings/airMail/index.html\n,\n      \nversion_name\n: \n1.0.0\n,\n      \nunique_name\n: \naml.test.air_mail\n,\n      \nwhat_is_new\n: \nNothing really new here\n,\n      \ndescription_short\n: \nSends airmail\n,\n      \nrequirements\n: \nNone\n,\n      \napproval_status\n: \nAPPROVED\n,\n      \nis_enabled\n: true,\n      \nis_featured\n: true,\n      \nis_deleted\n: false,\n      \navg_rate\n: 3,\n      \ntotal_votes\n: 3,\n      \ntotal_rate5\n: 1,\n      \ntotal_rate4\n: 0,\n      \ntotal_rate3\n: 1,\n      \ntotal_rate2\n: 0,\n      \ntotal_rate1\n: 1,\n      \ntotal_reviews\n: 3,\n      \niframe_compatible\n: false,\n      \nsecurity_marking\n: \nUNCLASSIFIED\n,\n      \nis_private\n: false,\n      \nrequired_listings\n: null\n    },\n    ....\n  ]\n}",
            "title": "Smart search"
        },
        {
            "location": "/features/smart_search/#business-objective",
            "text": "(From Ticket https://github.com/aml-development/aml-backend/issues/192)  Ability to do better search  Requirement came from https://github.com/aml-development/aml-documentation/wiki/Iteration-53#uiux",
            "title": "Business Objective"
        },
        {
            "location": "/features/smart_search/#researched-solutions",
            "text": "We researched 3 possible solutions before deciding on Elasticsearch:      Solution 1: Using Postgres    \nhttp://www.postgresonline.com/journal/archives/169-Fuzzy-string-matching-with-Trigram-and-Trigraphs.html\nhttps://github.com/jleivaizq/djorm-ext-pgtrgm  Solution 2: Using Elasticsearch     Elasticsearch \nhttps://qbox.io/blog/how-to-elasticsearch-python-django-part1  Steps:  Add data to the elasticsearch index in bulk.  Add some frontend and write some queries.\n* Make the index updatable when new data is added, updated or deleted.  Solution 3: Using Whoosh (Python Indexing) Custom REST implementation     whoosh",
            "title": "Researched Solutions"
        },
        {
            "location": "/features/smart_search/#current-search",
            "text": "",
            "title": "Current Search"
        },
        {
            "location": "/features/smart_search/#current-ablities",
            "text": "Auto complete  Using https://twitter.github.io/typeahead.js/ and in the metadata endpoint send a array of all the apps the user can see  SQL LIKE",
            "title": "Current Ablities:"
        },
        {
            "location": "/features/smart_search/#current-implementation",
            "text": "Search_fields: title, description, description_short, tags__name  Filtered by category, agency, listing_types  Search is currently using Postgres to get search results (list of listings) from database.  For every call, it loops through every listing to make sure the user has access to listing using the security marking, the results of the call to see if user has access is cached.  system_has_access_control(username, i.security_marking):  in aml/amlcenter/models.py/AccessControlListingManager/for_user  It currently takes 0.8-2.5 Seconds to get results with warm Redis cache using dummy data.   Example Calls:  /api/listings/search/?search=Air+Mail offset=0 limit=24\n/api/listings/search/?search=Air+Mai offset=0 limit=24 type=web+application type=widget agency=Minitrue  Code of Interest:  router.register(r'listings/search', views.ListingSearchViewSet, base_name='listingssearch')",
            "title": "Current Implementation:"
        },
        {
            "location": "/features/smart_search/#nextgen-search",
            "text": "",
            "title": "NextGen Search"
        },
        {
            "location": "/features/smart_search/#nextgen-ablities",
            "text": "Multifield search  https://www.elastic.co/guide/en/elasticsearch/guide/current/multi-field-search.html  Fuzzy matching  Auto complete  https://www.elastic.co/guide/en/elasticsearch/guide/current/_index_time_search_as_you_type.html  Relevance search (accuracy of results)  http://opensourceconnections.com/blog/2014/06/10/what-is-search-relevancy/  https://www.elastic.co/guide/en/elasticsearch/guide/current/controlling-relevance.html  Performance",
            "title": "NextGen Ablities:"
        },
        {
            "location": "/features/smart_search/#nextgen-requirements",
            "text": "Users shall be able to search for listings' title, description, description_short, and tags and filter by category, agency, and listing types for the listings they are authorized to see  Users shall be able to search listings that they are authorized to see while user types in keyboard (autocomplete)  Users shall be able to search for misspelled similar listings that they are authorized to see (fuzzy matching)  Example:  When user types 'Armail' the result coming back shall contain 'Airmail'",
            "title": "NextGen Requirements:"
        },
        {
            "location": "/features/smart_search/#restrictionsrequirements",
            "text": "Access Results can only be cached 24 hours  Search Storage must have authentication security  Shall not include delete apps or disabled apps",
            "title": "Restrictions/Requirements"
        },
        {
            "location": "/features/smart_search/#proposed-storiestasks",
            "text": "Story:    \nAs a member of the Apps Mall Team, I want to understand the requirements for the new search feature so that I can contribute to the project      Acceptance Criteria: \nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed  Tasks:      Knowlege Task - Each Team Member shall have understanding on what Elasticsearch is used for, the purpose it serves, and the application that appmall will be using it for, and understand the following Elasticsearch concepts:\n * Mapping\n * Indexes\n * Search API\n * Query API\n * Document API\n * Document Format\n * Nested Objects vs Arrays\n     * https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-objects.html  Knowledge Task - Each Team Member shall have understanding on how Elasticsearch API works with Python  Knowlege Task - Each Team Member shall understand data modeling\n * https://www.elastic.co/guide/en/elasticsearch/guide/current/modeling-your-data.html  Knowlege Task - Each Team Member shall read 4 parts of the 'elasticsearch-python-django-series' from qbox\n * https://qbox.io/blog/series/elasticsearch-python-django-series\n * https://qbox.io/blog/elasticsearch-and-django-bulk-index  Story:    \nAs a user I want to be able to retrieve search results faster than the current bench marks.       Acceptance Criteria: \nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed  Tasks:      Coding Task - Team Member shall prepare code to increase the performance of checking listing authorization   Coding Task - Team Member shall update the backend to not return the full listing information when searching (maybe)\n* Coding Task - Team member shall ensure that access results shall only be cached for 24 hours  Story:    \nAs a user I want to see results ordered by relevance so that I can find the app I am looking for faster and easier.  Acceptance Criteria: \nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed  Tasks:   Devops Task - Team Member shall install elastic search library  Coding task - Team member shall ensure that elastic search has authentication security  Coding Task - Team member shall ensure that deleted apps and disabled apps are not included in results (possibly not included in elastic search?)  Coding Task - Team member shall update backend to use elastic search library for type-ahead and regular search\n* Knowledge Task - Team member shall verify that the front-end does not need to be updated  Story:    \nAs a user I want to be able to see listings that are similar to what I searched for so that if I misspell a word I will still be able to easily find the application I was looking for  Acceptance Criteria: \nTeam member will review and comprehend wiki page documention - https://github.com/aml-development/aml-documentation/wiki/Smart-Search-(2017)\nFor each task, individual puts a thumbs up once completed  Tasks:   Coding Task - Team member shall update backend to provide fuzzy matching results  Coding Task - Team member shall update the frontend to suggest alternate search terms (maybe)",
            "title": "Proposed Stories/Tasks"
        },
        {
            "location": "/features/smart_search/#strategies",
            "text": "Figure out a way that it will not have to ' loops through every listing to make sure the user has access'  Do a distinct for all listings' security markings, get a list of it, loop though list to check for user's access, save that in redis,  when searching do a inclusion of listings that have the security markings user's can access",
            "title": "Strategies"
        },
        {
            "location": "/features/smart_search/#learning-resources",
            "text": "https://qbox.io/blog/series/elasticsearch-python-django-series  https://qbox.io/blog/elasticsearch-and-django-bulk-index  https://www.elastic.co/guide/en/elasticsearch/guide/current/complex-core-fields.html   Relevant Code   When a change/delete happens to a listing the hooks in models.py can be use to update the documents.  Does Search response really need every field in the Serializer in the database  aml-center search relevant code \nhttps://github.com/aml-development/aml-center/blob/master/app/js/webapi/Listing.js\nhttps://github.com/aml-development/aml-center/blob/master/app/js/components/discovery/index.jsx  models.py  @receiver(post_save, sender=Listing)\ndef post_save_listing(sender, instance, created, **kwargs):\n    cache.delete_pattern( storefront-* )\n    cache.delete_pattern( library_self-* )\n\n@receiver(post_delete, sender=Listing)\ndef post_delete_listing(sender, instance, **kwargs):\n    cache.delete_pattern( storefront-* )\n    cache.delete_pattern( library_self-* )  OR \noverriding the save and delete function of the model  Request/Response For Search Results  GET /api/listings/search/?search=Air+Mail amp;offset=0 amp;limit=24 HTTP/1.1\nAuthorization: Basic YmlnYnJvdGhlcjpwYXNzd29yZA==    BigBrother\nContent-Type: application/json  Response:  {\n   count : 30,\n   next :  http://127.0.0.1:8001/api/listings/search/?limit=24 offset=24 search=Air+Mail ,\n   previous : null,\n   results : [\n    {\n       id : 1,\n       is_bookmarked : true,\n       screenshots : [\n        {\n           small_image : {\n             url :  http://127.0.0.1:8001/api/image/10/ ,\n             id : 10,\n             security_marking :  UNCLASSIFIED \n          },\n           large_image : {\n             url :  http://127.0.0.1:8001/api/image/11/ ,\n             id : 11,\n             security_marking :  UNCLASSIFIED \n          }\n        }\n      ],\n       doc_urls : [\n        {\n           name :  wiki ,\n           url :  http://www.google.com/wiki \n        },\n        {\n           name :  guide ,\n           url :  http://www.google.com/guide \n        }\n      ],\n       owners : [\n        {\n           id : 4,\n           user : {\n             username :  wsmith \n          },\n           display_name :  Winston Smith \n        }\n      ],\n       categories : [\n        {\n           title :  Communication ,\n           description :  Moving info between people and things \n        },\n        {\n           title :  Productivity ,\n           description :  Do more in less time \n        }\n      ],\n       tags : [\n        {\n           name :  demo \n        },\n        {\n           name :  example \n        },\n        {\n           name :  tag_0 \n        }\n      ],\n       contacts : [\n        {\n           id : 1,\n           contact_type : {\n             name :  Civillian \n          },\n           secure_phone : null,\n           unsecure_phone :  321-123-7894 ,\n           email :  osha@stark.com ,\n           name :  Osha ,\n           organization :  House Stark \n        },\n        {\n           id : 3,\n           contact_type : {\n             name :  Military \n          },\n           secure_phone : null,\n           unsecure_phone :  222-324-3846 ,\n           email :  brienne@stark.com ,\n           name :  Brienne Tarth ,\n           organization :  House Stark \n        }\n      ],\n       intents : [],\n       small_icon : {\n         url :  http://127.0.0.1:8001/api/image/6/ ,\n         id : 6,\n         security_marking :  UNCLASSIFIED \n      },\n       large_icon : {\n         url :  http://127.0.0.1:8001/api/image/7/ ,\n         id : 7,\n         security_marking :  UNCLASSIFIED \n      },\n       banner_icon : {\n         url :  http://127.0.0.1:8001/api/image/8/ ,\n         id : 8,\n         security_marking :  UNCLASSIFIED \n      },\n       large_banner_icon : {\n         url :  http://127.0.0.1:8001/api/image/9/ ,\n         id : 9,\n         security_marking :  UNCLASSIFIED \n      },\n       agency : {\n         title :  Ministry of Truth ,\n         short_name :  Minitrue \n      },\n       last_activity : {\n         action :  APPROVED ,\n         activity_date :  2016-08-26T16:49:28.106798Z ,\n         description : null,\n         author : {\n           id : 4,\n           user : {\n             username :  wsmith ,\n             email :  wsmith@oceania.gov \n          },\n           display_name :  Winston Smith ,\n           dn :  Winston Smith wsmith \n        },\n         listing : {\n           unique_name :  aml.test.air_mail ,\n           title :  Air Mail ,\n           id : 1,\n           agency : {\n             title :  Ministry of Truth ,\n             short_name :  Minitrue \n          },\n           small_icon :  http://127.0.0.1:8001/api/image/6/ ,\n           is_deleted : false\n        },\n         change_details : []\n      },\n       current_rejection : null,\n       listing_type : {\n         title :  web application \n      },\n       title :  Air Mail ,\n       approved_date :  2016-08-26T16:49:28.414100Z ,\n       edited_date :  2016-08-26T16:49:28.414130Z ,\n       description :  Sends mail via air ,\n       launch_url :  https://localhost:8443/demo_apps/centerSampleListings/airMail/index.html ,\n       version_name :  1.0.0 ,\n       unique_name :  aml.test.air_mail ,\n       what_is_new :  Nothing really new here ,\n       description_short :  Sends airmail ,\n       requirements :  None ,\n       approval_status :  APPROVED ,\n       is_enabled : true,\n       is_featured : true,\n       is_deleted : false,\n       avg_rate : 3,\n       total_votes : 3,\n       total_rate5 : 1,\n       total_rate4 : 0,\n       total_rate3 : 1,\n       total_rate2 : 0,\n       total_rate1 : 1,\n       total_reviews : 3,\n       iframe_compatible : false,\n       security_marking :  UNCLASSIFIED ,\n       is_private : false,\n       required_listings : null\n    },\n    ....\n  ]\n}",
            "title": "Learning Resources"
        },
        {
            "location": "/features/wiki/",
            "text": "Features\n\n\nSmart Search\n  \n\n\nRecommender\n  \n\n\nNotifications",
            "title": "Wiki"
        },
        {
            "location": "/features/wiki/#features",
            "text": "Smart Search     Recommender     Notifications",
            "title": "Features"
        }
    ]
}